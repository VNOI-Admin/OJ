/*! For license information please see index.js.LICENSE.txt */
!function(e,A){if("object"==typeof exports&&"object"==typeof module)module.exports=A();else if("function"==typeof define&&define.amd)define([],A);else{var Y=A();for(var t in Y)("object"==typeof exports?exports:e)[t]=Y[t]}}(this,(function(){return(()=>{var e={5528:(e,A,Y)=>{"use strict";Y.r(A),Y.d(A,{MathBackendCPU:()=>n,shared:()=>t,version_cpu:()=>rA});var t={};Y.r(t),Y.d(t,{addImpl:()=>G,bincountImpl:()=>g,bincountReduceImpl:()=>k,ceilImpl:()=>y,concatImpl:()=>x,equalImpl:()=>T,expImpl:()=>v,expm1Impl:()=>K,floorImpl:()=>C,gatherNdImpl:()=>E,gatherV2Impl:()=>_,greaterEqualImpl:()=>Q,greaterImpl:()=>M,lessEqualImpl:()=>ae,lessImpl:()=>Ae,linSpaceImpl:()=>ne,logImpl:()=>le,maxImpl:()=>oe,maximumImpl:()=>re,minimumImpl:()=>Ne,multiplyImpl:()=>We,negImpl:()=>Ge,notEqualImpl:()=>Xe,prodImpl:()=>be,rangeImpl:()=>Be,rsqrtImpl:()=>Se,sigmoidImpl:()=>qe,simpleAbsImpl:()=>l,sliceImpl:()=>we,sparseFillEmptyRowsImpl:()=>Oe,sparseReshapeImpl:()=>De,sparseSegmentReductionImpl:()=>Ce,sqrtImpl:()=>ze,squaredDifferenceImpl:()=>_e,stridedSliceImpl:()=>Pe,stringNGramsImpl:()=>$e,stringSplitImpl:()=>AA,stringToHashBucketFastImpl:()=>YA,subImpl:()=>tA,tileImpl:()=>nA,topKImpl:()=>dA,transposeImpl:()=>ke,uniqueImpl:()=>oA});var a=Y(5363);function i(e,A){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&a.util.assert("complex64"!==e.dtype,(()=>`${A} does not support complex64 tensors in the CPU backend.`))}))}const m=a.kernel_impls.whereImpl;class n extends a.KernelBackend{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new a.DataStorage(this,(0,a.engine)())}nextDataId(){return n.nextDataId++}write(e,A,Y){this.firstUse&&(this.firstUse=!1,(0,a.env)().get("IS_NODE")&&a.backend_util.warn("\n============================\nHi there ðŸ‘‹. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const t={id:this.nextDataId()};return this.data.set(t,{values:e,dtype:Y,refCount:1}),t}makeTensorInfo(e,A,Y){let t;if("string"===A&&null!=Y&&Y.length>0&&a.util.isString(Y[0])){const i=Y.map((e=>a.util.encodeString(e)));t=this.write(i,e,A)}else t=this.write(Y,e,A);return{dataId:t,shape:e,dtype:A}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,A,Y,t,a){this.data.set(e,{values:A,dtype:t,refCount:a})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:A,complexTensorInfos:Y}=this.data.get(e);if("complex64"===A){const e=this.readSync(Y.real.dataId),A=this.readSync(Y.imag.dataId);return a.backend_util.mergeRealAndImagArrays(e,A)}return this.data.get(e).values}bufferSync(e){const A=this.readSync(e.dataId);let Y=A;if("string"===e.dtype)try{Y=A.map((e=>a.util.decodeString(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return(0,a.buffer)(e.shape,e.dtype,Y)}makeOutput(e,A,Y){const t=this.write(e,A,Y);return(0,a.engine)().makeTensorFromDataId(t,A,Y,this)}disposeData(e,A=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!A&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:Y}=this.data.get(e);null!=Y&&(this.disposeData(Y.real.dataId,!0),this.disposeData(Y.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const A=a.util.now();e();return{kernelMs:a.util.now()-A}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){i([e],"where");const A=this.readSync(e.dataId);return m(e.shape,A)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function l(e){const A=new Float32Array(e.length);for(let Y=0;Y<e.length;++Y)A[Y]=Math.abs(e[Y]);return A}n.nextDataId=0;const p={kernelName:a.Abs,backendName:"cpu",kernelFunc:e=>{const{x:A}=e.inputs,Y=e.backend;i(A,"abs");let t=new Float32Array(a.util.sizeFromShape(A.shape));return t=l(Y.data.get(A.dataId).values),Y.makeOutput(t,A.shape,"float32")}};function d(e){return(A,Y,t,i,m)=>{const n=a.backend_util.assertAndGetBroadcastShape(A,Y),l=n.length,p=a.util.computeStrides(n),d=a.util.sizeFromShape(n),o=a.util.getTypedArrayFromDType(m,d),r=A.length,s=Y.length,Z=a.util.computeStrides(A),N=a.util.computeStrides(Y),j=a.backend_util.getBroadcastDims(A,n),h=a.backend_util.getBroadcastDims(Y,n);if(j.length+h.length===0)for(let A=0;A<o.length;++A)o[A]=e(t[A%t.length],i[A%i.length]);else for(let A=0;A<o.length;++A){const Y=a.util.indexToLoc(A,l,p),m=Y.slice(-r);j.forEach((e=>m[e]=0));const n=a.util.locToIndex(m,r,Z),d=Y.slice(-s);h.forEach((e=>d[e]=0));const W=a.util.locToIndex(d,s,N);o[A]=e(t[n],i[W])}return[o,n]}}function o(e){const{inputs:A,backend:Y}=e,{real:t,imag:a}=A,i=Y.data.get(t.dataId).values,m=Y.data.get(a.dataId).values,n=Y.makeTensorInfo(t.shape,"complex64");return Y.data.get(n.dataId).complexTensorInfos={real:Y.makeTensorInfo(t.shape,"float32",i),imag:Y.makeTensorInfo(a.shape,"float32",m)},n}const r={kernelName:a.Complex,backendName:"cpu",kernelFunc:o};function s(e,A,Y="float32"){if("complex64"===Y){return o({inputs:{real:s(e,A,"float32"),imag:s(e,A,"float32")},backend:e})}const t=a.util.makeZerosTypedArray(a.util.sizeFromShape(A),Y);return e.makeTensorInfo(A,Y,t)}function Z(e){const{inputs:A,backend:Y}=e,{x:t}=A;return Y.incRef(t.dataId),{dataId:t.dataId,shape:t.shape,dtype:t.dtype}}const N={kernelName:a.Identity,backendName:"cpu",kernelFunc:Z};function j(e){const{inputs:A,backend:Y}=e,{input:t}=A,a=Y.data.get(t.dataId).complexTensorInfos.real,i=Y.data.get(a.dataId).values;return Y.makeTensorInfo(a.shape,a.dtype,i)}const h={kernelName:a.Real,backendName:"cpu",kernelFunc:j};function W(e){const{inputs:A,backend:Y,attrs:t}=e,{x:i}=A,{dtype:m}=t;if("complex64"===m){if("complex64"===i.dtype)return Z({inputs:{x:i},backend:Y});const e=s(Y,i.shape,i.dtype),A=W({inputs:{x:i},backend:Y,attrs:{dtype:"float32"}}),t=o({inputs:{real:A,imag:e},backend:Y});return Y.disposeIntermediateTensorInfo(e),Y.disposeIntermediateTensorInfo(A),t}if("complex64"===i.dtype){const e=j({inputs:{input:i},backend:Y}),A=W({inputs:{x:e},backend:Y,attrs:{dtype:m}});return Y.disposeIntermediateTensorInfo(e),A}if(!a.util.hasEncodingLoss(i.dtype,m)){const e=Z({inputs:{x:i},backend:Y});return{dataId:e.dataId,shape:e.shape,dtype:m}}if("int32"===m){const e=Y.data.get(i.dataId).values,A=Int32Array.from(e);return Y.makeTensorInfo(i.shape,"int32",A)}if("bool"===m){const e=Y.data.get(i.dataId).values,A=a.util.toTypedArray([0],i.dtype),[t,m]=d(((e,A)=>e!==A?1:0))(i.shape,[],e,A,"bool");return Y.makeTensorInfo(m,"bool",t)}throw new Error(`Error in Cast: failed to cast ${i.dtype} to ${m}`)}const u={kernelName:a.Cast,backendName:"cpu",kernelFunc:W};function V(e,A,Y,t){return null==Y?({inputs:Y,backend:m})=>{const{a:n,b:l}=Y,p=m;i([n,l],e);const d=p.data.get(n.dataId).values,o=p.data.get(l.dataId).values,r="string"===n.dtype?a.backend_util.fromUint8ToStringArray(d):d,s="string"===n.dtype?a.backend_util.fromUint8ToStringArray(o):o,Z=t||n.dtype,[N,j]=A(n.shape,l.shape,r,s,Z);return p.makeTensorInfo(j,Z,N)}:({inputs:e,backend:a})=>{const{a:i,b:m}=e,n=a;if("complex64"===i.dtype||"complex64"===m.dtype){const e=W({inputs:{x:i},backend:n,attrs:{dtype:"complex64"}}),A=n.data.get(e.dataId),t=A.complexTensorInfos.real,a=A.complexTensorInfos.imag,l=n.data.get(t.dataId).values,p=n.data.get(a.dataId).values,d=W({inputs:{x:m},backend:n,attrs:{dtype:"complex64"}}),r=n.data.get(d.dataId),s=r.complexTensorInfos.real,Z=r.complexTensorInfos.imag,N=n.data.get(s.dataId).values,j=n.data.get(Z.dataId).values,[h,u,V]=Y(i.shape,m.shape,l,p,N,j),c=n.makeTensorInfo(V,"float32",h),G=n.makeTensorInfo(V,"float32",u),F=o({inputs:{real:c,imag:G},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(G),F}{const e=n.data.get(i.dataId).values,Y=n.data.get(m.dataId).values,a=t||i.dtype,[l,p]=A(i.shape,m.shape,e,Y,a);return n.makeTensorInfo(p,a,l)}}}function c(e){return(A,Y,t,i,m,n)=>{const l=a.backend_util.assertAndGetBroadcastShape(A,Y),p=a.util.sizeFromShape(l),d=l.length,o=a.util.computeStrides(l),r=a.util.getTypedArrayFromDType("float32",p),s=a.util.getTypedArrayFromDType("float32",p),Z=a.backend_util.getBroadcastDims(A,l),N=a.backend_util.getBroadcastDims(Y,l),j=a.backend_util.mergeRealAndImagArrays(t,i),h=a.backend_util.mergeRealAndImagArrays(m,n),W=A.length,u=a.util.computeStrides(A),V=Y.length,c=a.util.computeStrides(Y);if(Z.length+N.length===0)for(let A=0;A<r.length;A++){const Y=A%j.length,t=A%h.length,a=e(j[2*Y],j[2*Y+1],h[2*t],h[2*t+1]);r[A]=a.real,s[A]=a.imag}else for(let A=0;A<r.length;A++){const Y=a.util.indexToLoc(A,d,o),t=Y.slice(-W);Z.forEach((e=>t[e]=0));const i=a.util.locToIndex(t,W,u),m=Y.slice(-V);N.forEach((e=>m[e]=0));const n=a.util.locToIndex(m,V,c),l=e(j[2*i],j[2*i+1],h[2*n],h[2*n+1]);r[A]=l.real,s[A]=l.imag}return[r,s,l]}}const G=d(((e,A)=>e+A)),F=c(((e,A,Y,t)=>({real:e+Y,imag:A+t}))),X=V(a.Add,G,F),J={kernelName:a.Add,backendName:"cpu",kernelFunc:X};function g(e,A,Y,t,i){const m=a.util.sizeFromShape(t),n=a.util.makeZerosTypedArray(i,Y);for(let Y=0;Y<e.length;Y++){const t=e[Y];if(t<0)throw new Error("Input x must be non-negative!");t>=i||(n[t]+=m>0?A[Y]:1)}return n}function k(e,A,Y,t=!1){const i=e.shape[0],m=e.shape[1],n=(0,a.buffer)([i,Y],A.dtype);for(let a=0;a<i;a++)for(let i=0;i<m;i++){const m=e.get(a,i);if(m<0)throw new Error("Input x must be non-negative!");m>=Y||(t?n.set(1,a,m):A.size>0?n.set(n.get(a,m)+A.get(a,i),a,m):n.set(n.get(a,m)+1,a,m))}return n}function f(e){return(A,Y,t)=>{const i=a.util.getTypedArrayFromDType(Y,A.length);for(let Y=0;Y<A.length;++Y)i[Y]=e(A[Y],t);return i}}function R(e,A,Y){return({inputs:t,attrs:m,backend:n})=>{const{x:l}=t;if(i(l,e),"string"===l.dtype||"string"===Y)throw new Error("unaryKernelFunc does not support string input/output");const p=n,d=p.data.get(l.dataId).values,o=a.util.sizeFromShape(l.shape),r=Y||l.dtype,s=a.util.getArrayFromDType(r,o);for(let e=0;e<o;++e)s[e]=A(d[e],m);return p.makeTensorInfo(l.shape,r,s)}}function b(e,A,Y){return({inputs:t,attrs:a,backend:m})=>{const{x:n}=t;if(i(n,e),"string"===n.dtype||"string"===Y)throw new Error("unaryKernelFunc does not support string input/output");const l=m,p=l.data.get(n.dataId).values,d=Y||n.dtype,o=A(p,d,a);return l.makeTensorInfo(n.shape,d,o)}}const y=f((e=>Math.ceil(e))),B=b(a.Ceil,y),S={kernelName:a.Ceil,backendName:"cpu",kernelFunc:B};function x(e,A,Y,t){const i=a.util.getArrayFromDType(Y,a.util.sizeFromShape(A));if(t&&"string"!==Y){let A=0;e.forEach((e=>{const Y=a.util.sizeFromShape(e.shape);i.set(e.vals,A),A+=Y}))}else{let t=0;e.forEach((e=>{const m="string"===Y?a.backend_util.fromUint8ToStringArray(e.vals):e.vals;let n=0;for(let Y=0;Y<e.shape[0];++Y){const a=Y*A[1]+t;for(let A=0;A<e.shape[1];++A)i[a+A]=m[n++]}t+=e.shape[1]}))}return i}const T=d(((e,A)=>e===A?1:0)),q=V(a.Equal,T,null,"bool"),I={kernelName:a.Equal,backendName:"cpu",kernelFunc:q},v=f((e=>Math.exp(e))),w=b(a.Exp,v),U={kernelName:a.Exp,backendName:"cpu",kernelFunc:w},K=f((e=>Math.expm1(e))),O=b(a.Expm1,K),D={kernelName:a.Expm1,backendName:"cpu",kernelFunc:O},C=f((e=>Math.floor(e))),z=b(a.Floor,C),H={kernelName:a.Floor,backendName:"cpu",kernelFunc:z};function E(e,A,Y,t,i,m,n,l,p){const d=(0,a.buffer)([t,m],Y);for(let Y=0;Y<t;Y++){const t=[];let a=0;for(let A=0;A<i;A++){const m=e[Y*i+A];a+=m*n[A],t.push(m)}if(a<0||a>=p/m)throw new Error(`Invalid indices: ${t} does not index into ${l}`);for(let e=0;e<m;e++)d.values[Y*m+e]=A.get(...A.indexToLoc(a*m+e))}return d}function _(e,A,Y){const t=(0,a.buffer)(Y,e.dtype);for(let Y=0;Y<t.size;++Y){const a=t.indexToLoc(Y).slice(),i=a[0],m=a[2],n=A.locToIndex([i,m]);a[2]=A.values[n];const l=e.locToIndex(a);t.values[Y]=e.values[l]}return t}const M=d(((e,A)=>e>A?1:0)),L=V(a.Greater,M,null,"bool"),P={kernelName:a.Greater,backendName:"cpu",kernelFunc:L},Q=d(((e,A)=>e>=A?1:0)),$=V(a.GreaterEqual,Q,null,"bool"),ee={kernelName:a.GreaterEqual,backendName:"cpu",kernelFunc:$},Ae=d(((e,A)=>e<A?1:0)),Ye=V(a.Less,Ae,null,"bool"),te={kernelName:a.Less,backendName:"cpu",kernelFunc:Ye},ae=d(((e,A)=>e<=A?1:0)),ie=V(a.LessEqual,ae,null,"bool"),me={kernelName:a.LessEqual,backendName:"cpu",kernelFunc:ie};function ne(e,A,Y){const t=(A-e)/(Y-1),i=a.util.makeZerosTypedArray(Y,"float32");i[0]=e;for(let e=1;e<i.length;e++)i[e]=i[e-1]+t;return i}const le=f((e=>Math.log(e))),pe=b(a.Log,le),de={kernelName:a.Log,backendName:"cpu",kernelFunc:pe};function oe(e,A,Y,t){const i=a.util.getTypedArrayFromDType(t,a.util.sizeFromShape(Y));for(let Y=0;Y<i.length;++Y){const t=Y*A;let a=e[t];for(let Y=0;Y<A;++Y){const A=e[t+Y];(Number.isNaN(A)||A>a)&&(a=A)}i[Y]=a}return i}const re=d(((e,A)=>Math.max(e,A))),se=V(a.Maximum,re),Ze={kernelName:a.Maximum,backendName:"cpu",kernelFunc:se},Ne=d(((e,A)=>Math.min(e,A))),je=V(a.Minimum,Ne),he={kernelName:a.Minimum,backendName:"cpu",kernelFunc:je},We=d(((e,A)=>e*A)),ue=c(((e,A,Y,t)=>({real:e*Y-A*t,imag:e*t+A*Y}))),Ve=V(a.Multiply,We,ue),ce={kernelName:a.Multiply,backendName:"cpu",kernelFunc:Ve};function Ge(e,A,Y){const t=a.util.createScalarValue(-1,Y);return We([],A,t,e,Y)}const Fe={kernelName:a.Neg,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y}=e,{x:t}=A;i(t,"neg");const a=Y.data.get(t.dataId).values,[m,n]=Ge(a,t.shape,t.dtype);return Y.makeTensorInfo(n,t.dtype,m)}},Xe=d(((e,A)=>e!==A?1:0)),Je=V(a.NotEqual,Xe,null,"bool"),ge={kernelName:a.NotEqual,backendName:"cpu",kernelFunc:Je};function ke(e,A,Y,t,i){const m=A.length,n=a.util.sizeFromShape(A),l=a.util.computeStrides(A),p=a.util.computeStrides(i),d=a.util.getTypedArrayFromDType(Y,a.util.sizeFromShape(i));for(let A=0;A<n;++A){const Y=a.util.indexToLoc(A,m,l),i=new Array(Y.length);for(let e=0;e<i.length;e++)i[e]=Y[t[e]];d[a.util.locToIndex(i,m,p)]=e[A]}return d}function fe(e){const{inputs:A,attrs:Y,backend:t}=e,{x:a}=A,{perm:m}=Y;i(a,"transpose");const n=a.shape.length,l=new Array(n);for(let e=0;e<l.length;e++)l[e]=a.shape[m[e]];const p=ke(t.data.get(a.dataId).values,a.shape,a.dtype,m,l);return{dataId:t.write(p,l,a.dtype),shape:l,dtype:a.dtype}}const Re={kernelName:a.Transpose,backendName:"cpu",kernelFunc:fe};function be(e,A,Y,t){const[i,m]=a.backend_util.computeOutAndReduceShapes(e,t),n=(0,a.upcastType)(A,"int32"),l=a.util.makeZerosTypedArray(a.util.sizeFromShape(i),n),p=a.util.sizeFromShape(m);for(let e=0;e<l.length;++e){const A=e*p;let t=1;for(let e=0;e<p;++e)t*=Y[A+e];l[e]=t}return{outVals:l,outShape:i,outDtype:n}}const ye={kernelName:a.Prod,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m}=A,{axis:n,keepDims:l}=t;i(m,"prod");const p=m.shape.length,d=a.util.parseAxisParam(n,m.shape),o=a.backend_util.getAxesPermutation(d,p);let r=d,s=m;const Z=[];null!=o&&(s=fe({inputs:{x:m},backend:Y,attrs:{perm:o}}),Z.push(s),r=a.backend_util.getInnerMostAxes(r.length,p));const N=Y.data.get(s.dataId).values,{outVals:j,outShape:h,outDtype:W}=be(s.shape,s.dtype,N,r);let u=h;return l&&(u=a.backend_util.expandShapeToKeepDim(h,d)),Z.forEach((e=>Y.disposeIntermediateTensorInfo(e))),Y.makeTensorInfo(u,W,j)}};function Be(e,A,Y,t){if(e===A||e<A&&Y<0||A<e&&Y>1)return a.util.makeZerosTypedArray(0,t);const i=Math.abs(Math.ceil((A-e)/Y)),m=a.util.makeZerosTypedArray(i,t);A<e&&1===Y&&(Y=-1),m[0]=e;for(let e=1;e<m.length;e++)m[e]=m[e-1]+Y;return m}const Se=f((e=>1/Math.sqrt(e))),xe=b(a.Rsqrt,Se),Te={kernelName:a.Rsqrt,backendName:"cpu",kernelFunc:xe},qe=f((e=>1/(1+Math.exp(-e)))),Ie=R(a.Sigmoid,(e=>1/(1+Math.exp(-e)))),ve={kernelName:a.Sigmoid,backendName:"cpu",kernelFunc:Ie};function we(e,A,Y,t,i){const m=a.slice_util.isSliceContinous(t,A,Y),n=a.util.sizeFromShape(Y),l=a.util.computeStrides(t);if(m){const Y=a.slice_util.computeFlatOffset(A,l);return"string"===i?e.slice(Y,Y+n):e.subarray(Y,Y+n)}const p="string"===i?a.backend_util.fromUint8ToStringArray(e):e,d=(0,a.buffer)(t,i,p),o=(0,a.buffer)(Y,i);for(let e=0;e<o.size;++e){const Y=o.indexToLoc(e),t=Y.map(((e,Y)=>e+A[Y]));o.set(d.get(...t),...Y)}return"string"===i?a.backend_util.fromStringArrayToUint8(o.values):o.values}function Ue(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m}=A,{begin:n,size:l}=t;i(m,"slice");const[p,d]=a.slice_util.parseSliceParams(m,n,l);a.slice_util.assertParamsValid(m,p,d);const o=we(Y.data.get(m.dataId).values,p,d,m.shape,m.dtype);return Y.makeTensorInfo(d,m.dtype,o)}const Ke={kernelName:a.Slice,backendName:"cpu",kernelFunc:Ue};function Oe(e,A,Y,t,i,m,n){const l=A[0],p=m[0],d=new Array(p),o=new Array(l),r=A[1];if(0===p){if(0!==l)throw new Error(`Received SparseTensor with denseShape[0] = 0 but\n         indices.shape[0] = ${l}`);return[a.util.getArrayFromDType(Y,0),[0,r],a.util.getArrayFromDType(i,0),d,o]}let s=!0,Z=0;const N=new Array(p).fill(0);for(let A=0;A<l;++A){const Y=e[A*r];if(Y<0)throw new Error(`indices(${A}, 0) is invalid: ${Y} < 0`);if(Y>=p)throw new Error(`indices(${A}, 0) is invalid: ${Y} >= ${p}`);++N[Y],s=s&&Y>=Z,Z=Y}let j=!0;for(let e=0;e<p;++e){const A=0===N[e];d[e]=A,j=j&&!A,N[e]=Math.max(N[e],1),e>0&&(N[e]+=N[e-1])}if(j&&s){const A=e,Y=t;for(let e=0;e<l;++e)o[e]=e;return[A,[l,r],Y,d,o]}{const A=N[p-1],m=a.util.getArrayFromDType(Y,A*r),s=a.util.getArrayFromDType(i,A),Z=new Array(p).fill(0);for(let A=0;A<l;++A){const Y=e[A*r],a=Z[Y],i=(0===Y?0:N[Y-1])+a;Z[Y]++;for(let Y=0;Y<r;++Y)m[i*r+Y]=e[A*r+Y];s[i]=t[A],o[A]=i}for(let e=0;e<p;++e){if(0===Z[e]){const A=0===e?0:N[e-1];m[A*r+0]=e;for(let e=1;e<r;++e)m[A*r+e]=0;s[A]=n}}return[m,[A,r],s,d,o]}}function De(e,A,Y,t,i){const m=a.util.sizeFromShape(t),n=A[0],l=i.length,p=[];let d=1,o=-1;for(let e=0;e<l;++e){const A=i[e];if(-1===A){if(-1!==o)throw new Error(`only one output dimension may be -1, not both ${o} and ${e}`);o=e,p.push(1)}else{if(A<0)throw new Error(`size ${e} must be non-negative, not ${A}`);d*=A,p.push(A)}}if(-1!==o){if(d<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const e=Math.trunc(m/d);if(d*e!==m)throw new Error(`Input to reshape is a SparseTensor with ${m}\n          dense values, but the requested shape requires a multiple of ${d}. inputShape=${t} outputShape= ${p}`);p[o]=e}const r=a.util.sizeFromShape(p);if(r!==m)throw new Error(`Input to reshape is a tensor with ${m} dense values, but the requested shape has ${r}. inputShape=${t} outputShape=${p}`);const s=t.length,Z=[];if(s>0){Z[s-1]=1;for(let e=s-2;e>=0;--e)Z[e]=Z[e+1]*t[e+1]}const N=[];if(l>0){N[l-1]=1;for(let e=l-2;e>=0;--e)N[e]=N[e+1]*p[e+1]}const j=a.util.getArrayFromDType(Y,n*l);for(let A=0;A<n;++A){let Y=0;for(let t=0;t<s;++t)Y+=e[A*s+t]*Z[t];for(let e=0;e<l;++e)j[A*l+e]=Math.trunc(Y/N[e]),Y%=N[e]}return[j,[n,l],p]}function Ce(e,A,Y,t,i,m=!1,n=0){const l=t.length;if(l!==i.length)throw new Error("segmentIds and indices should have same size.");const p=[A[0],e.length/A[0]],d=p[1],o=l>0?i[l-1]+1:0;if(o<0)throw new Error("segment ids must be >= 0");const r=A.slice();r[0]=o;const s=r.reduce(((e,A)=>e*A),1),Z=a.util.getArrayFromDType(Y,s);if(0===l)return o>0&&Z.fill(n),[Z,r];if(o<=0)throw new Error("segment ids must be >= 0");let N=0,j=1,h=0,W=i[N];for(;;){let A=0;if(j<l){if(A=i[j],W===A){++j;continue}if(W>=A)throw new Error("segment ids are not increasing")}if(W<0||W>=o)throw new Error(`Segment id ${W} out of range [0, ${o}), possibly because segmentIds input is not sorted.`);W>h&&Z.fill(n,h*d,W*d);for(let A=N;A<j;++A){const Y=t[A];if(Y<0||Y>=p[0])throw new Error(`Bad: indices[${A}] == ${t[A]} out of range [0, ${p[0]})`);for(let A=0;A<d;A++)Z[W*d+A]+=e[Y*d+A]}if(m)for(let e=0;e<d;e++)Z[W*d+e]/=j-N;if(N=j,++j,h=W+1,W=A,j>l)break}return h<o&&Z.fill(n,h*d,o*d),[Z,r]}const ze=f((e=>Math.sqrt(e))),He=R(a.Sqrt,(e=>Math.sqrt(e))),Ee={kernelName:a.Sqrt,backendName:"cpu",kernelFunc:He},_e=d(((e,A)=>{const Y=e-A;return Y*Y})),Me=V(a.SquaredDifference,_e),Le={kernelName:a.SquaredDifference,backendName:"cpu",kernelFunc:Me};function Pe(e,A,Y,t){const i=(0,a.buffer)(e,A.dtype);for(let e=0;e<i.size;e++){const a=i.indexToLoc(e),m=new Array(a.length);for(let e=0;e<m.length;e++)m[e]=a[e]*Y[e]+t[e];i.set(A.get(...m),...a)}return i}class Qe{constructor(e,A,Y,t,i,m){this.separator=a.util.encodeString(e),this.nGramWidths=A,this.leftPad=a.util.encodeString(Y),this.rightPad=a.util.encodeString(t),this.padWidth=i,this.preserveShort=m}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,A){const Y=this.getPadWidth(A);return Math.max(0,e+2*Y-A+1)}createNGrams(e,A,Y,t,a,i){for(let m=0;m<a;++m){const n=this.getPadWidth(i),l=Math.max(0,n-m),p=Math.max(0,n-(a-(m+1))),d=i-(l+p),o=A+(l>0?0:m-n);let r=0;r+=l*this.leftPad.length;for(let A=0;A<d;++A)r+=e[o+A].length;r+=p*this.rightPad.length;r+=(l+p+d-1)*this.separator.length,Y[t+m]=new Uint8Array(r);const s=Y[t+m];let Z=0;const N=e=>e.forEach((e=>s[Z++]=e));for(let e=0;e<l;++e)N(this.leftPad),N(this.separator);for(let A=0;A<d-1;++A)N(e[o+A]),N(this.separator);if(d>0){N(e[o+d-1]);for(let e=0;e<p;++e)N(this.separator),N(this.rightPad)}else{for(let e=0;e<p-1;++e)N(this.rightPad),N(this.separator);N(this.rightPad)}}}compute(e,A){const Y=e.length,t=A.length;if(t>0){let e=A[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let a=1;a<t;++a){let t=A[a]>=e;if(t=t&&A[a]<=Y,!t)throw new Error(`Invalid split value ${A[a]}, must be in [${e}, ${Y}]`);e=A[a]}if(e!==Y)throw new Error(`Last split value must be data size. Expected ${Y}, got ${e}`)}const i=t-1,m=a.util.getArrayFromDType("int32",t);if(0===Y||0===t){const e=new Array(Y);for(let e=0;e<=i;++e)m[e]=0;return[e,m]}m[0]=0;for(let e=1;e<=i;++e){const Y=A[e]-A[e-1];let t=0;this.nGramWidths.forEach((e=>{t+=this.getNumNGrams(Y,e)})),this.preserveShort&&Y>0&&0===t&&(t=1),m[e]=m[e-1]+t}const n=new Array(m[i]);for(let Y=0;Y<i;++Y){const t=A[Y];let a=m[Y];if(this.nGramWidths.forEach((i=>{const m=A[Y+1]-A[Y],l=this.getNumNGrams(m,i);this.createNGrams(e,t,n,a,l,i),a+=l})),this.preserveShort&&a===m[Y]){const i=A[Y+1]-A[Y];if(0===i)continue;const m=i+2*this.padWidth,l=1;this.createNGrams(e,t,n,a,l,m)}}return[n,m]}}function $e(e,A,Y,t,a,i,m,n){return new Qe(Y,t,a,i,m,n).compute(e,A)}function eA(e,A,Y,t){if(!e.length)return;if(0===A.length){for(let A=0;A<e.length;++A)t.push(e.subarray(A,A+1));return}if(1===A.length){const a=A[0];let i=e.indexOf(a);for(;-1!==i;){const A=e.subarray(0,i);Y&&0===A.length||t.push(A),i=(e=e.subarray(i+1)).indexOf(a)}return void(Y&&0===e.length||t.push(e))}let a=0;for(let i=0;i<e.length+1;i++)if(i===e.length||-1!==A.indexOf(e[i])){const A=e.subarray(a,i);Y&&0===A.length||t.push(A),a=i+1}}function AA(e,A,Y){const t=e.length,i=[];let m=0,n=0;const l=new Array(t);for(let a=0;a<t;++a){const t=i.length;eA(e[a],A,Y,i);const p=i.length-t;l[a]=p,m+=p,n=Math.max(n,p)}const p=a.util.getArrayFromDType("int32",2*m),d=new Array(m),o=[t,n];let r=0;for(let e=0;e<t;++e)for(let A=0;A<l[e];++A)p[2*r]=e,p[2*r+1]=A,d[r]=i[r],++r;return[p,d,o]}function YA(e,A){const Y=a.util.getArrayFromDType("int32",e.length);for(let t=0;t<e.length;++t)Y[t]=a.util.fingerPrint64(e[t]).modulo(A).getLowBitsUnsigned();return Y}const tA=d(((e,A)=>e-A)),aA=c(((e,A,Y,t)=>({real:e-Y,imag:A-t}))),iA=V(a.Sub,tA,aA),mA={kernelName:a.Sub,backendName:"cpu",kernelFunc:iA};function nA(e,A){const Y=new Array(e.rank);for(let t=0;t<Y.length;t++)Y[t]=e.shape[t]*A[t];const t=(0,a.buffer)(Y,e.dtype);for(let A=0;A<t.values.length;++A){const Y=t.indexToLoc(A),a=new Array(e.rank);for(let A=0;A<a.length;A++)a[A]=Y[A]%e.shape[A];const i=e.locToIndex(a);t.values[A]=e.values[i]}return t}const lA=(e,A)=>{const Y=A.value-e.value;return 0===Y?e.index-A.index:Y};function pA(e,A,Y=0,t=e.length-1){for(;t>Y;){if(t-Y>600){const a=t-Y+1,i=A-Y+1,m=Math.log(a),n=.5*Math.exp(2*m/3),l=.5*Math.sqrt(m*n*(a-n)/a)*Math.sign(i-a/2);pA(e,A,Math.max(Y,Math.floor(A-i*n/a+l)),Math.min(t,Math.floor(A+(a-i)*n/a+l)))}const i=e[A];let m=Y,n=t;for(a.util.swap(e,Y,A),lA(e[t],i)>0&&a.util.swap(e,Y,t);m<n;){for(a.util.swap(e,m,n),m++,n--;lA(e[m],i)<0;)m+=1;for(;lA(e[n],i)>0;)n-=1}0===lA(e[Y],i)?a.util.swap(e,Y,n):(n+=1,a.util.swap(e,n,t)),n<=A&&(Y=n+1),A<=n&&(t=n-1)}}function dA(e,A,Y,t,i){const m=A[A.length-1],[n,l]=[e.length/m,m],p=a.util.getTypedArrayFromDType(Y,n*t),d=a.util.getTypedArrayFromDType("int32",n*t);for(let A=0;A<n;A++){const Y=A*l,a=e.subarray(Y,Y+l);let m=new Array(a.length);a.forEach(((e,A)=>m[A]={value:e,index:A})),t<m.length&&(pA(m,t),m=m.slice(0,t)),i&&m.sort(lA);const n=A*t,o=p.subarray(n,n+t),r=d.subarray(n,n+t);for(let e=0;e<t;e++)o[e]=m[e].value,r[e]=m[e].index}const o=A.slice();return o[o.length-1]=t,[(0,a.buffer)(o,Y,p),(0,a.buffer)(o,"int32",d)]}function oA(e,A,Y,t){const i=a.util.parseAxisParam(A,Y)[0],m=[1,Y[0],1];for(let e=0;e<i;e++)m[0]*=Y[e];m[1]=Y[i];for(let e=i+1;e<Y.length;e++)m[2]*=Y[e];const n={},l=new Int32Array(Y[i]),p=new a.TensorBuffer(m,t,e),d=[],o=1===m[0]&&1===m[2];for(let A=0;A<Y[i];A++){let Y;if(o)Y=e[A].toString();else{const e=[];for(let Y=0;Y<m[0];Y++)for(let t=0;t<m[2];t++)e.push(p.get(Y,A,t));Y=e.join(",")}if(void 0!==n[Y])l[A]=n[Y];else{const e=Object.keys(n).length;n[Y]=e,l[A]=e,d.push(A)}}const r=m.slice();r[1]=Object.keys(n).length;const s=new a.TensorBuffer(r,t);d.forEach(((e,A)=>{for(let Y=0;Y<m[0];Y++)for(let t=0;t<m[2];t++)s.set(p.get(Y,e,t),Y,A,t)}));const Z=Y.slice();return Z[i]=r[1],{outputValues:s.values,outputShape:Z,indices:l}}const rA="3.9.0";(0,a.registerBackend)("cpu",(()=>new n),1);const sA=R(a.Elu,(e=>e>=0?e:Math.exp(e)-1)),ZA={kernelName:a.Elu,backendName:"cpu",kernelFunc:sA};function NA(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m}=A,{alpha:n}=t;i([m],"leakyRelu");const l=a.util.sizeFromShape(m.shape),p=Y.data.get(m.dataId).values,d=a.util.getTypedArrayFromDType("float32",l);for(let e=0;e<p.length;e++)d[e]=p[e]<0?n*p[e]:p[e];return Y.makeTensorInfo(m.shape,"float32",d)}const jA={kernelName:a.LeakyRelu,backendName:"cpu",kernelFunc:NA},hA=d(((e,A)=>e<0?A*e:e));function WA(e){const{inputs:A,backend:Y}=e,{x:t,alpha:a}=A;i([t,a],"prelu");const m=Y.data.get(t.dataId).values,n=Y.data.get(a.dataId).values,[l,p]=hA(t.shape,a.shape,m,n,t.dtype);return Y.makeTensorInfo(p,t.dtype,l)}const uA={kernelName:a.Prelu,backendName:"cpu",kernelFunc:WA},VA=R(a.Relu,(e=>Math.max(0,e))),cA={kernelName:a.Relu,backendName:"cpu",kernelFunc:VA},GA=R(a.Relu6,(e=>Math.min(Math.max(0,e),6))),FA={kernelName:a.Relu6,backendName:"cpu",kernelFunc:GA};function XA(e,A,Y,t,a){if("linear"===Y)return Z({inputs:{x:A},backend:e});if("relu"===Y)return VA({inputs:{x:A},backend:e});if("elu"===Y)return sA({inputs:{x:A},backend:e});if("relu6"===Y)return GA({inputs:{x:A},backend:e});if("prelu"===Y)return WA({inputs:{x:A,alpha:t},backend:e});if("leakyrelu"===Y)return NA({inputs:{x:A},backend:e,attrs:{alpha:a}});if("sigmoid"===Y)return Ie({inputs:{x:A},backend:e});throw new Error(`Activation ${Y} has not been implemented for the CPU backend.`)}function JA(e){const{inputs:A,backend:Y,attrs:t}=e,{x:i}=A,{shape:m}=t,n=a.util.sizeFromShape(i.shape),l=a.util.inferFromImplicitShape(m,n),p=a.util.sizeFromShape(l);a.util.assert(n===p,(()=>`The new shape (${l}) has ${p} elements and the old shape (${i.shape}) has ${n} elements. The new shape and old shape must have the same number of elements.`)),Y.incRef(i.dataId);const d=Y.data.get(i.dataId);if(null!=d.complexTensorInfos){const e=d.complexTensorInfos.real,A=d.complexTensorInfos.imag;e.shape=l,A.shape=l}return{dataId:i.dataId,shape:l,dtype:i.dtype}}const gA={kernelName:a.Reshape,backendName:"cpu",kernelFunc:JA};function kA(e){const{inputs:A,backend:Y,attrs:t}=e,{a:m,b:n}=A,{transposeA:l,transposeB:p}=t;i([m,n],"matMul");const d=m.shape.length,o=n.shape.length,r=l?m.shape[d-2]:m.shape[d-1],s=p?n.shape[o-1]:n.shape[o-2],Z=l?m.shape[d-1]:m.shape[d-2],N=p?n.shape[o-2]:n.shape[o-1],j=m.shape.slice(0,-2),h=n.shape.slice(0,-2),W=a.util.sizeFromShape(j),u=a.util.sizeFromShape(h),V=W===u||1===W||1===u;a.util.assert(d>=2&&o>=2&&V,(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${j}) and (${h}).`));const c=(W>u?m.shape.slice(0,-2):n.shape.slice(0,-2)).concat([Z,N]);a.util.assert(r===s,(()=>`Error in matMul: inner shapes (${r}) and (${s}) of Tensors with shapes ${m.shape} and ${n.shape} and transposeA=${l} and transposeB=${p} must match.`));const G=p?[u,N,s]:[u,s,N],F=JA({inputs:{x:m},backend:Y,attrs:{shape:l?[W,r,Z]:[W,Z,r]}}),X=JA({inputs:{x:n},backend:Y,attrs:{shape:G}}),J=l?F.shape[1]:F.shape[2],g=l?F.shape[2]:F.shape[1],k=p?X.shape[1]:X.shape[2],f=Math.max(W,u),R=Y.data.get(F.dataId).values,b=Y.data.get(X.dataId).values,y=a.util.computeStrides(F.shape),B=a.util.computeStrides(X.shape),[S,x,T]=l?[y[0],1,y[1]]:[y[0],y[1],1],[q,I,v]=p?[1,B[1],B[0]]:[B[1],1,B[0]],w=g*k,U=(0,a.buffer)([f,g,k],F.dtype),K=U.values,O=Y.blockSize;for(let e=0;e<f;e++)for(let A=0;A<g;A+=O)for(let Y=0;Y<k;Y+=O)for(let t=0;t<J;t+=O){const a=Math.min(A+O,g),i=Math.min(Y+O,k),m=Math.min(t+O,J);for(let n=A;n<a;n++)for(let A=Y;A<i;A++){let Y=0;for(let a=t;a<m;a++){const t=Math.min(e,W-1)*S,i=Math.min(e,u-1)*v;Y+=R[t+n*x+a*T]*b[a*q+A*I+i]}K[e*w+(n*k+A)]+=Y}}return Y.disposeIntermediateTensorInfo(F),Y.disposeIntermediateTensorInfo(X),Y.makeTensorInfo(c,U.dtype,U.values)}const fA={kernelName:a.BatchMatMul,backendName:"cpu",kernelFunc:kA};const RA={kernelName:a._FusedMatMul,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{a,b:i,bias:m,preluActivationWeights:n}=A,{transposeA:l,transposeB:p,activation:d,leakyreluAlpha:o}=t;let r,s,Z;const N=[];r=kA({inputs:{a,b:i},attrs:{transposeA:l,transposeB:p},backend:Y}),m&&(s=X({inputs:{a:r,b:m},backend:Y}),N.push(r),r=s),d&&(Z=XA(Y,r,d,n,o),N.push(r),r=Z);for(const e of N)Y.disposeIntermediateTensorInfo(e);return r}},bA=R(a.Acos,(e=>Math.acos(e))),yA={kernelName:a.Acos,backendName:"cpu",kernelFunc:bA},BA=R(a.Acosh,(e=>Math.acosh(e))),SA={kernelName:a.Acosh,backendName:"cpu",kernelFunc:BA};const xA={kernelName:a.AddN,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y}=e,t=A;i(A,"addN");const m=t.map((e=>Y.data.get(e.dataId).values)),n=(0,a.buffer)(t[0].shape,t[0].dtype),l=n.values;for(let e=0;e<t.length;e++){const A=m[e];for(let e=0;e<l.length;e++)l[e]+=A[e]}return Y.makeTensorInfo(n.shape,n.dtype,n.values)}};const TA={kernelName:a.All,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m}=A,{axis:n,keepDims:l}=t;i(m,"all");const p=a.util.parseAxisParam(n,m.shape);let d=p;const o=a.backend_util.getAxesPermutation(d,m.shape.length);let r=m;null!=o&&(r=fe({inputs:{x:m},backend:Y,attrs:{perm:o}}),d=a.backend_util.getInnerMostAxes(d.length,m.shape.length)),a.backend_util.assertAxesAreInnerMostDims("all",d,r.shape.length);const[s,Z]=a.backend_util.computeOutAndReduceShapes(r.shape,d),N=a.util.sizeFromShape(Z),j=a.util.makeZerosTypedArray(a.util.sizeFromShape(s),r.dtype),h=Y.data.get(r.dataId).values;for(let e=0;e<j.length;++e){const A=e*N;let Y=h[A];for(let e=0;e<N;++e){const t=h[A+e];Y=Y&&t}j[e]=Y}null!=o&&Y.disposeIntermediateTensorInfo(r);const W=Y.makeTensorInfo(s,r.dtype,j);if(l){const e=JA({inputs:{x:W},backend:Y,attrs:{shape:a.backend_util.expandShapeToKeepDim(s,p)}});return Y.disposeIntermediateTensorInfo(W),e}return W}};const qA={kernelName:a.Any,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m}=A,{axis:n,keepDims:l}=t;i(m,"any");const p=a.util.parseAxisParam(n,m.shape);let d=p;const o=a.backend_util.getAxesPermutation(d,m.shape.length);let r=m;null!=o&&(r=fe({inputs:{x:m},backend:Y,attrs:{perm:o}}),d=a.backend_util.getInnerMostAxes(d.length,m.shape.length)),a.backend_util.assertAxesAreInnerMostDims("any",d,r.shape.length);const[s,Z]=a.backend_util.computeOutAndReduceShapes(r.shape,d),N=a.util.sizeFromShape(Z),j=a.util.makeZerosTypedArray(a.util.sizeFromShape(s),r.dtype),h=Y.data.get(r.dataId).values;for(let e=0;e<j.length;++e){const A=e*N;let Y=h[A];for(let e=0;e<N;++e){const t=h[A+e];Y=Y||t}j[e]=Y}null!=o&&Y.disposeIntermediateTensorInfo(r);const W=Y.makeTensorInfo(s,r.dtype,j);if(l){const e=JA({inputs:{x:W},backend:Y,attrs:{shape:a.backend_util.expandShapeToKeepDim(s,p)}});return Y.disposeIntermediateTensorInfo(W),e}return W}};const IA={kernelName:a.ArgMax,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m}=A,{axis:n}=t;i(m,"argMax");let l=a.util.parseAxisParam(n,m.shape);const p=a.backend_util.getAxesPermutation(l,m.shape.length);let d=m;const o=[];null!=p&&(d=fe({inputs:{x:m},backend:Y,attrs:{perm:p}}),o.push(d),l=a.backend_util.getInnerMostAxes(l.length,d.shape.length)),l=[l[0]],a.backend_util.assertAxesAreInnerMostDims("argMax",l,d.shape.length);const[r,s]=a.backend_util.computeOutAndReduceShapes(d.shape,l),Z=a.util.sizeFromShape(r),N=a.util.makeZerosTypedArray(Z,"int32"),j=a.util.sizeFromShape(s),h=Y.data.get(d.dataId).values;for(let e=0;e<N.length;++e){const A=e*j;let Y=h[A],t=0;for(let e=0;e<j;++e){const a=h[A+e];a>Y&&(Y=a,t=e)}N[e]=t}return o.forEach((e=>Y.disposeIntermediateTensorInfo(e))),Y.makeTensorInfo(r,"int32",N)}};const vA={kernelName:a.ArgMin,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m}=A,{axis:n}=t;i(m,"argMin");let l=a.util.parseAxisParam(n,m.shape);const p=a.backend_util.getAxesPermutation(l,m.shape.length);let d=m;const o=[];null!=p&&(d=fe({inputs:{x:m},backend:Y,attrs:{perm:p}}),o.push(d),l=a.backend_util.getInnerMostAxes(l.length,d.shape.length)),l=[l[0]],a.backend_util.assertAxesAreInnerMostDims("argMin",l,d.shape.length);const[r,s]=a.backend_util.computeOutAndReduceShapes(d.shape,l),Z=a.util.sizeFromShape(r),N=a.util.makeZerosTypedArray(Z,"int32"),j=a.util.sizeFromShape(s),h=Y.data.get(d.dataId).values;for(let e=0;e<N.length;++e){const A=e*j;let Y=h[A],t=0;for(let e=0;e<j;++e){const a=h[A+e];a<Y&&(Y=a,t=e)}N[e]=t}return o.forEach((e=>Y.disposeIntermediateTensorInfo(e))),Y.makeTensorInfo(r,"int32",N)}},wA=R(a.Asin,(e=>Math.asin(e))),UA={kernelName:a.Asin,backendName:"cpu",kernelFunc:wA},KA=R(a.Asinh,(e=>Math.asinh(e))),OA={kernelName:a.Asinh,backendName:"cpu",kernelFunc:KA},DA=R(a.Atan,(e=>Math.atan(e))),CA={kernelName:a.Atan,backendName:"cpu",kernelFunc:DA},zA=d(((e,A)=>Math.atan2(e,A))),HA=V(a.Atan2,zA),EA={kernelName:a.Atan2,backendName:"cpu",kernelFunc:HA},_A=R(a.Atanh,(e=>Math.atanh(e))),MA={kernelName:a.Atanh,backendName:"cpu",kernelFunc:_A};function LA(e,A,Y,t,i,m){const n=i.strideHeight,l=i.strideWidth,p=i.dilationHeight,d=i.dilationWidth,o=i.effectiveFilterHeight,r=i.effectiveFilterWidth,s=i.padInfo.top,Z=i.padInfo.left,N="max"===m?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,j=(0,a.buffer)(i.outShape,Y),h=j.values,W=i.outShape[1]*i.outShape[2]*i.outShape[3],u=i.outShape[2]*i.outShape[3],V=i.outShape[3];for(let A=0;A<i.batchSize;++A){const Y=A*W,a=A*t[0];for(let A=0;A<i.inChannels;++A)for(let j=0;j<i.outHeight;++j){const W=j*n-s,c=Math.max(0,W),G=Math.min(i.inHeight,o+W),F=Y+j*u;for(let Y=0;Y<i.outWidth;++Y){const n=Y*l-Z,o=Math.max(0,n),s=Math.min(i.inWidth,r+n);let j=N,W=0,u=0;for(let Y=c;Y<G;Y+=p){const i=a+Y*t[1];for(let Y=o;Y<s;Y+=d){const a=e[i+Y*t[2]+A];"max"===m&&a>j?j=a:"avg"===m&&(W+=a,u++)}if(isNaN(j))break}h[F+Y*V+A]="avg"===m?W/u:j}}}return j}function PA(e,A,Y,t,i=!1,m=!1){const n=(0,a.buffer)(t.outShape,"int32"),l=t.strideHeight,p=t.strideWidth,d=t.dilationHeight,o=t.dilationWidth,r=t.effectiveFilterHeight,s=t.effectiveFilterWidth,Z=t.padInfo.top,N=t.padInfo.left,j=(0,a.buffer)(A,Y,e);for(let e=0;e<t.batchSize;++e)for(let A=0;A<t.inChannels;++A)for(let Y=0;Y<t.outHeight;++Y){const a=Y*l-Z;let h=a;for(;h<0;)h+=d;const W=Math.min(t.inHeight,r+a);for(let l=0;l<t.outWidth;++l){const r=l*p-N;let Z=r;for(;Z<0;)Z+=o;const u=Math.min(t.inWidth,s+r);let V=Number.NEGATIVE_INFINITY,c=-1;for(let Y=h;Y<W;Y+=d){const n=Y-a;for(let a=Z;a<u;a+=o){const l=a-r,p=j.get(e,Y,a,A);p>V&&(V=p,c=i?m?((e*t.inHeight+Y)*t.inWidth+a)*t.inChannels+A:(Y*t.inWidth+a)*t.inChannels+A:n*s+l)}}n.set(c,e,Y,l,A)}}return n}function QA(e,A,Y,t,i,m){const n=i.strideDepth,l=i.strideHeight,p=i.strideWidth,d=i.dilationDepth,o=i.dilationHeight,r=i.dilationWidth,s=i.effectiveFilterDepth,Z=i.effectiveFilterHeight,N=i.effectiveFilterWidth,j=i.padInfo.front,h=i.padInfo.top,W=i.padInfo.left,u="max"===m?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,V=(0,a.buffer)(i.outShape,Y),c=V.values,G=i.outShape[1]*i.outShape[2]*i.outShape[3]*i.outShape[4],F=i.outShape[2]*i.outShape[3]*i.outShape[4],X=i.outShape[3]*i.outShape[4],J=i.outShape[4];for(let A=0;A<i.batchSize;++A){const Y=A*G,a=A*t[0];for(let A=0;A<i.inChannels;++A)for(let V=0;V<i.outDepth;++V){const G=V*n-j;let g=G;for(;g<0;)g+=d;const k=Math.min(i.inDepth,s+G),f=Y+V*F;for(let Y=0;Y<i.outHeight;++Y){const n=Y*l-h;let s=n;for(;s<0;)s+=o;const j=Math.min(i.inHeight,Z+n),V=f+Y*X;for(let Y=0;Y<i.outWidth;++Y){const n=Y*p-W;let l=n;for(;l<0;)l+=r;const Z=Math.min(i.inWidth,N+n),h=V+Y*J;let G=u,F=0,X=0;for(let Y=g;Y<k;Y+=d){const i=a+Y*t[1];for(let Y=s;Y<j;Y+=o){const a=i+Y*t[2];for(let Y=l;Y<Z;Y+=r){const i=e[a+Y*t[3]+A];if("max"===m&&i>G?G=i:"avg"===m&&(F+=i,X++),isNaN(G))break}if(isNaN(G))break}if(isNaN(G))break}c[h+A]="avg"===m?F/X:G}}}}return V}const $A={kernelName:a.AvgPool,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m}=A;i(m,"avgPool");const{filterSize:n,strides:l,pad:p,dimRoundingMode:d}=t;a.util.assert(a.backend_util.eitherStridesOrDilationsAreOne(l,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${l} and dilations '1'`));const o=a.backend_util.computePool2DInfo(m.shape,n,l,1,p,d);let r;if(1===o.filterWidth&&1===o.filterHeight&&a.util.arraysEqual(o.inShape,o.outShape))r=Z({inputs:{x:m},backend:Y});else{const e=Y.data.get(m.dataId).values,A=a.util.computeStrides(m.shape),t=LA(e,m.shape,m.dtype,A,o,"avg");r=Y.makeTensorInfo(o.outShape,m.dtype,t.values)}return r}};const eY={kernelName:a.AvgPool3D,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m}=A,{filterSize:n,strides:l,pad:p,dimRoundingMode:d,dataFormat:o}=t;i(m,"avgPool3d");const r=a.backend_util.computePool3DInfo(m.shape,n,l,1,p,d,o),s=QA(Y.data.get(m.dataId).values,m.shape,m.dtype,a.util.computeStrides(m.shape),r,"avg");return Y.makeTensorInfo(s.shape,"float32",s.values)}};const AY={kernelName:a.AvgPool3DGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{dy:m,input:n}=A,{filterSize:l,strides:p,pad:d,dimRoundingMode:o}=t;i([m,n],"avgPool3DGrad");const r=a.backend_util.computePool3DInfo(n.shape,l,p,1,d,o),s=r.strideDepth,Z=r.strideHeight,N=r.strideWidth,j=r.filterDepth,h=r.filterHeight,W=r.filterWidth,u=r.dilationDepth,V=r.dilationHeight,c=r.dilationWidth,G=r.effectiveFilterDepth,F=r.effectiveFilterHeight,X=r.effectiveFilterWidth,J=G-1-r.padInfo.front,g=X-1-r.padInfo.left,k=F-1-r.padInfo.top,f=(0,a.buffer)(n.shape,"float32"),R=1/(j*h*W),b=Y.bufferSync(m);for(let e=0;e<r.batchSize;++e)for(let A=0;A<r.inChannels;++A)for(let Y=0;Y<r.inDepth;++Y)for(let t=0;t<r.inHeight;++t)for(let a=0;a<r.inWidth;++a){const i=Y-J,m=t-k,n=a-g;let l=0;for(let Y=0;Y<G;Y+=u){const t=(i+Y)/s;if(!(t<0||t>=r.outDepth||Math.floor(t)!==t))for(let Y=0;Y<F;Y+=V){const a=(m+Y)/Z;if(!(a<0||a>=r.outHeight||Math.floor(a)!==a))for(let Y=0;Y<X;Y+=c){const i=(n+Y)/N;if(i<0||i>=r.outWidth||Math.floor(i)!==i)continue;l+=b.get(e,t,a,i,A)}}}f.set(l*R,e,Y,t,a,A)}return Y.makeTensorInfo(f.shape,f.dtype,f.values)}};const YY={kernelName:a.AvgPoolGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{dy:m,input:n}=A,l=n;i([m,n],"avgPoolGrad");const{filterSize:p,strides:d,pad:o}=t,r=a.backend_util.computePool2DInfo(l.shape,p,d,1,o),s=r.strideHeight,Z=r.strideWidth,N=r.filterHeight,j=r.filterWidth,h=r.dilationHeight,W=r.dilationWidth,u=r.effectiveFilterHeight,V=r.effectiveFilterWidth,c=V-1-r.padInfo.left,G=u-1-r.padInfo.top,F=(0,a.buffer)(l.shape,"float32"),X=1/(N*j),J=Y.data.get(m.dataId).values,g=(0,a.buffer)(m.shape,"float32",J);for(let e=0;e<r.batchSize;++e)for(let A=0;A<r.inChannels;++A)for(let Y=0;Y<r.inHeight;++Y)for(let t=0;t<r.inWidth;++t){const a=Y-G,i=t-c;let m=0;for(let Y=0;Y<u;Y+=h){const t=(a+Y)/s;if(!(t<0||t>=r.outHeight||Math.floor(t)!==t))for(let Y=0;Y<V;Y+=W){const a=(i+Y)/Z;if(a<0||a>=r.outWidth||Math.floor(a)!==a)continue;m+=g.get(e,t,a,A)}}F.set(m*X,e,Y,t,A)}return Y.makeTensorInfo(F.shape,F.dtype,F.values)}};const tY={kernelName:a.FusedBatchNorm,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m,scale:n,offset:l,mean:p,variance:d}=A;a.util.assert(p.shape.length===d.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),a.util.assert(null==l||p.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),a.util.assert(null==n||p.shape.length===n.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),i([m,p,d,n,l],"batchNorm");let{varianceEpsilon:o}=t;null==o&&(o=.001);const r=Y.data.get(m.dataId).values,s=Y.data.get(p.dataId).values,Z=Y.data.get(d.dataId).values,N=n?Y.data.get(n.dataId).values:new Float32Array([1]),j=l?Y.data.get(l.dataId).values:new Float32Array([0]),h=new Float32Array(r.length),W=j.length,u=N.length,V=Z.length,c=s.length;let G=0,F=0,X=0,J=0;for(let e=0;e<r.length;++e)h[e]=j[G++]+(r[e]-s[F++])*N[X++]/Math.sqrt(Z[J++]+o),G>=W&&(G=0),F>=c&&(F=0),X>=u&&(X=0),J>=V&&(J=0);return Y.makeTensorInfo(m.shape,m.dtype,h)}};const aY={kernelName:a.BatchToSpaceND,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m}=A,{blockShape:n,crops:l}=t;i([m],"batchToSpaceND");const p=n.reduce(((e,A)=>e*A)),d=a.backend_util.getReshaped(m.shape,n,p),o=a.backend_util.getPermuted(d.length,n.length),r=a.backend_util.getReshapedPermuted(m.shape,n,p),s=a.backend_util.getSliceBeginCoords(l,n.length),Z=a.backend_util.getSliceSize(r,l,n.length),N=JA({inputs:{x:m},backend:Y,attrs:{shape:d}}),j=fe({inputs:{x:N},backend:Y,attrs:{perm:o}}),h=JA({inputs:{x:j},backend:Y,attrs:{shape:r}}),W=Ue({inputs:{x:h},backend:Y,attrs:{begin:s,size:Z}});return Y.disposeIntermediateTensorInfo(N),Y.disposeIntermediateTensorInfo(j),Y.disposeIntermediateTensorInfo(h),W}};const iY={kernelName:a.Bincount,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:a,weights:i}=A,{size:m}=t,n=g(Y.data.get(a.dataId).values,Y.data.get(i.dataId).values,i.dtype,i.shape,m);return Y.makeTensorInfo([m],i.dtype,n)}};const mY={kernelName:a.BroadcastArgs,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y}=e,{s0:t,s1:i}=A,m=Y.data.get(t.dataId).values,n=Y.data.get(i.dataId).values,l=a.backend_util.assertAndGetBroadcastShape(Array.from(m),Array.from(n));return Y.makeTensorInfo([l.length],"int32",Int32Array.from(l))}},nY=R(a.ClipByValue,((e,A)=>{const Y=A;return e>Y.clipValueMax?Y.clipValueMax:e<Y.clipValueMin?Y.clipValueMin:e})),lY={kernelName:a.ClipByValue,backendName:"cpu",kernelFunc:nY},pY={kernelName:a.ComplexAbs,backendName:"cpu",kernelFunc:e=>{const{x:A}=e.inputs,Y=e.backend,t=new Float32Array(a.util.sizeFromShape(A.shape)),i=Y.data.get(A.dataId),m=i.complexTensorInfos.real,n=i.complexTensorInfos.imag,l=Y.data.get(m.dataId).values,p=Y.data.get(n.dataId).values;for(let e=0;e<l.length;e++){const A=l[e],Y=p[e];t[e]=Math.hypot(A,Y)}return Y.makeOutput(t,A.shape,"float32")}};function dY(e){const{inputs:A,backend:Y}=e,{input:t}=A,a=Y.data.get(t.dataId).complexTensorInfos.imag,i=Y.data.get(a.dataId).values;return Y.makeTensorInfo(a.shape,a.dtype,i)}const oY={kernelName:a.Imag,backendName:"cpu",kernelFunc:dY};function rY(e){const{inputs:A,backend:Y,attrs:t}=e,{axis:i}=t,m=a.util.parseAxisParam(i,A[0].shape)[0];let n=a.backend_util.computeOutShape(A.map((e=>e.shape)),m);if(0===a.util.sizeFromShape(n))return Y.makeTensorInfo(n,A[0].dtype,[]);const l=A.filter((e=>a.util.sizeFromShape(e.shape)>0));if(1===l.length)return Z({inputs:{x:l[0]},backend:Y});const p=l.map((e=>e.shape));if(a.backend_util.assertParamsConsistent(p,m),"complex64"===l[0].dtype){const e=l.map((e=>j({inputs:{input:e},backend:Y}))),A=l.map((e=>dY({inputs:{input:e},backend:Y}))),t=rY({inputs:e,backend:Y,attrs:{axis:m}}),a=rY({inputs:A,backend:Y,attrs:{axis:m}}),i=o({inputs:{real:t,imag:a},backend:Y});return e.forEach((e=>Y.disposeIntermediateTensorInfo(e))),A.forEach((e=>Y.disposeIntermediateTensorInfo(e))),Y.disposeIntermediateTensorInfo(t),Y.disposeIntermediateTensorInfo(a),i}const d=l.map((e=>{const A=a.util.sizeFromShape(e.shape.slice(m));return JA({inputs:{x:e},backend:Y,attrs:{shape:[-1,A]}})})),r=d.map((e=>({vals:Y.data.get(e.dataId).values,shape:e.shape})));n=a.backend_util.computeOutShape(d.map((e=>e.shape)),1);const s=1===d[0].shape[0],N=x(r,n,A[0].dtype,s),h=a.backend_util.computeOutShape(l.map((e=>e.shape)),m),W=Y.makeTensorInfo(h,A[0].dtype,N);return d.forEach((e=>Y.disposeIntermediateTensorInfo(e))),W}const sY={kernelName:a.Concat,backendName:"cpu",kernelFunc:rY};function ZY(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m,filter:n}=A,{strides:l,pad:p,dataFormat:d,dilations:o,dimRoundingMode:r}=t;i([m,n],"conv2d");const s=a.backend_util.convertConv2DDataFormat(d),Z=a.backend_util.computeConv2DInfo(m.shape,n.shape,l,o,p,r,!1,s),N=Z.filterHeight,j=Z.filterWidth,h=Z.dilationHeight,W=Z.dilationWidth,u=Z.padInfo.left,V=Z.padInfo.top,c="channelsLast"===Z.dataFormat,G=new a.TensorBuffer(Z.outShape,m.dtype),F=a.util.computeStrides(m.shape),X=a.util.computeStrides(n.shape),J=F[0],g=c?F[1]:F[2],k=c?F[2]:1,f=c?1:F[1],R=G.strides[0],b=c?G.strides[1]:G.strides[2],y=c?G.strides[2]:1,B=c?1:G.strides[1],S=Y.data.get(m.dataId).values,x=Y.data.get(n.dataId).values,T=G.values;for(let e=0;e<Z.batchSize;++e){const A=e*J,Y=e*R;for(let e=0;e<Z.outHeight;++e){const t=Y+e*b,a=e*Z.strideHeight-V;for(let e=0;e<N;++e){const Y=a+e*h;if(Y<0||Y>=Z.inHeight)continue;const i=e*X[0],m=A+Y*g;for(let e=0;e<Z.outWidth;++e){const A=t+e*y,Y=e*Z.strideWidth-u;for(let e=0;e<j;++e){const t=Y+e*W;if(t<0||t>=Z.inWidth)continue;const a=m+t*k;let n=i+e*X[1];for(let e=0;e<Z.inChannels;++e){const Y=S[a+e*f];for(let e=0;e<Z.outChannels;++e)T[A+e*B]+=Y*x[n+e];n+=Z.outChannels}}}}}}return Y.makeTensorInfo(G.shape,G.dtype,T)}const NY={kernelName:a.Conv2D,backendName:"cpu",kernelFunc:ZY};const jY={kernelName:a.Conv2DBackpropFilter,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m,dy:n}=A,{strides:l,pad:p,dataFormat:d,dimRoundingMode:o,filterShape:r}=t;i([m,n],"conv2dBackpropFilter");const s=a.backend_util.convertConv2DDataFormat(d),Z=a.backend_util.computeConv2DInfo(m.shape,r,l,1,p,o,!1,s),{strideHeight:N,strideWidth:j,filterHeight:h,filterWidth:W}=Z,u="channelsLast"===Z.dataFormat,V=new a.TensorBuffer(Z.filterShape,"float32"),c=Z.padInfo.left,G=Z.padInfo.top,F=Y.data.get(m.dataId).values,X=Y.data.get(n.dataId).values,J=new a.TensorBuffer(m.shape,m.dtype,F),g=new a.TensorBuffer(n.shape,n.dtype,X);for(let e=0;e<h;++e){const A=Math.max(0,Math.ceil((G-e)/N)),Y=Math.min(Z.outHeight,(Z.inHeight+G-e)/N);for(let t=0;t<W;++t){const a=Math.max(0,Math.ceil((c-t)/j)),i=Math.min(Z.outWidth,(Z.inWidth+c-t)/j);for(let m=0;m<Z.inChannels;++m)for(let n=0;n<Z.outChannels;++n){let l=0;for(let p=0;p<Z.batchSize;++p)for(let d=A;d<Y;++d){const A=e+d*N-G;for(let e=a;e<i;++e){const Y=t+e*j-c;l+=u?J.get(p,A,Y,m)*g.get(p,d,e,n):J.get(p,m,A,Y)*g.get(p,n,d,e)}}V.set(l,e,t,m,n)}}}return Y.makeTensorInfo(V.shape,V.dtype,V.values)}};const hY={kernelName:a.Conv2DBackpropInput,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{dy:m,filter:n}=A,{inputShape:l,strides:p,pad:d,dataFormat:o,dimRoundingMode:r}=t;i([m,n],"conv2dBackpropInput");const s=a.util.computeStrides(n.shape),Z=a.util.computeStrides(m.shape);let N=a.backend_util.convertConv2DDataFormat(o);const j=a.backend_util.computeConv2DInfo(l,n.shape,p,1,d,r,!1,N),h=new a.TensorBuffer(j.inShape,"float32"),W=h.values,u=Y.data.get(m.dataId).values,V=Y.data.get(n.dataId).values,[c,G,F]=s,{batchSize:X,filterHeight:J,filterWidth:g,inChannels:k,inHeight:f,inWidth:R,outChannels:b,outHeight:y,outWidth:B,strideHeight:S,strideWidth:x}=j;N=j.dataFormat;const T=J-1-j.padInfo.top,q=g-1-j.padInfo.left,I="channelsLast"===N,v=h.strides[0],w=I?h.strides[1]:h.strides[2],U=I?h.strides[2]:1,K=I?1:h.strides[1],O=Z[0],D=I?Z[1]:Z[2],C=I?Z[2]:1,z=I?1:Z[1];for(let e=0;e<X;++e)for(let A=0;A<k;++A)for(let Y=0;Y<f;++Y){const t=Y-T,a=Math.max(0,Math.ceil(t/S)),i=Math.min(y,(J+t)/S);for(let m=0;m<R;++m){const n=m-q,l=Math.max(0,Math.ceil(n/x)),p=Math.min(B,(g+n)/x);let d=0;for(let Y=a;Y<i;++Y){const a=Y*S-t;for(let t=l;t<p;++t){const i=O*e+D*Y+C*t,m=c*(J-1-a)+G*(g-1-(t*x-n))+F*A;for(let e=0;e<b;++e){d+=u[i+z*e]*V[m+e]}}}W[v*e+w*Y+U*m+K*A]=d}}return Y.makeTensorInfo(h.shape,h.dtype,h.values)}};const WY={kernelName:a.Conv3D,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m,filter:n}=A,{strides:l,pad:p,dilations:d}=t;i([m,n],"conv3d");const o=a.backend_util.computeConv3DInfo(m.shape,n.shape,l,d,p),{filterDepth:r,filterHeight:s,filterWidth:Z,dilationDepth:N,dilationHeight:j,dilationWidth:h,padInfo:W}=o,u=W.front,V=W.left,c=W.top,G=new a.TensorBuffer(o.outShape,m.dtype),F=Y.data.get(m.dataId).values,X=Y.data.get(n.dataId).values,J=G.values,g=a.util.computeStrides(m.shape),k=a.util.computeStrides(n.shape);for(let e=0;e<o.batchSize;++e){const A=e*g[0],Y=e*G.strides[0];for(let e=0;e<o.outDepth;++e){const t=Y+e*G.strides[1],a=e*o.strideDepth-u;for(let e=0;e<r;++e){const Y=a+e*N;if(Y<0||Y>=o.inDepth)continue;const i=e*k[0],m=A+Y*g[1];for(let e=0;e<o.outHeight;++e){const A=t+e*G.strides[2],Y=e*o.strideHeight-c;for(let e=0;e<s;++e){const t=Y+e*j;if(t<0||t>=o.inHeight)continue;const a=i+e*k[1],n=m+t*g[2];for(let e=0;e<o.outWidth;++e){const Y=A+e*o.outChannels,t=e*o.strideWidth-V;for(let e=0;e<Z;++e){const A=t+e*h;if(A<0||A>=o.inWidth)continue;const i=a+e*k[2],m=n+A*o.inChannels;let l=i;for(let e=0;e<o.inChannels;++e){const A=F[m+e];for(let e=0;e<o.outChannels;++e)J[Y+e]+=A*X[l+e];l+=o.outChannels}}}}}}}}return Y.makeTensorInfo(G.shape,G.dtype,G.values)}};const uY={kernelName:a.Conv3DBackpropFilterV2,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m,dy:n}=A,{strides:l,pad:p,filterShape:d}=t;i([m,n],"conv3dBackpropFilterV2");const o=a.util.computeStrides(m.shape),r=a.util.computeStrides(n.shape),s=a.backend_util.computeConv3DInfo(m.shape,d,l,1,p),Z=s.strideDepth,N=s.strideHeight,j=s.strideWidth,h=s.filterDepth,W=s.filterHeight,u=s.filterWidth,V=new a.TensorBuffer(s.filterShape,"float32"),c=V.values,[G,F,X,J]=V.strides,g=Y.data.get(n.dataId).values,[k,f,R,b]=r,y=Y.data.get(m.dataId).values,[B,S,x,T]=o,q=s.padInfo.front,I=s.padInfo.left,v=s.padInfo.top;for(let e=0;e<h;++e){const A=Math.max(0,Math.ceil((q-e)/Z)),Y=Math.min(s.outDepth,(s.inDepth+q-e)/Z),t=e*G;for(let a=0;a<W;++a){const i=Math.max(0,Math.ceil((v-a)/N)),m=Math.min(s.outHeight,(s.inHeight+v-a)/N),n=a*F+t;for(let t=0;t<u;++t){const l=Math.max(0,Math.ceil((I-t)/j)),p=Math.min(s.outWidth,(s.inWidth+I-t)/j),d=t*X+n;for(let n=0;n<s.inChannels;++n){const o=n*J+d;for(let d=0;d<s.outChannels;++d){let r=0;for(let o=0;o<s.batchSize;++o){const s=o*B,h=o*k;for(let o=A;o<Y;++o){const A=(e+o*Z-q)*S+s,Y=o*f+h;for(let e=i;e<m;++e){const i=(a+e*N-v)*x+A,m=e*R+Y;for(let e=l;e<p;++e){const A=e*b+m;r+=y[(t+e*j-I)*T+i+n]*g[A+d]}}}}c[o+d]=r}}}}}return Y.makeTensorInfo(V.shape,V.dtype,V.values)}};const VY={kernelName:a.Conv3DBackpropInputV2,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{dy:m,filter:n}=A,{pad:l,strides:p,inputShape:d}=t;i([m],"conv3dBackpropInputV2");const o=a.util.computeStrides(m.shape),r=a.util.computeStrides(n.shape),s=a.backend_util.computeConv3DInfo(d,n.shape,p,1,l),Z=new a.TensorBuffer(s.inShape,"float32"),N=Z.values,[j,h,W,u]=Z.strides,V=Y.data.get(m.dataId).values,[c,G,F,X]=o,J=Y.data.get(n.dataId).values,[g,k,f,R]=r,{batchSize:b,filterDepth:y,filterHeight:B,filterWidth:S,inChannels:x,inDepth:T,inHeight:q,inWidth:I,outChannels:v,outDepth:w,outHeight:U,outWidth:K,strideDepth:O,strideHeight:D,strideWidth:C}=s,z=y-1-s.padInfo.front,H=B-1-s.padInfo.top,E=S-1-s.padInfo.left;for(let e=0;e<b;++e)for(let A=0;A<x;++A)for(let Y=0;Y<T;++Y){const t=Y-z,a=Math.max(0,Math.ceil(t/O)),i=Math.min(w,(y+t)/O);for(let m=0;m<q;++m){const n=m-H,l=Math.max(0,Math.ceil(n/D)),p=Math.min(U,(B+n)/D);for(let d=0;d<I;++d){const o=d-E,r=Math.max(0,Math.ceil(o/C)),s=Math.min(K,(S+o)/C);let Z=0;for(let Y=a;Y<i;++Y){const a=Y*O-t;for(let t=l;t<p;++t){const i=t*D-n;for(let m=r;m<s;++m){const n=c*e+G*Y+F*t+X*m,l=g*(y-1-a)+k*(B-1-i)+f*(S-1-(m*C-o))+R*A;for(let e=0;e<v;++e){Z+=V[n+e]*J[l+e]}}}}N[j*e+h*Y+W*m+u*d+A]=Z}}}return Y.makeTensorInfo(Z.shape,Z.dtype,Z.values)}},cY=R(a.Cos,(e=>Math.cos(e))),GY={kernelName:a.Cos,backendName:"cpu",kernelFunc:cY},FY=R(a.Cosh,(e=>Math.cosh(e))),XY={kernelName:a.Cosh,backendName:"cpu",kernelFunc:FY};const JY={kernelName:a.CropAndResize,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{image:i,boxes:m,boxInd:n}=A,{cropSize:l,method:p,extrapolationValue:d}=t,[o,r,s,Z]=i.shape,N=m.shape[0],[j,h]=l,W=(0,a.buffer)([N,j,h,Z],"float32"),u=Y.data.get(m.dataId).values,V=Y.data.get(n.dataId).values,c=Y.data.get(i.dataId).values,G=a.util.computeStrides(i.shape),F=a.util.computeStrides(W.shape);for(let e=0;e<N;e++){const A=4*e,Y=u[A],t=u[A+1],a=u[A+2],i=u[A+3],m=V[e];if(m>=o)continue;const n=j>1?(a-Y)*(r-1)/(j-1):0,l=h>1?(i-t)*(s-1)/(h-1):0;for(let A=0;A<j;A++){const o=j>1?Y*(r-1)+A*n:.5*(Y+a)*(r-1);if(o<0||o>r-1)for(let Y=0;Y<h;Y++)for(let t=0;t<Z;t++){const a=t+Y*F[2]+A*F[1]+e*F[0];W.values[a]=d}else if("bilinear"===p){const Y=Math.floor(o),a=Math.ceil(o),n=o-Y;for(let p=0;p<h;p++){const o=h>1?t*(s-1)+p*l:.5*(t+i)*(s-1);if(o<0||o>s-1){for(let Y=0;Y<Z;Y++){const t=Y+p*F[2]+A*F[1]+e*F[0];W.values[t]=d}continue}const r=Math.floor(o),N=Math.ceil(o),j=o-r;for(let t=0;t<Z;t++){let i=t+r*G[2]+Y*G[1]+m*G[0];const l=c[i];i=t+N*G[2]+Y*G[1]+m*G[0];const d=c[i];i=t+r*G[2]+a*G[1]+m*G[0];const o=c[i];i=t+N*G[2]+a*G[1]+m*G[0];const s=l+(d-l)*j,Z=o+(c[i]-o)*j;i=t+p*F[2]+A*F[1]+e*F[0],W.values[i]=s+(Z-s)*n}}}else for(let Y=0;Y<h;++Y){const a=h>1?t*(s-1)+Y*l:.5*(t+i)*(s-1);if(a<0||a>s-1){for(let t=0;t<Z;t++){const a=t+Y*F[2]+A*F[1]+e*F[0];W.values[a]=d}continue}const n=Math.round(a),p=Math.round(o);for(let t=0;t<Z;t++){const a=t+n*G[2]+p*G[1]+m*G[0],i=t+Y*F[2]+A*F[1]+e*F[0];W.values[i]=c[a]}}}}return Y.makeTensorInfo(W.shape,W.dtype,W.values)}};const gY={kernelName:a.Cumsum,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m}=A,{axis:n,exclusive:l,reverse:p}=t;i(m,"cumsum");const d=a.backend_util.getAxesPermutation([n],m.shape.length);let o=m;null!=d&&(o=fe({inputs:{x:m},backend:Y,attrs:{perm:d}}));const r=a.backend_util.getInnerMostAxes(1,m.shape.length)[0];if(r!==o.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${o.shape.length-1} but got axis=${r}`);const s=(0,a.upcastType)(o.dtype,"int32"),Z=a.util.makeZerosTypedArray(a.util.sizeFromShape(o.shape),s),N=Y.data.get(o.dataId).values,j=o.shape[o.shape.length-1],h=p?(e,A)=>e+j-A-1:(e,A)=>e+A;for(let e=0;e<N.length;e+=j)for(let A=0;A<j;A++){const Y=h(e,A);if(0===A)Z[Y]=l?0:N[Y];else{const t=h(e,A-1);Z[Y]=l?N[t]+Z[t]:N[Y]+Z[t]}}const W=Y.makeTensorInfo(o.shape,s,Z);if(null!=d){const e=fe({inputs:{x:W},backend:Y,attrs:{perm:a.backend_util.getUndoAxesPermutation(d)}});return Y.disposeIntermediateTensorInfo(W),Y.disposeIntermediateTensorInfo(o),e}return W}};const kY={kernelName:a.DenseBincount,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:a,weights:i}=A,{size:m,binaryOutput:n}=t;if(1===a.shape.length){const e=g(Y.data.get(a.dataId).values,Y.data.get(i.dataId).values,i.dtype,i.shape,m);return Y.makeTensorInfo([m],i.dtype,e)}if(2===a.shape.length){const e=k(Y.bufferSync(a),Y.bufferSync(i),m,n);return Y.makeTensorInfo(e.shape,i.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}};const fY={kernelName:a.DepthToSpace,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:i}=A,{blockSize:m,dataFormat:n}=t;a.util.assert("NHWC"===n,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${n}`)),a.util.assert(m>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${m}`));const l=i.shape[0],p=i.shape[1],d=i.shape[2],o=i.shape[3],r=p*m,s=d*m,Z=o/(m*m),N=Y.data.get(i.dataId).values,j=new Float32Array(l*r*s*Z);let h=0;for(let e=0;e<l;++e)for(let A=0;A<r;++A){const Y=Math.floor(A/m),t=A%m;for(let A=0;A<s;++A){const a=Math.floor(A/m),i=(t*m+A%m)*Z;for(let A=0;A<Z;++A){const t=A+i+o*(a+d*(Y+p*e));j[h++]=N[t]}}}return Y.makeTensorInfo([l,r,s,Z],i.dtype,j)}};function RY(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m,filter:n}=A,{strides:l,pad:p,dilations:d,dimRoundingMode:o}=t;i([m,n],"depthwiseConv2DNative");const r=a.util.computeStrides(m.shape),s=a.util.computeStrides(n.shape);let Z=d;null==Z&&(Z=[1,1]),a.util.assert(a.backend_util.eitherStridesOrDilationsAreOne(l,Z),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${Z}'`));const N=a.backend_util.computeConv2DInfo(m.shape,n.shape,l,Z,p,o,!0),{filterHeight:j,filterWidth:h,dilationHeight:W,dilationWidth:u,padInfo:V}=N,c=V.left,G=V.top,F=N.outChannels/N.inChannels,X=new a.TensorBuffer(N.outShape,m.dtype),J=Y.data.get(m.dataId).values,g=Y.data.get(n.dataId).values,k=X.values;for(let e=0;e<N.batchSize;++e){const A=e*r[0],Y=e*X.strides[0];for(let e=0;e<N.outHeight;++e){const t=Y+e*X.strides[1],a=e*N.strideHeight-G;for(let e=0;e<j;++e){const Y=a+e*W;if(Y<0||Y>=N.inHeight)continue;const i=e*s[0],m=A+Y*r[1];for(let e=0;e<N.outWidth;++e){const A=t+e*X.strides[2],Y=e*N.strideWidth-c;for(let e=0;e<h;++e){const t=Y+e*u;if(t<0||t>=N.inWidth)continue;const a=i+e*s[1],n=m+t*N.inChannels;let l=A,p=a;for(let e=0;e<N.inChannels;++e){const A=J[n+e];for(let e=0;e<F;++e)k[l+e]+=A*g[p+e];l+=F,p+=F}}}}}}return Y.makeTensorInfo(X.shape,X.dtype,X.values)}const bY={kernelName:a.DepthwiseConv2dNative,backendName:"cpu",kernelFunc:RY};const yY={kernelName:a.DepthwiseConv2dNativeBackpropFilter,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m,dy:n}=A,{strides:l,dilations:p,pad:d,dimRoundingMode:o,filterShape:r}=t;i([m,n],"depthwiseConv2dNativeBackpropFilter");const s=a.backend_util.computeConv2DInfo(m.shape,r,l,p,d,o,!0),{strideHeight:Z,strideWidth:N,filterHeight:j,filterWidth:h}=s,W=new a.TensorBuffer(s.filterShape,"float32"),u=s.padInfo.left,V=s.padInfo.top,c=s.outChannels/s.inChannels,G=Y.data.get(m.dataId).values,F=new a.TensorBuffer(m.shape,m.dtype,G),X=Y.data.get(n.dataId).values,J=new a.TensorBuffer(n.shape,n.dtype,X);for(let e=0;e<j;++e){const A=Math.max(0,Math.ceil((V-e)/Z)),Y=Math.min(s.outHeight,(s.inHeight+V-e)/Z);for(let t=0;t<h;++t){const a=Math.max(0,Math.ceil((u-t)/N)),i=Math.min(s.outWidth,(s.inWidth+u-t)/N);for(let m=0;m<s.outChannels;++m){const n=Math.trunc(m/c),l=m%c;let p=0;for(let l=0;l<s.batchSize;++l)for(let d=A;d<Y;++d){const A=e+d*Z-V;for(let e=a;e<i;++e){const Y=t+e*N-u;p+=F.get(l,A,Y,n)*J.get(l,d,e,m)}}W.set(p,e,t,n,l)}}}return Y.makeTensorInfo(W.shape,W.dtype,W.values)}};const BY={kernelName:a.DepthwiseConv2dNativeBackpropInput,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{dy:m,filter:n}=A,{strides:l,dilations:p,pad:d,dimRoundingMode:o,inputShape:r}=t;i([m,n],"depthwiseConv2DNativeBackpropInput");const s=a.util.computeStrides(m.shape),Z=a.util.computeStrides(n.shape),N=a.backend_util.computeConv2DInfo(r,n.shape,l,p,d,o,!0),j=new a.TensorBuffer(N.inShape,"float32"),h=j.values,[W,u,V]=j.strides,c=Y.data.get(m.dataId).values,[G,F,X]=s,J=Y.data.get(n.dataId).values,[g,k,f]=Z,{batchSize:R,filterHeight:b,filterWidth:y,inChannels:B,inHeight:S,inWidth:x,outChannels:T,outHeight:q,outWidth:I,strideHeight:v,strideWidth:w}=N,U=b-1-N.padInfo.top,K=y-1-N.padInfo.left,O=T/B;for(let e=0;e<R;++e)for(let A=0;A<B;++A)for(let Y=0;Y<S;++Y){const t=Y-U,a=Math.max(0,Math.ceil(t/v)),i=Math.min(q,(b+t)/v);for(let m=0;m<x;++m){const n=m-K,l=Math.max(0,Math.ceil(n/w)),p=Math.min(I,(y+n)/w);let d=0;for(let Y=a;Y<i;++Y){const a=Y*v-t;for(let t=l;t<p;++t){const i=G*e+F*Y+X*t,m=g*(b-1-a)+k*(y-1-(t*w-n))+f*A;for(let e=0;e<O;++e){d+=c[i+(A*O+e)]*J[m+e]}}}h[W*e+u*Y+V*m+A]=d}}return Y.makeTensorInfo(j.shape,j.dtype,j.values)}};const SY={kernelName:a.Diag,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y}=e,{x:t}=A,i=a.util.sizeFromShape(t.shape),m=Y.data.get(t.dataId).values,n=(0,a.buffer)([i,i],t.dtype),l=n.values;for(let e=0;e<m.length;e++)l[e*i+e]=m[e];const p=[...t.shape,...t.shape];return Y.makeTensorInfo(p,n.dtype,n.values)}},xY={kernelName:a.Dilation2D,backendName:"cpu",kernelFunc:({inputs:e,backend:A,attrs:Y})=>{const{x:t,filter:i}=e,{strides:m,pad:n,dilations:l}=Y,p=A,d=p.data.get(t.dataId).values,o=t.shape.length,r=p.data.get(i.dataId).values,s=i.shape.length,{batchSize:Z,inHeight:N,inWidth:j,inChannels:h,outHeight:W,outWidth:u,padInfo:V,strideHeight:c,strideWidth:G,filterHeight:F,filterWidth:X,dilationHeight:J,dilationWidth:g,outShape:k}=a.backend_util.computeDilation2DInfo(t.shape,i.shape,m,n,"NHWC",l),f=a.util.sizeFromShape(k),R=k.length,b=a.util.getArrayFromDType(t.dtype,f);for(let e=0;e<Z;++e)for(let A=0;A<W;++A){const Y=A*c-V.top;for(let m=0;m<u;++m){const n=m*G-V.left;for(let l=0;l<h;++l){let p=Number.MIN_SAFE_INTEGER;for(let A=0;A<F;++A){const m=Y+A*J;if(m>=0&&m<N)for(let Y=0;Y<X;++Y){const Z=n+Y*g;if(Z>=0&&Z<j){const n=a.util.locToIndex([e,m,Z,l],o,a.util.computeStrides(t.shape)),N=a.util.locToIndex([A,Y,l],s,a.util.computeStrides(i.shape)),j=d[n]+r[N];j>p&&(p=j)}}}b[a.util.locToIndex([e,A,m,l],R,a.util.computeStrides(k))]=p}}}return{dataId:p.write(a.util.toTypedArray(b,t.dtype),k,t.dtype),shape:k,dtype:t.dtype}}},TY={kernelName:a.Dilation2DBackpropFilter,backendName:"cpu",kernelFunc:({inputs:e,backend:A,attrs:Y})=>{const{x:t,filter:i,dy:m}=e,{strides:n,pad:l,dilations:p}=Y,d=A,o=a.util.toNestedArray(t.shape,d.data.get(t.dataId).values),r=a.util.toNestedArray(i.shape,d.data.get(i.dataId).values),{batchSize:s,inHeight:Z,inWidth:N,inChannels:j,outHeight:h,outWidth:W,padInfo:u,strideHeight:V,strideWidth:c,filterHeight:G,filterWidth:F,dilationHeight:X,dilationWidth:J,outShape:g}=a.backend_util.computeDilation2DInfo(t.shape,i.shape,n,l,"NHWC",p);a.util.assert(m.rank===g.length,(()=>`Error in ${a.Dilation2DBackpropFilter}, dy must have the same rank as output ${g.length}, but got ${m.rank}`));const k=a.util.toNestedArray(g,d.data.get(m.dataId).values),f=a.util.makeZerosNestedTypedArray(i.shape,i.dtype);for(let e=0;e<s;++e)for(let A=0;A<h;++A){const Y=A*V-u.top;for(let t=0;t<W;++t){const a=t*c-u.left;for(let i=0;i<j;++i){let m=Number.MIN_SAFE_INTEGER,n=0,l=0;for(let A=0;A<G;++A){const t=Y+A*X;if(t>=0&&t<Z)for(let Y=0;Y<F;++Y){const p=a+Y*J;if(p>=0&&p<N){const a=o[e][t][p][i]+r[A][Y][i];a>m&&(m=a,n=A,l=Y)}}}f[n][l][i]+=k[e][A][t][i]}}}return{dataId:d.write(a.util.toTypedArray(f,t.dtype),i.shape,i.dtype),shape:i.shape,dtype:i.dtype}}},qY={kernelName:a.Dilation2DBackpropInput,backendName:"cpu",kernelFunc:({inputs:e,backend:A,attrs:Y})=>{const{x:t,filter:i,dy:m}=e,{strides:n,pad:l,dilations:p}=Y,d=A,o=a.util.toNestedArray(t.shape,d.data.get(t.dataId).values),r=a.util.toNestedArray(i.shape,d.data.get(i.dataId).values),{batchSize:s,inHeight:Z,inWidth:N,inChannels:j,outHeight:h,outWidth:W,padInfo:u,strideHeight:V,strideWidth:c,filterHeight:G,filterWidth:F,dilationHeight:X,dilationWidth:J,outShape:g}=a.backend_util.computeDilation2DInfo(t.shape,i.shape,n,l,"NHWC",p);a.util.assert(m.rank===g.length,(()=>`Error in ${a.Dilation2DBackpropInput}, dy must have the same rank as output ${g.length}, but got ${m.rank}`));const k=a.util.toNestedArray(g,d.data.get(m.dataId).values),f=a.util.makeZerosNestedTypedArray(t.shape,t.dtype);for(let e=0;e<s;++e)for(let A=0;A<h;++A){const Y=A*V-u.top;for(let t=0;t<W;++t){const a=t*c-u.left;for(let i=0;i<j;++i){let m=Number.MIN_SAFE_INTEGER,n=Y<0?0:Y,l=a<0?0:a;for(let A=0;A<G;++A){const t=Y+A*X;if(t>=0&&t<Z)for(let Y=0;Y<F;++Y){const p=a+Y*J;if(p>=0&&p<N){const a=o[e][t][p][i]+r[A][Y][i];a>m&&(m=a,n=t,l=p)}}}f[e][n][l][i]+=k[e][A][t][i]}}}return{dataId:d.write(a.util.toTypedArray(f,t.dtype),t.shape,t.dtype),shape:t.shape,dtype:t.dtype}}};function IY(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m}=A,{axis:n,keepDims:l}=t;let p;i(m,"sum"),p="bool"===m.dtype?W({inputs:{x:m},backend:Y,attrs:{dtype:"int32"}}):Z({inputs:{x:m},backend:Y});const d=p.shape.length,o=a.util.parseAxisParam(n,p.shape),r=a.backend_util.getAxesPermutation(o,d);let N=o,j=p;null!=r&&(j=fe({inputs:{x:p},backend:Y,attrs:{perm:r}}),N=a.backend_util.getInnerMostAxes(N.length,d)),a.backend_util.assertAxesAreInnerMostDims("sum",N,j.shape.length);const[h,u]=a.backend_util.computeOutAndReduceShapes(j.shape,N);let V=s(Y,h,a.backend_util.upcastType(j.dtype,"int32"));const c=a.util.sizeFromShape(u),G=Y.data.get(V.dataId).values,F=Y.data.get(j.dataId).values;for(let e=0;e<G.length;++e){const A=e*c;let Y=0;for(let e=0;e<c;++e)Y+=F[A+e];G[e]=Y}if(l){const e=V;V=JA({inputs:{x:V},backend:Y,attrs:{shape:a.backend_util.expandShapeToKeepDim(V.shape,o)}}),Y.disposeIntermediateTensorInfo(e)}return Y.disposeIntermediateTensorInfo(p),null!=r&&Y.disposeIntermediateTensorInfo(j),V}const vY={kernelName:a.Sum,backendName:"cpu",kernelFunc:IY};const wY={kernelName:a.Einsum,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{equation:i}=t,m=A,{allDims:n,summedDims:l,idDims:p}=a.backend_util.decodeEinsumEquation(i,m.length);a.backend_util.checkEinsumDimSizes(n.length,p,m);const{path:d,steps:o}=a.backend_util.getEinsumComputePath(l,p),r=o.length;let s=null,Z=n.length;const N=[];for(let e=0;e<r;++e){for(const A of o[e]){const{permutationIndices:e,expandDims:t}=a.backend_util.getEinsumPermutation(Z,p[A]);let i;a.backend_util.isIdentityPermutation(e)?i=m[A]:(i=fe({inputs:{x:m[A]},backend:Y,attrs:{perm:e}}),N.push(i));const n=i.shape.slice();for(let e=0;e<t.length;++e)n.splice(t[e],0,1);a.util.arraysEqual(i.shape,n)||(i=JA({inputs:{x:i},backend:Y,attrs:{shape:n}}),N.push(i)),null===s?s=i:(s=Ve({inputs:{a:i,b:s},backend:Y}),N.push(s))}e<r-1&&(d[e]>=0&&(s=IY({inputs:{x:s},backend:Y,attrs:{axis:d[e]-(n.length-Z),keepDims:!1}}),N.push(s)),Z--)}for(const e of N)e!==s&&Y.disposeIntermediateTensorInfo(e);return s}};const UY={kernelName:a.EluGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y}=e,{dy:t,y:m}=A;i([t,m],"eluGrad");const n=new Float32Array(a.util.sizeFromShape(m.shape)),l=Y.data.get(m.dataId).values,p=Y.data.get(t.dataId).values;for(let e=0;e<l.length;++e){const A=l[e];n[e]=A>=1?p[e]:p[e]*(A+1)}return Y.makeTensorInfo(m.shape,"float32",n)}},KY=a.backend_util.ERF_P,OY=a.backend_util.ERF_A1,DY=a.backend_util.ERF_A2,CY=a.backend_util.ERF_A3,zY=a.backend_util.ERF_A4,HY=a.backend_util.ERF_A5,EY=R(a.Erf,(e=>{const A=Math.sign(e),Y=Math.abs(e),t=1/(1+KY*Y);return A*(1-((((HY*t+zY)*t+CY)*t+DY)*t+OY)*t*Math.exp(-Y*Y))})),_Y={kernelName:a.Erf,backendName:"cpu",kernelFunc:EY};function MY(e){const{inputs:A,backend:Y,attrs:t}=e,{input:i}=A,{dim:m}=t,n=i.shape.length,l=i.shape.slice();let p=m;return m<0&&(a.util.assert(-(n+1)<=m,(()=>`Axis must be in the interval [${-(n+1)}, ${n}]`)),p=n+m+1),l.splice(p,0,1),JA({inputs:{x:i},backend:Y,attrs:{shape:l}})}const LY={kernelName:a.ExpandDims,backendName:"cpu",kernelFunc:MY},PY=d(((e,A)=>e/A)),QY=V(a.RealDiv,PY),$Y={kernelName:a.RealDiv,backendName:"cpu",kernelFunc:QY};function et(e,A,Y){const t=e.shape,i=t[0],m=t[1],n=Y.data.get(e.dataId),l=n.complexTensorInfos.real,p=n.complexTensorInfos.imag,d=[i,m],r=a.util.sizeFromShape(d),s=a.util.getTypedArrayFromDType("float32",r),Z=a.util.getTypedArrayFromDType("float32",r);for(let e=0;e<i;e++){const t=Ue({inputs:{x:l},backend:Y,attrs:{begin:[e,0],size:[1,m]}}),i=Ue({inputs:{x:p},backend:Y,attrs:{begin:[e,0],size:[1,m]}}),n=o({inputs:{real:t,imag:i},backend:Y}),{real:d,imag:r}=At(n,A,Y),N=a.backend_util.mergeRealAndImagArrays(d,r);for(let A=0;A<m;A++){const Y=a.backend_util.getComplexWithIndex(N,A);s[e*m+A]=Y.real,Z[e*m+A]=Y.imag}Y.disposeIntermediateTensorInfo(t),Y.disposeIntermediateTensorInfo(i),Y.disposeIntermediateTensorInfo(n)}const N=Y.makeTensorInfo(d,"float32",s),j=Y.makeTensorInfo(d,"float32",Z),h=o({inputs:{real:N,imag:j},backend:Y});return Y.disposeIntermediateTensorInfo(N),Y.disposeIntermediateTensorInfo(j),h}function At(e,A,Y){const t=a.util.sizeFromShape(e.shape),i=Y.data.get(e.dataId),m=Y.data.get(i.complexTensorInfos.real.dataId).values,n=Y.data.get(i.complexTensorInfos.imag.dataId).values;if(0==((l=t)&l-1)){const i=Yt(m,n,t,A,Y),l=[e.shape[0],e.shape[1]];if(A){const e=Y.makeTensorInfo(l,"float32",i.real),A=Y.makeTensorInfo(l,"float32",i.imag),m=Y.makeTensorInfo([],"float32",a.util.createScalarValue(t,"float32")),n=Z({inputs:{x:m},backend:Y}),p=$Y.kernelFunc({inputs:{a:e,b:m},backend:Y}),d=$Y.kernelFunc({inputs:{a:A,b:n},backend:Y}),o=Y.data.get(p.dataId).values,r=Y.data.get(d.dataId).values;return Y.disposeIntermediateTensorInfo(e),Y.disposeIntermediateTensorInfo(A),Y.disposeIntermediateTensorInfo(m),Y.disposeIntermediateTensorInfo(n),Y.disposeIntermediateTensorInfo(p),Y.disposeIntermediateTensorInfo(d),{real:o,imag:r}}return i}{const e=function(e,A,Y){const t=new Float32Array(2*A);for(let i=0;i<A;i++){let m=0,n=0;for(let t=0;t<A;t++){const l=a.backend_util.exponent(i*t,A,Y),p=a.backend_util.getComplexWithIndex(e,t);m+=p.real*l.real-p.imag*l.imag,n+=p.real*l.imag+p.imag*l.real}Y&&(m/=A,n/=A),a.backend_util.assignToTypedArray(t,m,n,i)}return t}(a.backend_util.mergeRealAndImagArrays(m,n),t,A);return a.backend_util.splitRealAndImagArrays(e)}var l}function Yt(e,A,Y,t,i){if(1===Y)return{real:e,imag:A};const m=a.backend_util.mergeRealAndImagArrays(e,A),n=Y/2,l=a.backend_util.complexWithEvenIndex(m),p=l.real,d=l.imag,r=[p.length],s=i.makeTensorInfo(r,"float32",p),Z=i.makeTensorInfo(r,"float32",d),N=o({inputs:{real:s,imag:Z},backend:i}),h=a.backend_util.complexWithOddIndex(m),W=h.real,u=h.imag,V=[W.length],c=i.makeTensorInfo(V,"float32",W),G=i.makeTensorInfo(V,"float32",u),F=o({inputs:{real:c,imag:G},backend:i}),J=Yt(p,d,n,t,i),g=J.real,k=J.imag,f=[g.length],R=i.makeTensorInfo(f,"float32",g),b=i.makeTensorInfo(f,"float32",k),y=o({inputs:{real:R,imag:b},backend:i}),B=Yt(W,u,n,t,i),S=B.real,x=B.imag,T=[S.length],q=i.makeTensorInfo(T,"float32",S),I=i.makeTensorInfo(T,"float32",x),v=o({inputs:{real:q,imag:I},backend:i}),w=a.backend_util.exponents(Y,t),U=[w.real.length],K=i.makeTensorInfo(U,"float32",w.real),O=i.makeTensorInfo(U,"float32",w.imag),D=o({inputs:{real:K,imag:O},backend:i}),C=Ve({inputs:{a:D,b:v},backend:i}),z=X({inputs:{a:y,b:C},backend:i}),H=iA({inputs:{a:y,b:C},backend:i}),E=j({inputs:{input:z},backend:i}),_=j({inputs:{input:H},backend:i}),M=dY({inputs:{input:z},backend:i}),L=dY({inputs:{input:H},backend:i}),P=rY({inputs:[E,_],backend:i,attrs:{axis:0}}),Q=rY({inputs:[M,L],backend:i,attrs:{axis:0}}),$=i.data.get(P.dataId).values,ee=i.data.get(Q.dataId).values;return i.disposeIntermediateTensorInfo(s),i.disposeIntermediateTensorInfo(Z),i.disposeIntermediateTensorInfo(N),i.disposeIntermediateTensorInfo(c),i.disposeIntermediateTensorInfo(G),i.disposeIntermediateTensorInfo(F),i.disposeIntermediateTensorInfo(R),i.disposeIntermediateTensorInfo(b),i.disposeIntermediateTensorInfo(y),i.disposeIntermediateTensorInfo(q),i.disposeIntermediateTensorInfo(I),i.disposeIntermediateTensorInfo(v),i.disposeIntermediateTensorInfo(K),i.disposeIntermediateTensorInfo(O),i.disposeIntermediateTensorInfo(D),i.disposeIntermediateTensorInfo(C),i.disposeIntermediateTensorInfo(z),i.disposeIntermediateTensorInfo(H),i.disposeIntermediateTensorInfo(E),i.disposeIntermediateTensorInfo(M),i.disposeIntermediateTensorInfo(_),i.disposeIntermediateTensorInfo(L),i.disposeIntermediateTensorInfo(P),i.disposeIntermediateTensorInfo(Q),{real:$,imag:ee}}const tt={kernelName:a.FFT,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y}=e,{input:t}=A,i=a.util.sizeFromShape(t.shape),m=t.shape[t.shape.length-1],n=JA({inputs:{x:t},backend:Y,attrs:{shape:[i/m,m]}}),l=et(n,!1,Y),p=JA({inputs:{x:l},backend:Y,attrs:{shape:t.shape}});return Y.disposeIntermediateTensorInfo(n),Y.disposeIntermediateTensorInfo(l),p}};function at(e){const{backend:A,attrs:Y}=e,{shape:t,value:i,dtype:m}=Y,n=m||a.util.inferDtype(i),l=a.util.getArrayFromDType(n,a.util.sizeFromShape(t));return function(e,A,Y){e.fill(A)}(l,i),A.makeTensorInfo(t,n,l)}const it={kernelName:a.Fill,backendName:"cpu",kernelFunc:at};const mt={kernelName:a.FlipLeftRight,backendName:"cpu",kernelFunc:({inputs:e,attrs:A,backend:Y})=>{const{image:t}=e,i=Y,m=a.util.getTypedArrayFromDType(t.dtype,a.util.sizeFromShape(t.shape)),[n,l,p,d]=t.shape,o=i.data.get(t.dataId).values;for(let e=0;e<n;e++){const A=e*p*l*d;for(let e=0;e<l;e++){const Y=e*(p*d);for(let e=0;e<p;e++){const t=e*d;for(let a=0;a<d;a++){const i=Math.round(p-e-1),n=A+Y+t+a;let l=o[n];if(i>=0&&i<p){l=o[A+Y+i*d+a]}m[n]=l}}}}return{dataId:i.write(m,t.shape,t.dtype),shape:t.shape,dtype:t.dtype}}},nt=d(((e,A)=>Math.floor(e/A))),lt=V(a.FloorDiv,nt,null,"int32"),pt={kernelName:a.FloorDiv,backendName:"cpu",kernelFunc:lt};const dt={kernelName:a.FusedConv2D,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:a,filter:i,bias:m,preluActivationWeights:n}=A,{strides:l,pad:p,dataFormat:d,dilations:o,dimRoundingMode:r,activation:s,leakyreluAlpha:Z}=t;let N=ZY({inputs:{x:a,filter:i},backend:Y,attrs:{strides:l,pad:p,dataFormat:d,dilations:o,dimRoundingMode:r}});if(m){const e=N;N=X({inputs:{a:N,b:m},backend:Y}),Y.disposeIntermediateTensorInfo(e)}if(s){const e=N;N=XA(Y,N,s,n,Z),Y.disposeIntermediateTensorInfo(e)}return N}};const ot={kernelName:a.FusedDepthwiseConv2D,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:a,filter:i,bias:m,preluActivationWeights:n}=A,{strides:l,pad:p,dataFormat:d,dilations:o,dimRoundingMode:r,activation:s,leakyreluAlpha:Z}=t;let N=RY({inputs:{x:a,filter:i},backend:Y,attrs:{strides:l,pad:p,dataFormat:d,dilations:o,dimRoundingMode:r}});if(m){const e=N;N=X({inputs:{a:N,b:m},backend:Y}),Y.disposeIntermediateTensorInfo(e)}if(s){const e=N;N=XA(Y,N,s,n,Z),Y.disposeIntermediateTensorInfo(e)}return N}};const rt={kernelName:a.GatherNd,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y}=e,{params:t,indices:i}=A,m=a.util.sizeFromShape(t.shape),n=i.shape,l=n[n.length-1],[p,d,o,r]=a.backend_util.prepareAndValidate(t,i);if(0===d)return Y.makeTensorInfo(p,t.dtype,[]);const s=E(Y.data.get(i.dataId).values,Y.bufferSync(t),t.dtype,d,l,o,r,t.shape,m);return Y.makeTensorInfo(p,t.dtype,s.values)}};const st={kernelName:a.GatherV2,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m,indices:n}=A,{axis:l,batchDims:p}=t;i([m,n],"gatherV2");let d=p;null==p&&(d=0);const o=a.util.sizeFromShape(n.shape),r=a.util.parseAxisParam(l,m.shape)[0],s=a.backend_util.segment_util.collectGatherOpShapeInfo(m,n,r,d),Z=JA({inputs:{x:m},backend:Y,attrs:{shape:[s.batchSize,s.outerSize,s.dimSize,s.sliceSize]}}),N=JA({inputs:{x:n},backend:Y,attrs:{shape:[s.batchSize,o/s.batchSize]}}),j=[s.batchSize,s.outerSize,o/s.batchSize,s.sliceSize],h=Y.bufferSync(N),W=_(Y.bufferSync(Z),h,j);return Y.disposeIntermediateTensorInfo(Z),Y.disposeIntermediateTensorInfo(N),Y.makeTensorInfo(s.outputShape,W.dtype,W.values)}};const Zt={kernelName:a.IFFT,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y}=e,{input:t}=A,i=a.util.sizeFromShape(t.shape),m=t.shape[t.shape.length-1],n=JA({inputs:{x:t},backend:Y,attrs:{shape:[i/m,m]}}),l=et(n,!0,Y),p=JA({inputs:{x:l},backend:Y,attrs:{shape:t.shape}});return Y.disposeIntermediateTensorInfo(n),Y.disposeIntermediateTensorInfo(l),p}},Nt=R(a.IsFinite,(e=>Number.isFinite(e)?1:0),"bool"),jt={kernelName:a.IsFinite,backendName:"cpu",kernelFunc:Nt},ht=R(a.IsInf,(e=>Math.abs(e)===1/0?1:0),"bool"),Wt={kernelName:a.IsInf,backendName:"cpu",kernelFunc:ht},ut=R(a.IsNan,(e=>Number.isNaN(e)?1:0),"bool"),Vt={kernelName:a.IsNan,backendName:"cpu",kernelFunc:ut};const ct={kernelName:a.LinSpace,backendName:"cpu",kernelFunc:function(e){const{backend:A,attrs:Y}=e,{start:t,stop:a,num:i}=Y,m=ne(t,a,i);return A.makeTensorInfo([m.length],"float32",m)}},Gt=R(a.Log1p,(e=>Math.log1p(e))),Ft={kernelName:a.Log1p,backendName:"cpu",kernelFunc:Gt},Xt=d(((e,A)=>e&&A)),Jt=V(a.LogicalAnd,Xt,null,"bool"),gt={kernelName:a.LogicalAnd,backendName:"cpu",kernelFunc:Jt},kt=R(a.LogicalNot,(e=>e?0:1),"bool"),ft={kernelName:a.LogicalNot,backendName:"cpu",kernelFunc:kt},Rt=d(((e,A)=>e||A)),bt=V(a.LogicalOr,Rt,null,"bool"),yt={kernelName:a.LogicalOr,backendName:"cpu",kernelFunc:bt};const Bt={kernelName:a.LRN,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m}=A,{depthRadius:n,bias:l,alpha:p,beta:d}=t;i(m,"LRN");const o=m.shape[3],r=o-1,s=Y.data.get(m.dataId).values,Z=a.util.sizeFromShape(m.shape),N=new Float32Array(Z);function j(e){const A=e%o;let Y=e-A+Math.max(0,A-n);const t=e-A+Math.min(A+n,r);let a=0;for(;Y<=t;Y++){const e=s[Y];a+=e*e}return a}for(let e=0;e<Z;e++){const A=j(e),Y=s[e]*Math.pow(l+p*A,-d);N[e]=Y}return Y.makeTensorInfo(m.shape,m.dtype,N)}};const St={kernelName:a.LRNGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m,y:n,dy:l}=A,{depthRadius:p,bias:d,alpha:o,beta:r}=t;i(l,"LRNGrad");const s=a.util.sizeFromShape(l.shape),Z=l.shape[3],N=Y.data.get(l.dataId).values,j=Y.data.get(m.dataId).values,h=Y.data.get(n.dataId).values,W=new Float32Array(s),u=s;for(let e=0;e<u;e++){const A=e%Z,Y=e-A+Math.max(0,A-p),t=e-A+Math.min(Z,A+p+1);let a=0;for(let e=Y;e<t;e++)a+=Math.pow(j[e],2);a=o*a+d;for(let A=Y;A<t;A++){let Y=-2*o*r*j[A]*h[e]/a;e===A&&(Y+=Math.pow(a,-r)),Y*=N[e],W[A]+=Y}}return Y.makeTensorInfo(l.shape,m.dtype,W)}};function xt(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m}=A,{reductionIndices:n,keepDims:l}=t,p=Y;let d=m.shape;const o=d.length,r=a.util.parseAxisParam(n,d);let s=r;const Z=a.backend_util.getAxesPermutation(s,o);let N=p.data.get(m.dataId).values;if(null!=Z){const e=new Array(o);for(let A=0;A<e.length;A++)e[A]=d[Z[A]];N=ke(N,d,m.dtype,Z,e),s=a.backend_util.getInnerMostAxes(s.length,o),d=e}i(m,"max"),a.backend_util.assertAxesAreInnerMostDims("max",s,o);const[j,h]=a.backend_util.computeOutAndReduceShapes(d,s),W=oe(N,a.util.sizeFromShape(h),j,m.dtype),u=p.write(W,j,m.dtype);let V=j;if(l){V=a.backend_util.expandShapeToKeepDim(j,r)}return{dataId:u,shape:V,dtype:m.dtype}}const Tt={kernelName:a.Max,backendName:"cpu",kernelFunc:xt};const qt={kernelName:a.MaxPool,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m}=A;i(m,"maxPool");const{filterSize:n,strides:l,pad:p,dimRoundingMode:d}=t;a.util.assert(a.backend_util.eitherStridesOrDilationsAreOne(l,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${l} and dilations '1'`));const o=a.backend_util.computePool2DInfo(m.shape,n,l,1,p,d);let r;if(1===o.filterWidth&&1===o.filterHeight&&a.util.arraysEqual(o.inShape,o.outShape))r=Z({inputs:{x:m},backend:Y});else{const e=Y.data.get(m.dataId).values,A=a.util.computeStrides(m.shape),t=LA(e,m.shape,m.dtype,A,o,"max");r=Y.makeTensorInfo(o.outShape,m.dtype,t.values)}return r}};const It={kernelName:a.MaxPool3D,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m}=A,{filterSize:n,strides:l,pad:p,dimRoundingMode:d,dataFormat:o}=t;i(m,"maxPool3d");const r=a.backend_util.computePool3DInfo(m.shape,n,l,1,p,d,o),s=QA(Y.data.get(m.dataId).values,m.shape,m.dtype,a.util.computeStrides(m.shape),r,"max");return Y.makeTensorInfo(s.shape,"float32",s.values)}};const vt={kernelName:a.MaxPool3DGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{dy:m,input:n}=A,{filterSize:l,strides:p,pad:d,dimRoundingMode:o}=t;i([m,n],"maxPool3DGrad");const r=a.backend_util.computePool3DInfo(n.shape,l,p,1,d,o),s=function(e,A){const Y=(0,a.buffer)(A.outShape,"int32"),t=A.strideDepth,i=A.strideHeight,m=A.strideWidth,n=A.dilationDepth,l=A.dilationHeight,p=A.dilationWidth,d=A.effectiveFilterDepth,o=A.effectiveFilterHeight,r=A.effectiveFilterWidth,s=A.padInfo.front,Z=A.padInfo.top,N=A.padInfo.left;for(let a=0;a<A.batchSize;++a)for(let j=0;j<A.inChannels;++j)for(let h=0;h<A.outDepth;++h){const W=h*t-s;let u=W;for(;u<0;)u+=n;const V=Math.min(A.inDepth,d+W);for(let t=0;t<A.outHeight;++t){const d=t*i-Z;let s=d;for(;s<0;)s+=l;const c=Math.min(A.inHeight,o+d);for(let i=0;i<A.outWidth;++i){const Z=i*m-N;let G=Z;for(;G<0;)G+=p;const F=Math.min(A.inWidth,r+Z);let X=Number.NEGATIVE_INFINITY,J=-1;for(let A=u;A<V;A+=n){const Y=A-W;for(let t=s;t<c;t+=l){const i=t-d;for(let m=G;m<F;m+=p){const n=m-Z,l=e.get(a,A,t,m,j);l>=X&&(X=l,J=Y*o*r+i*o+n)}}}Y.set(J,a,h,t,i,j)}}}return Y}(Y.bufferSync(n),r),Z=r.strideDepth,N=r.strideHeight,j=r.strideWidth,h=r.dilationDepth,W=r.dilationHeight,u=r.dilationWidth,V=r.effectiveFilterDepth,c=r.effectiveFilterHeight,G=r.effectiveFilterWidth,F=V-1-r.padInfo.front,X=G-1-r.padInfo.left,J=c-1-r.padInfo.top,g=(0,a.buffer)(n.shape,"float32"),k=Y.bufferSync(m);for(let e=0;e<r.batchSize;++e)for(let A=0;A<r.inChannels;++A)for(let Y=0;Y<r.inDepth;++Y)for(let t=0;t<r.inHeight;++t)for(let a=0;a<r.inWidth;++a){const i=Y-F,m=t-J,n=a-X;let l=0;for(let Y=0;Y<V;Y+=h){const t=(i+Y)/Z;if(!(t<0||t>=r.outDepth||Math.floor(t)!==t))for(let a=0;a<c;a+=W){const i=(m+a)/N;if(!(i<0||i>=r.outHeight||Math.floor(i)!==i))for(let m=0;m<G;m+=u){const p=(n+m)/j;if(p<0||p>=r.outWidth||Math.floor(p)!==p)continue;const d=V*c*G-1-s.get(e,t,i,p,A)===Y*c*G+a*G+m?1:0;if(0===d)continue;l+=k.get(e,t,i,p,A)*d}}}g.set(l,e,Y,t,a,A)}return Y.makeTensorInfo(g.shape,g.dtype,g.values)}};const wt={kernelName:a.MaxPoolGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{dy:m,input:n,output:l}=A,p=n;i([n,l],"maxPoolGrad");const{filterSize:d,strides:o,pad:r,dimRoundingMode:s}=t,Z=a.backend_util.computePool2DInfo(p.shape,d,o,1,r,s),N=Y.data.get(p.dataId).values,j=(0,a.buffer)(Z.outShape,p.dtype,PA(N,p.shape,p.dtype,Z).values),h=Z.strideHeight,W=Z.strideWidth,u=Z.dilationHeight,V=Z.dilationWidth,c=Z.effectiveFilterHeight,G=Z.effectiveFilterWidth,F=G-1-Z.padInfo.left,X=c-1-Z.padInfo.top,J=(0,a.buffer)(p.shape,"float32"),g=Y.data.get(m.dataId).values,k=(0,a.buffer)(m.shape,"float32",g);for(let e=0;e<Z.batchSize;++e)for(let A=0;A<Z.inChannels;++A)for(let Y=0;Y<Z.inHeight;++Y)for(let t=0;t<Z.inWidth;++t){const a=Y-X,i=t-F;let m=0;for(let Y=0;Y<c;Y+=u){const t=(a+Y)/h;if(!(t<0||t>=Z.outHeight||Math.floor(t)!==t))for(let a=0;a<G;a+=V){const n=(i+a)/W;if(n<0||n>=Z.outWidth||Math.floor(n)!==n)continue;const l=c*G-1-j.get(e,t,n,A)===Y*G+a?1:0;if(0===l)continue;m+=k.get(e,t,n,A)*l}}J.set(m,e,Y,t,A)}return Y.makeTensorInfo(J.shape,J.dtype,J.values)}};const Ut={kernelName:a.MaxPoolWithArgmax,backendName:"cpu",kernelFunc:({inputs:e,attrs:A,backend:Y})=>{const{x:t}=e,{filterSize:m,strides:n,pad:l,includeBatchInIndex:p}=A,d=Y;i(t,"MaxPoolWithArgmax");const o=d.data.get(t.dataId).values,r=a.backend_util.computePool2DInfo(t.shape,m,n,[1,1],l),[s,Z]=function(e,A,Y,t,i){const m=LA(e,0,Y,a.util.computeStrides(A),i,"max"),n=PA(e,A,Y,i,!0,t);return[m.values,n.values]}(o,t.shape,t.dtype,p,r),N=d.write(s,r.outShape,t.dtype),j=d.write(Z,r.outShape,t.dtype);return[{dataId:N,shape:r.outShape,dtype:t.dtype},{dataId:j,shape:r.outShape,dtype:"int32"}]}};const Kt={kernelName:a.Mean,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:i}=A,{axis:m,keepDims:n}=t,l=a.util.parseAxisParam(m,i.shape),p=a.backend_util.computeOutAndReduceShapes(i.shape,l)[1],d=a.util.sizeFromShape(p),o=[],r=Y.makeTensorInfo([],"float32",new Float32Array([d]));o.push(r);const s=W({inputs:{x:i},backend:Y,attrs:{dtype:"float32"}});o.push(s);const Z=QY({inputs:{a:s,b:r},backend:Y});o.push(Z);const N=IY({inputs:{x:Z},backend:Y,attrs:{axis:m,keepDims:n}});return o.forEach((e=>Y.disposeIntermediateTensorInfo(e))),N}};const Ot={kernelName:a.Min,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m}=A,{axis:n,keepDims:l}=t;i(m,"min");const p=a.util.parseAxisParam(n,m.shape);let d=p;const o=a.backend_util.getAxesPermutation(d,m.shape.length);let r=m;null!=o&&(r=fe({inputs:{x:m},backend:Y,attrs:{perm:o}}),d=a.backend_util.getInnerMostAxes(d.length,m.shape.length)),a.backend_util.assertAxesAreInnerMostDims("min",d,r.shape.length);const[s,Z]=a.backend_util.computeOutAndReduceShapes(r.shape,d),N=a.util.sizeFromShape(Z),j=a.util.makeZerosTypedArray(a.util.sizeFromShape(s),r.dtype),h=Y.data.get(r.dataId).values;for(let e=0;e<j.length;++e){const A=e*N;let Y=h[A];for(let e=0;e<N;++e){const t=h[A+e];(Number.isNaN(t)||t<Y)&&(Y=t)}j[e]=Y}null!=o&&Y.disposeIntermediateTensorInfo(r);const W=Y.makeTensorInfo(s,r.dtype,j);if(l){const e=JA({inputs:{x:W},backend:Y,attrs:{shape:a.backend_util.expandShapeToKeepDim(s,p)}});return Y.disposeIntermediateTensorInfo(W),e}return W}};const Dt={kernelName:a.MirrorPad,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m}=A,{paddings:n,mode:l}=t;i(m,"mirrorPad");const p=n.map(((e,A)=>e[0]+m.shape[A]+e[1])),d=n.map((e=>e[0])),o=n.map(((e,A)=>e[0]+m.shape[A])),r="reflect"===l?0:1,s=Y.data.get(m.dataId).values,Z=m.shape.length,N=a.util.computeStrides(m.shape),j=a.util.sizeFromShape(p),h=p.length,W=a.util.computeStrides(p),u=a.util.getTypedArrayFromDType(m.dtype,j);for(let e=0;e<j;e++){let A=a.util.indexToLoc(e,h,W);for(let e=0;e<h;e++)A[e]<d[e]?A[e]=2*d[e]-A[e]-r:A[e]>=o[e]&&(A[e]=2*(o[e]-1)-A[e]+r);A=A.map(((e,A)=>e-d[A]));const Y=a.util.locToIndex(A,Z,N);u[e]=s[Y]}return{dataId:Y.write(u,p,m.dtype),shape:p,dtype:m.dtype}}},Ct=d(((e,A)=>{const Y=e%A;return e<0&&A<0||e>=0&&A>=0?Y:(Y+A)%A})),zt=V(a.Mod,Ct),Ht={kernelName:a.Mod,backendName:"cpu",kernelFunc:zt};var Et=Y(6377);function _t(e){const{inputs:A,backend:Y,attrs:t}=e,{logits:i}=A,{dim:m}=t,n=i.shape.length;let l=m;if(-1===l&&(l=n-1),l!==n-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n} and dim was ${l}`);const p=a.util.parseAxisParam([l],i.shape),d=xt({inputs:{x:i},backend:Y,attrs:{reductionIndices:p,keepDims:!1}}),o=a.backend_util.expandShapeToKeepDim(d.shape,p),r=JA({inputs:{x:d},backend:Y,attrs:{shape:o}}),s=iA({inputs:{a:i,b:r},backend:Y}),Z=w({inputs:{x:s},backend:Y}),N=IY({inputs:{x:Z},backend:Y,attrs:{axis:p,keepDims:!1}}),j=JA({inputs:{x:N},backend:Y,attrs:{shape:o}}),h=QY({inputs:{a:Z,b:j},backend:Y});return Y.disposeIntermediateTensorInfo(d),Y.disposeIntermediateTensorInfo(r),Y.disposeIntermediateTensorInfo(s),Y.disposeIntermediateTensorInfo(Z),Y.disposeIntermediateTensorInfo(N),Y.disposeIntermediateTensorInfo(j),h}const Mt={kernelName:a.Softmax,backendName:"cpu",kernelFunc:_t};const Lt={kernelName:a.Multinomial,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{logits:m}=A,{numSamples:n,seed:l,normalized:p}=t;i(m,"multinomial");const d=p?m:_t({inputs:{logits:m},backend:Y,attrs:{dim:-1}}),o=d.shape[0],r=d.shape[1],s=Y.data.get(d.dataId).values,Z=[o,n],N=a.util.makeZerosTypedArray(a.util.sizeFromShape(Z),"int32");for(let e=0;e<o;++e){const A=e*r,Y=new Float32Array(r-1);Y[0]=s[A];for(let e=1;e<Y.length;++e)Y[e]=Y[e-1]+s[A+e];const t=Et.alea(l.toString()),a=e*n;for(let e=0;e<n;++e){const A=t();N[a+e]=Y.length;for(let t=0;t<Y.length;t++)if(A<Y[t]){N[a+e]=t;break}}}return p||Y.disposeIntermediateTensorInfo(d),Y.makeTensorInfo(Z,"int32",N)}},Pt=a.kernel_impls.nonMaxSuppressionV3Impl;const Qt={kernelName:a.NonMaxSuppressionV3,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{boxes:a,scores:m}=A,{maxOutputSize:n,iouThreshold:l,scoreThreshold:p}=t;i(a,"NonMaxSuppression");const d=Y.data.get(a.dataId).values,o=Y.data.get(m.dataId).values,{selectedIndices:r}=Pt(d,o,n,l,p);return Y.makeTensorInfo([r.length],"int32",new Int32Array(r))}},$t=a.kernel_impls.nonMaxSuppressionV4Impl;const ea={kernelName:a.NonMaxSuppressionV4,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{boxes:a,scores:m}=A,{maxOutputSize:n,iouThreshold:l,scoreThreshold:p,padToMaxOutputSize:d}=t;i(a,"NonMaxSuppressionPadded");const o=Y.data.get(a.dataId).values,r=Y.data.get(m.dataId).values,{selectedIndices:s,validOutputs:Z}=$t(o,r,n,l,p,d);return[Y.makeTensorInfo([s.length],"int32",new Int32Array(s)),Y.makeTensorInfo([],"int32",new Int32Array([Z]))]}},Aa=a.kernel_impls.nonMaxSuppressionV5Impl;const Ya={kernelName:a.NonMaxSuppressionV5,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{boxes:a,scores:m}=A,{maxOutputSize:n,iouThreshold:l,scoreThreshold:p,softNmsSigma:d}=t;i(a,"NonMaxSuppressionWithScore");const o=Y.data.get(a.dataId).values,r=Y.data.get(m.dataId).values,s=n,Z=l,N=p,j=d,{selectedIndices:h,selectedScores:W}=Aa(o,r,s,Z,N,j);return[Y.makeTensorInfo([h.length],"int32",new Int32Array(h)),Y.makeTensorInfo([W.length],"float32",new Float32Array(W))]}};const ta={kernelName:a.OneHot,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{indices:m}=A,{depth:n,onValue:l,offValue:p}=t;i(m,"oneHot");const d=a.util.sizeFromShape(m.shape),o=new Float32Array(d*n);o.fill(p);const r=Y.data.get(m.dataId).values;for(let e=0;e<d;++e)r[e]>=0&&r[e]<n&&(o[e*n+r[e]]=l);return Y.makeTensorInfo([...m.shape,n],"int32",o)}};function aa(e){const{inputs:A,backend:Y}=e,{x:t}=A;if("string"===t.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===t.dtype){const e=j({inputs:{input:t},backend:Y}),A=aa({inputs:{x:e},backend:Y}),a=dY({inputs:{input:t},backend:Y}),i=aa({inputs:{x:a},backend:Y}),m=o({inputs:{real:A,imag:i},backend:Y});return Y.disposeIntermediateTensorInfo(e),Y.disposeIntermediateTensorInfo(A),Y.disposeIntermediateTensorInfo(a),Y.disposeIntermediateTensorInfo(i),m}return at({backend:Y,attrs:{shape:t.shape,value:0,dtype:t.dtype}})}const ia={kernelName:a.ZerosLike,backendName:"cpu",kernelFunc:aa};const ma={kernelName:a.OnesLike,backendName:"cpu",kernelFunc:function e(A){const{inputs:Y,backend:t}=A,{x:a}=Y;if("string"===a.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===a.dtype){const A=j({inputs:{input:a},backend:t}),Y=e({inputs:{x:A},backend:t}),i=dY({inputs:{input:a},backend:t}),m=aa({inputs:{x:i},backend:t}),n=o({inputs:{real:Y,imag:m},backend:t});return t.disposeIntermediateTensorInfo(A),t.disposeIntermediateTensorInfo(Y),t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(m),n}return at({backend:t,attrs:{shape:a.shape,value:1,dtype:a.dtype}})}};function na(e){const{inputs:A,backend:Y,attrs:t}=e,{axis:i}=t;if(1===A.length)return MY({inputs:{input:A[0]},backend:Y,attrs:{dim:i}});const m=A[0].shape,n=A[0].dtype;A.forEach((e=>{a.util.assertShapesMatch(m,e.shape,"All tensors passed to stack must have matching shapes"),a.util.assert(n===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const l=[],p=rY({inputs:A.map((e=>{const A=MY({inputs:{input:e},backend:Y,attrs:{dim:i}});return l.push(A),A})),backend:Y,attrs:{axis:i}});return l.forEach((e=>Y.disposeIntermediateTensorInfo(e))),p}const la={kernelName:a.Pack,backendName:"cpu",kernelFunc:na};const pa={kernelName:a.PadV2,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m}=A,{paddings:n,constantValue:l}=t;i(m,"pad");const p=n.map(((e,A)=>e[0]+m.shape[A]+e[1])),d=n.map((e=>e[0])),o=Y.data.get(m.dataId).values,r=a.util.sizeFromShape(m.shape),s=m.shape.length,Z=a.util.computeStrides(m.shape),N=a.util.sizeFromShape(p),j=p.length,h=a.util.computeStrides(p),W=a.util.getTypedArrayFromDType(m.dtype,N);0!==l&&W.fill(l);for(let e=0;e<r;e++){const A=a.util.indexToLoc(e,s,Z).map(((e,A)=>e+d[A]));W[a.util.locToIndex(A,j,h)]=o[e]}return{dataId:Y.write(W,p,m.dtype),shape:p,dtype:m.dtype}}},da=d(((e,A)=>Math.pow(e,A))),oa=V(a.Pow,da),ra={kernelName:a.Pow,backendName:"cpu",kernelFunc:oa};const sa={kernelName:a.Range,backendName:"cpu",kernelFunc:function(e){const{backend:A,attrs:Y}=e,{start:t,stop:a,dtype:i,step:m}=Y,n=Be(t,a,m,i);return A.makeTensorInfo([n.length],i,n)}},Za=R(a.Reciprocal,(e=>1/e)),Na={kernelName:a.Reciprocal,backendName:"cpu",kernelFunc:Za};const ja={kernelName:a.ResizeBilinear,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{images:m}=A,{alignCorners:n,halfPixelCenters:l,size:p}=t;i(m,"resizeBilinear");const d=a.util.computeStrides(m.shape),[o,r]=p,[s,Z,N,j]=m.shape,h=Y.data.get(m.dataId).values,W=new Float32Array(a.util.sizeFromShape([s,o,r,j])),u=[n&&o>1?Z-1:Z,n&&r>1?N-1:N],V=[n&&o>1?o-1:o,n&&r>1?r-1:r];let c=0;const G=u[0]/V[0],F=u[1]/V[1];for(let e=0;e<s;e++)for(let A=0;A<o;A++){let Y;Y=l?G*(A+.5)-.5:G*A;const t=Math.max(0,Math.floor(Y)),a=Y-t,i=Math.min(Z-1,Math.ceil(Y)),m=e*d[0]+t*d[1],n=e*d[0]+i*d[1];for(let e=0;e<r;e++){let A;A=l?F*(e+.5)-.5:F*e;const Y=Math.max(0,Math.floor(A)),t=A-Y,i=Math.min(N-1,Math.ceil(A)),p=m+Y*d[2],o=n+Y*d[2],r=m+i*d[2],s=n+i*d[2];for(let e=0;e<j;e++){const A=h[p+e],Y=h[o+e],i=A+(h[r+e]-A)*t,m=i+(Y+(h[s+e]-Y)*t-i)*a;W[c++]=m}}}return Y.makeTensorInfo([s,o,r,j],"float32",W)}};const ha={kernelName:a.ResizeBilinearGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{images:m,dy:n}=A,{alignCorners:l}=t;i([n,m],"resizeBilinearGrad");const p=a.util.computeStrides(m.shape),[d,o,r,s]=m.shape,[,Z,N]=n.shape,j=new Float32Array(d*o*r*s),h=[l&&Z>1?o-1:o,l&&N>1?r-1:r],W=[l&&Z>1?Z-1:Z,l&&N>1?N-1:N],u=h[0]/W[0],V=h[1]/W[1],c=Y.data.get(n.dataId).values;let G=0;for(let e=0;e<d;e++){const A=e*p[0];for(let e=0;e<Z;e++){const Y=e*u,t=Math.floor(Y),a=Math.min(Math.ceil(Y),o-1),i=A+t*p[1],m=A+a*p[1],n=Y-t,l=1-n;for(let e=0;e<N;e++){const A=e*V,Y=Math.floor(A),t=Math.min(Math.ceil(A),r-1),a=A-Y,d=1-a,o=i+Y*p[2],Z=i+t*p[2],N=m+Y*p[2],h=m+t*p[2],W=l*d,u=l*a,F=n*d,X=n*a;for(let e=0;e<s;e++){const A=c[G++];j[o+e]+=A*W,j[Z+e]+=A*u,j[N+e]+=A*F,j[h+e]+=A*X}}}}return Y.makeTensorInfo([d,r,o,s],"float32",j)}};const Wa={kernelName:a.ResizeNearestNeighbor,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{images:m}=A,{alignCorners:n,halfPixelCenters:l,size:p}=t;i(m,"resizeNearestNeighbor");const d=a.util.computeStrides(m.shape),[o,r]=p,[s,Z,N,j]=m.shape,h=Y.data.get(m.dataId).values,W=new Float32Array(s*o*r*j),u=[n&&o>1?Z-1:Z,n&&r>1?N-1:N],V=[n&&o>1?o-1:o,n&&r>1?r-1:r],c=u[0]/V[0],G=u[1]/V[1];let F=0;for(let e=0;e<s;e++){const A=e*d[0];for(let e=0;e<o;e++){const Y=l?c*(e+.5):c*e;let t=Math.min(Z-1,n?Math.round(Y):Math.floor(Y));l&&(t=Math.max(0,t));const a=A+t*d[1];for(let e=0;e<r;e++){const A=l?G*(e+.5):G*e;let Y=Math.min(N-1,n?Math.round(A):Math.floor(A));l&&(Y=Math.max(0,Y));const t=a+Y*d[2];for(let e=0;e<j;e++){const A=h[t+e];W[F++]=A}}}}return Y.makeTensorInfo([s,o,r,j],m.dtype,W)}};const ua={kernelName:a.ResizeNearestNeighborGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{images:m,dy:n}=A,{alignCorners:l}=t;i([n,m],"resizeNearestNeighborGrad");const p=a.util.computeStrides(m.shape),d=a.util.computeStrides(n.shape),[o,r,s,Z]=m.shape,[,N,j]=n.shape,h=new Float32Array(o*r*s*Z),W=Y.data.get(n.dataId).values,u=[l&&N>1?r-1:r,l&&j>1?s-1:s],V=[l&&N>1?N-1:N,l&&j>1?j-1:j],c=u[0]/V[0],G=u[1]/V[1],F=1/c,X=1/G,J=2*Math.ceil(F)+2,g=2*Math.ceil(X)+2;for(let e=0;e<o;e++){const A=e*p[0];for(let e=0;e<r;e++){const Y=A+e*p[1],t=Math.floor(e*F),a=Math.floor(t-J/2);for(let t=0;t<s;t++){const i=Y+t*p[2],m=Math.floor(t*X),n=Math.floor(m-g/2);for(let Y=0;Y<Z;Y++){let m=0;for(let i=0;i<J;i++){const p=i+a;if(p<0||p>=N)continue;const o=A+p*d[1],Z=p*c;if(e===Math.min(r-1,l?Math.round(Z):Math.floor(Z)))for(let e=0;e<g;e++){const A=e+n;if(A<0||A>=j)continue;const a=o+A*d[2],i=A*G;t===Math.min(s-1,l?Math.round(i):Math.floor(i))&&(m+=W[a+Y])}}h[i+Y]=m}}}}return Y.makeTensorInfo(m.shape,m.dtype,h)}};const Va={kernelName:a.Reverse,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m}=A,{dims:n}=t;i(m,"reverse");const l=m.shape.length,p=a.util.parseAxisParam(n,m.shape);if(0===l)return Z({inputs:{x:m},backend:Y});const d=new a.TensorBuffer(m.shape,m.dtype),o=Y.bufferSync(m);for(let e=0;e<d.size;e++){const A=d.indexToLoc(e),Y=A.slice();p.forEach((e=>Y[e]=m.shape[e]-1-Y[e])),d.set(o.get(...Y),...A)}return Y.makeTensorInfo(d.shape,d.dtype,d.values)}},ca={kernelName:a.RotateWithOffset,backendName:"cpu",kernelFunc:({inputs:e,attrs:A,backend:Y})=>{const{image:t}=e,{radians:i,fillValue:m,center:n}=A,l=Y,p=a.util.getTypedArrayFromDType(t.dtype,a.util.sizeFromShape(t.shape)),[d,o,r,s]=t.shape,[Z,N]=a.backend_util.getImageCenter(n,o,r),j=Math.sin(i),h=Math.cos(i),W=l.data.get(t.dataId).values;for(let e=0;e<d;e++){const A=e*r*o*s;for(let e=0;e<o;e++){const Y=e*(r*s);for(let t=0;t<r;t++){const a=t*s;for(let i=0;i<s;i++){const n=[d,e,t,i],l=n[2],u=n[1];let V=(l-Z)*h-(u-N)*j,c=(l-Z)*j+(u-N)*h;V=Math.round(V+Z),c=Math.round(c+N);let G=m;if("number"!=typeof m&&(G=3===i?255:m[i]),V>=0&&V<r&&c>=0&&c<o){G=W[A+c*(r*s)+V*s+i]}p[A+Y+a+i]=G}}}}return{dataId:l.write(p,t.shape,t.dtype),shape:t.shape,dtype:t.dtype}}},Ga=R(a.Round,(e=>{const A=Math.floor(e);return e-A<.5?Math.floor(e):e-A>.5?Math.ceil(e):A%2==0?A:A+1})),Fa={kernelName:a.Round,backendName:"cpu",kernelFunc:Ga};function Xa(e,A,Y,t,i,m,n,l,p,d){const o=[t/i,i],r=e.values,s=A.values;if(0===t)return(0,a.buffer)(Y,A.dtype);const Z=(0,a.buffer)(o,A.dtype);Z.values.fill(p);for(let e=0;e<m;e++){const a=[];let m=0;for(let A=0;A<n;A++){const Y=r[e*n+A];a.push(Y),m+=Y*l[A]}if(m<0||m>=t/i)throw new Error(`Invalid indices: ${a} does not index into ${Y}`);for(let Y=0;Y<i;Y++)d?Z.values[m*i+Y]+=s[e*i+Y]:Z.values[m*i+Y]=0===A.rank?s[0]:s[e*i+Y]}return Z}const Ja={kernelName:a.ScatterNd,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{indices:i,updates:m}=A,{shape:n}=t,{sliceRank:l,numUpdates:p,sliceSize:d,strides:o,outputSize:r}=a.backend_util.calculateShapes(m,i,n),s=Xa(Y.bufferSync(i),Y.bufferSync(m),n,r,d,p,l,o,0,!0);return Y.makeTensorInfo(n,s.dtype,s.values)}};const ga={kernelName:a.Select,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y}=e,{condition:t,t:m,e:n}=A;i([t,m,n],"select");const l=t.shape.length,p=Y.data.get(t.dataId).values,d=Y.data.get(m.dataId).values,o=Y.data.get(n.dataId).values,r=(0,a.upcastType)(m.dtype,n.dtype),s=a.util.makeZerosTypedArray(a.util.sizeFromShape(m.shape),r);let Z=0;const N=0===l||l>1||1===m.shape.length?1:a.util.sizeFromShape(m.shape.slice(1));for(let e=0;e<p.length;e++)for(let A=0;A<N;A++)1===p[e]?s[Z++]=d[e]:s[Z++]=o[e];return Y.makeTensorInfo(m.shape,r,s)}},ka=a.backend_util.SELU_SCALEALPHA,fa=a.backend_util.SELU_SCALE,Ra=R(a.Selu,(e=>e>=0?fa*e:ka*(Math.exp(e)-1))),ba={kernelName:a.Selu,backendName:"cpu",kernelFunc:Ra},ya=R(a.Sign,(e=>e<0?-1:e>0?1:0)),Ba={kernelName:a.Sign,backendName:"cpu",kernelFunc:ya},Sa=R(a.Sin,(e=>Math.sin(e))),xa={kernelName:a.Sin,backendName:"cpu",kernelFunc:Sa},Ta=R(a.Sinh,(e=>Math.sinh(e))),qa={kernelName:a.Sinh,backendName:"cpu",kernelFunc:Ta},Ia=Math.log(1.1920928955078125e-7)+2,va=R(a.Softplus,(e=>{const A=e>-Ia,Y=e<Ia,t=Math.exp(e);let a;return a=Y?t:A?e:Math.log(1+t),a})),wa={kernelName:a.Softplus,backendName:"cpu",kernelFunc:va};const Ua={kernelName:a.SpaceToBatchND,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m}=A,{blockShape:n,paddings:l}=t;i([m],"spaceToBatchND");const p=a.util.sizeFromShape(n),d=[[0,0]];d.push(...l);for(let e=1+n.length;e<m.shape.length;++e)d.push([0,0]);const o=pa.kernelFunc({inputs:{x:m},backend:Y,attrs:{paddings:d,constantValue:0}}),r=a.backend_util.getReshaped(o.shape,n,p,!1),s=a.backend_util.getPermuted(r.length,n.length,!1),Z=a.backend_util.getReshapedPermuted(o.shape,n,p,!1),N=JA({inputs:{x:o},backend:Y,attrs:{shape:r}}),j=fe({inputs:{x:N},backend:Y,attrs:{perm:s}}),h=JA({inputs:{x:j},backend:Y,attrs:{shape:Z}});return Y.disposeIntermediateTensorInfo(o),Y.disposeIntermediateTensorInfo(N),Y.disposeIntermediateTensorInfo(j),h}};const Ka={kernelName:a.SparseFillEmptyRows,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y}=e,{indices:t,values:a,denseShape:i,defaultValue:m}=A;if(1!==i.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${i.shape}`);if(2!==t.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${t.shape}`);if(1!==a.shape.length)throw new Error(`Values must be a vector, saw:\n        ${a.shape}`);if(0!==m.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${m.shape}`);const n=Y.data.get(t.dataId).values,l=Y.data.get(a.dataId).values,p=Y.data.get(i.dataId).values,d=Y.data.get(m.dataId).values[0],[o,r,s,Z,N]=Oe(n,t.shape,t.dtype,l,a.dtype,p,d);return[Y.makeTensorInfo(r,t.dtype,o),Y.makeTensorInfo([r[0]],a.dtype,s),Y.makeTensorInfo([Z.length],"bool",new Uint8Array(Z.map((e=>Number(e))))),Y.makeTensorInfo([N.length],t.dtype,new Int32Array(N))]}};const Oa={kernelName:a.SparseReshape,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y}=e,{inputIndices:t,inputShape:a,newShape:i}=A;if(2!==t.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${t.shape}`);if(1!==a.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${a.shape}`);if(1!==i.shape.length)throw new Error(`Target shape should be a vector but received shape ${i.shape}`);const m=Array.from(Y.data.get(a.dataId).values),n=Y.data.get(t.dataId).values,l=Array.from(Y.data.get(i.dataId).values),[p,d,o]=De(n,t.shape,t.dtype,m,l);return[Y.makeTensorInfo(d,t.dtype,p),Y.makeTensorInfo([o.length],i.dtype,new Int32Array(o))]}};const Da={kernelName:a.SparseSegmentMean,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y}=e,{data:t,indices:a,segmentIds:i}=A;if(t.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${a.shape}`);if(1!==i.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${i.shape}`);const m=Y.data.get(t.dataId).values,n=Y.data.get(a.dataId).values,l=Y.data.get(i.dataId).values,[p,d]=Ce(m,t.shape,t.dtype,n,l,!0);return Y.makeTensorInfo(d,t.dtype,p)}};const Ca={kernelName:a.SparseSegmentSum,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y}=e,{data:t,indices:a,segmentIds:i}=A;if(t.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${a.shape}`);if(1!==i.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${i.shape}`);const m=Y.data.get(t.dataId).values,n=Y.data.get(a.dataId).values,l=Y.data.get(i.dataId).values,[p,d]=Ce(m,t.shape,t.dtype,n,l);return Y.makeTensorInfo(d,t.dtype,p)}};const za={kernelName:a.SparseToDense,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{sparseIndices:i,sparseValues:m,defaultValue:n}=A,{outputShape:l}=t,{sliceRank:p,numUpdates:d,sliceSize:o,strides:r,outputSize:s}=a.backend_util.calculateShapes(m,i,l),Z=Xa(Y.bufferSync(i),Y.bufferSync(m),l,s,o,d,p,r,Y.data.get(n.dataId).values[0],!1);return Y.makeTensorInfo(l,Z.dtype,Z.values)}};const Ha={kernelName:a.SplitV,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:i}=A,{numOrSizeSplits:m,axis:n}=t,l=a.util.parseAxisParam(n,i.shape)[0],p=a.backend_util.prepareSplitSize(i,m,l),d=new Array(i.shape.length).fill(0),o=i.shape.slice();return p.map((e=>{const A=[...o];A[l]=e;const t=Ue({inputs:{x:i},backend:Y,attrs:{begin:d,size:A}});return d[l]+=e,t}))}},Ea={kernelName:a.Square,backendName:"cpu",kernelFunc:({inputs:e,backend:A})=>{const{x:Y}=e,t=A;i(Y,"square");const a=t.data.get(Y.dataId).values,m=new Float32Array(a.length);for(let e=0;e<a.length;++e){const A=a[e];m[e]=A*A}return{dataId:t.write(m,Y.shape,Y.dtype),shape:Y.shape,dtype:Y.dtype}}},_a=R(a.Step,((e,A)=>{const Y=A;return isNaN(e)?NaN:e>0?1:Y.alpha})),Ma={kernelName:a.Step,backendName:"cpu",kernelFunc:_a};const La={kernelName:a.StridedSlice,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m}=A,{begin:n,end:l,strides:p,beginMask:d,endMask:o,ellipsisMask:r,newAxisMask:s,shrinkAxisMask:Z}=t;i(m,"stridedSlice");const{nonStrided:N,$begin:j,$strides:h,size:W,newShape:u,outShape:V}=a.slice_util.sliceInfo(m.shape,n,l,p,d,o,r,s,Z),c=JA({inputs:{x:m},backend:Y,attrs:{shape:u}});let G;if(N){const e=Ue({inputs:{x:c},backend:Y,attrs:{begin:j,size:W}});G=JA({inputs:{x:e},backend:Y,attrs:{shape:V}}),Y.disposeIntermediateTensorInfo(e)}else if(V.some((e=>0===e)))G=Y.makeTensorInfo(V,m.dtype,[]);else{const e=Pe(V,Y.bufferSync(c),h,j);G=Y.makeTensorInfo(e.shape,e.dtype,e.values)}const F=JA({inputs:{x:G},backend:Y,attrs:{shape:V}});return Y.disposeIntermediateTensorInfo(c),Y.disposeIntermediateTensorInfo(G),F}};const Pa={kernelName:a.StringNGrams,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{separator:a,nGramWidths:i,leftPad:m,rightPad:n,padWidth:l,preserveShortSequences:p}=t,{data:d,dataSplits:o}=A,r=Y.data.get(d.dataId).values,s=Y.data.get(o.dataId).values,[Z,N]=$e(r,s,a,i,m,n,l,p);return[Y.makeTensorInfo([Z.length],"string",Z),Y.makeTensorInfo(o.shape,"int32",N)]}};const Qa={kernelName:a.StringSplit,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{skipEmpty:a}=t,{input:i,delimiter:m}=A;if("string"!==i.dtype)throw new Error("Input must be of datatype string");if(1!==i.shape.length)throw new Error(`Input must be a vector, got shape: ${i.shape}`);if(0!==m.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${m.shape}`);const n=Y.data.get(i.dataId).values,l=Y.data.get(m.dataId).values[0],[p,d,o]=AA(n,l,a),r=d.length;return[Y.makeTensorInfo([r,2],"int32",p),Y.makeTensorInfo([r],"string",d),Y.makeTensorInfo([2],"int32",new Int32Array(o))]}};const $a={kernelName:a.StringToHashBucketFast,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{numBuckets:a}=t,{input:i}=A;if("string"!==i.dtype)throw new Error("Input must be of datatype string");if(a<=0)throw new Error("Number of buckets must be at least 1");const m=YA(Y.data.get(i.dataId).values,a);return Y.makeTensorInfo(i.shape,"int32",m)}},ei=R(a.Tan,(e=>Math.tan(e))),Ai={kernelName:a.Tan,backendName:"cpu",kernelFunc:ei},Yi=R(a.Tanh,(e=>Math.tanh(e))),ti={kernelName:a.Tanh,backendName:"cpu",kernelFunc:Yi};const ai={kernelName:a.Tile,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:a}=A,{reps:m}=t;i(a,"tile");const n=nA(Y.bufferSync(a),m);return Y.makeTensorInfo(n.shape,n.dtype,n.values)}};const ii={kernelName:a.TopK,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:a}=A,{k:m,sorted:n}=t;i(a,"topk");const l=Y.data.get(a.dataId).values,[p,d]=dA(l,a.shape,a.dtype,m,n);return[Y.makeTensorInfo(p.shape,p.dtype,p.values),Y.makeTensorInfo(d.shape,d.dtype,d.values)]}};const mi={kernelName:a.Transform,backendName:"cpu",kernelFunc:function(e){const{inputs:A,attrs:Y,backend:t}=e,{image:i,transforms:m}=A,{interpolation:n,fillMode:l,fillValue:p,outputShape:d}=Y,[o,r,s,Z]=i.shape,[N,j]=null!=d?d:[r,s],h=[o,N,j,Z],W=a.util.computeStrides(i.shape),u=W[0],V=W[1],c=W[2],G=a.util.getTypedArrayFromDType(i.dtype,a.util.sizeFromShape(h));G.fill(p);const F=t.data.get(i.dataId).values,X=t.data.get(m.dataId).values;for(let e=0;e<o;++e){const A=1===m.shape[0]?X:X.subarray(8*e,8*e+8);for(let Y=0;Y<N;++Y)for(let t=0;t<j;++t)for(let a=0;a<Z;++a){let i;const m=A[6]*t+A[7]*Y+1;if(0===m)continue;const d=(A[0]*t+A[1]*Y+A[2])/m,o=(A[3]*t+A[4]*Y+A[5])/m,Z=ni(d,s,l),N=ni(o,r,l);switch(n){case"nearest":i=pi(F,r,s,u,V,c,e,N,Z,a,p);break;case"bilinear":i=di(F,r,s,u,V,c,e,N,Z,a,p);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${n}`)}G[e*u+Y*V+t*c+a]=i}return t.makeTensorInfo(h,i.dtype,G)}return{dataId:t.write(G,h,i.dtype),shape:i.shape,dtype:i.dtype}}};function ni(e,A,Y){switch(Y){case"reflect":return function(e,A){let Y=e;if(Y<0)if(A<=1)Y=0;else{const e=2*A;Y<e&&(Y=e*Math.trunc(-Y/e)+Y),Y=Y<-A?Y+e:-Y-1}else if(Y>A-1)if(A<=1)Y=0;else{const e=2*A;Y-=e*Math.trunc(Y/e),Y>=A&&(Y=e-Y-1)}return a.util.clamp(0,Y,A-1)}(e,A);case"wrap":return function(e,A){let Y=e;if(Y<0)if(A<=1)Y=0;else{const e=A-1;Y+=A*(Math.trunc(-Y/e)+1)}else if(Y>A-1)if(A<=1)Y=0;else{const e=A-1;Y-=A*Math.trunc(Y/e)}return a.util.clamp(0,Y,A-1)}(e,A);case"nearest":return function(e,A){return a.util.clamp(0,e,A-1)}(e,A);default:return function(e,A){return e}(e)}}function li(e,A,Y,t,a,i,m,n,l,p,d){return 0<=n&&n<A&&0<=l&&l<Y?e[m*t+n*a+l*i+p]:d}function pi(e,A,Y,t,a,i,m,n,l,p,d){return li(e,A,Y,t,a,i,m,Math.round(n),Math.round(l),p,d)}function di(e,A,Y,t,a,i,m,n,l,p,d){const o=Math.floor(n),r=Math.floor(l),s=o+1,Z=r+1;return(s-n)*((Z-l)*li(e,A,Y,t,a,i,m,o,r,p,d)+(l-r)*li(e,A,Y,t,a,i,m,o,Z,p,d))+(n-o)*((Z-l)*li(e,A,Y,t,a,i,m,s,r,p,d)+(l-r)*li(e,A,Y,t,a,i,m,s,Z,p,d))}const oi={kernelName:a.Unique,backendName:"cpu",kernelFunc:function(e){const{inputs:A,attrs:Y,backend:t}=e,{axis:a}=Y,{x:m}=A;i(m,"unique");const n=t.data.get(m.dataId).values,{outputValues:l,outputShape:p,indices:d}=oA(n,a,m.shape,m.dtype);return[t.makeTensorInfo(p,m.dtype,l),t.makeTensorInfo([d.length],"int32",d)]}};const ri={kernelName:a.Unpack,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{value:a}=A;let{axis:i}=t;i<0&&(i+=a.shape.length);const m=a.shape.length,n=a.shape[i],l=new Array(m-1);let p=0;for(let e=0;e<m;e++)e!==i&&(l[p++]=a.shape[e]);const d=new Array(m).fill(0),o=a.shape.slice();o[i]=1;const r=new Array(n);for(let e=0;e<r.length;e++){d[i]=e;const A=Ue({inputs:{x:a},backend:Y,attrs:{begin:d,size:o}});r[e]=JA({inputs:{x:A},backend:Y,attrs:{shape:l}}),Y.disposeIntermediateTensorInfo(A)}return r}};const si={kernelName:a.UnsortedSegmentSum,backendName:"cpu",kernelFunc:function(e){const{inputs:A,backend:Y,attrs:t}=e,{x:m,segmentIds:n}=A,{numSegments:l}=t;i(m,"unsortedSegmentSum");const p=[],d=[],o=m.shape.length-n.shape.length;let r=n;for(let e=0;e<o;++e){const A=MY({inputs:{input:r},backend:Y,attrs:{dim:e+1}});r=A,d.push(A)}for(let e=0;e<l;++e){const A=a.util.createScalarValue(e,"int32"),t=Y.makeTensorInfo([],"int32",A),i=q({inputs:{a:t,b:r},backend:Y}),n=W({inputs:{x:i},backend:Y,attrs:{dtype:"float32"}}),l=Ve({inputs:{a:n,b:m},backend:Y}),o=IY({inputs:{x:l},backend:Y,attrs:{axis:0,keepDims:!1}});p.push(o),d.push(t),d.push(i),d.push(n),d.push(l),d.push(o)}const s=na({inputs:p,backend:Y,attrs:{axis:0}});return d.forEach((e=>Y.disposeIntermediateTensorInfo(e))),s}},Zi=[RA,p,yA,SA,J,xA,TA,qA,IA,vA,UA,OA,CA,EA,MA,$A,eY,AY,YY,fA,tY,aY,iY,mY,u,S,lY,r,pY,sY,jY,hY,NY,uY,VY,WY,GY,XY,JY,gY,kY,fY,bY,yY,BY,SY,xY,qY,TY,$Y,wY,ZA,UY,I,_Y,U,LY,D,tt,it,mt,H,pt,dt,ot,rt,st,P,ee,N,Zt,oY,jt,Wt,Vt,jA,te,me,ct,de,Ft,gt,ft,yt,Bt,St,Ze,qt,It,vt,wt,Ut,Tt,Kt,Ot,he,Dt,Ht,Lt,ce,Fe,Qt,ea,Ya,ge,ta,ma,la,pa,ra,uA,ye,sa,h,Na,cA,FA,gA,ja,ha,Wa,ua,Va,ca,Fa,Te,Ja,ga,ba,ve,Ba,xa,qa,Ke,Mt,wa,Ua,Ka,Oa,Da,Ca,za,Ha,Ee,Ea,Le,Ma,La,Pa,Qa,$a,mA,vY,Ai,ti,ai,ii,Re,mi,oi,ri,si,ia];for(const e of Zi)(0,a.registerKernel)(e)},4933:(e,A,Y)=>{"use strict";Y.r(A),Y.d(A,{GraphModel:()=>Nt,deregisterOp:()=>f,loadGraphModel:()=>jt,registerOp:()=>g,version_converter:()=>ht});var t={};Y.r(t),Y.d(t,{json:()=>q});var a={};Y.r(a),Y.d(a,{json:()=>I});var i={};Y.r(i),Y.d(i,{json:()=>v});var m={};Y.r(m),Y.d(m,{json:()=>w});var n={};Y.r(n),Y.d(n,{json:()=>U});var l={};Y.r(l),Y.d(l,{json:()=>K});var p={};Y.r(p),Y.d(p,{json:()=>O});var d={};Y.r(d),Y.d(d,{json:()=>D});var o={};Y.r(o),Y.d(o,{json:()=>C});var r={};Y.r(r),Y.d(r,{json:()=>z});var s={};Y.r(s),Y.d(s,{json:()=>H});var Z={};Y.r(Z),Y.d(Z,{json:()=>E});var N={};Y.r(N),Y.d(N,{json:()=>_});var j={};Y.r(j),Y.d(j,{json:()=>M});var h={};Y.r(h),Y.d(h,{json:()=>L});var W={};Y.r(W),Y.d(W,{json:()=>P});var u={};Y.r(u),Y.d(u,{json:()=>Q});var V={};Y.r(V),Y.d(V,{json:()=>$});var c={};Y.r(c),Y.d(c,{json:()=>ee});var G,F,X=Y(5363);!function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(G||(G={})),function(e){let A;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(A=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(F||(F={}));const J={};function g(e,A){const Y={tfOpName:e,category:"custom",inputs:[],attrs:[],customExecutor:A};J[e]=Y}function k(e){return J[e]}function f(e){delete J[e]}function R(e,A,Y,t,a){const i=A.inputParams[e];if(i&&void 0!==i.inputIndexStart){const e=i.inputIndexStart,m=0===i.inputIndexEnd?void 0:void 0===i.inputIndexEnd?e+1:i.inputIndexEnd;if("tensor"===i.type)return b(A.inputNames[i.inputIndexStart],Y,t,a);if("tensors"===i.type){return A.inputNames.slice(e,m).map((e=>b(e,Y,t,a)))}const n=b(A.inputNames.slice(e)[0],Y,t,a),l=n.dataSync();return"number"===i.type?l[0]:X.util.toNestedArray(n.shape,l)}const m=A.attrParams[e];return m&&m.value}function b(e,A,Y,t){const[a,i]=S(e);if(null!=t){const e=t.getHashTableHandleByName(a);if(null!=e)return e}const m=Y.currentContextIds.find((e=>!!A[B(a,e)]));return void 0!==m?A[B(a,m)][i]:void 0}function y(e,A){const[Y,t,a]=S(e);return[B(Y,A&&A.currentContextId),t,a]}function B(e,A){return A?`${e}-${A}`:e}function S(e){const A=e.split(":");if(1===A.length)return[e,0,void 0];const Y=A[0],t=3===A.length?A[1]:void 0;return[Y,Number(A[A.length-1]),t]}function x(e,A,Y){let t=R("pad",e,A,Y);if("explicit"===t){t=R("explicitPaddings",e,A,Y);const a=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)a[e][0]=t[2*e],a[e][1]=t[2*e+1];return a}return t}function T(e){return e.kept?e:(0,X.clone)(e)}const q=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],I=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],v=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}],w=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],U=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],K=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],O=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],D=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],C=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}],z=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}],H=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],E=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}],_=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],M=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],L=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],P=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],Q=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],$=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],ee=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class Ae{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[t,a,i,m,n,l,p,d,o,r,s,Z,N,j,h,W,u,V,c].map((e=>e.json)));this.opMappers=e.reduce(((e,A)=>(e[A.tfOpName]=A,e)),{})}transformGraph(e,A={}){const Y=e.node,t=[],a=[],i=[],m=Y.reduce(((e,A)=>(e[A.name]=this.mapNode(A),A.op.startsWith("Placeholder")?t.push(e[A.name]):"Const"===A.op?a.push(e[A.name]):null!=A.input&&0!==A.input.length||i.push(e[A.name]),e)),{});let n=[];const l=[];let p={},d={};null!=A&&(p=this.mapSignatureEntries(A.inputs),d=this.mapSignatureEntries(A.outputs));const o=Object.keys(m);o.forEach((e=>{const A=m[e];A.inputNames.forEach(((e,Y)=>{const[t,,a]=y(e),i=m[t];if(null!=i.outputs){const e=i.outputs.indexOf(a);if(-1!==e){const a=`${t}:${e}`;A.inputNames[Y]=a}}A.inputs.push(i),i.children.push(A)}))})),0===Object.keys(d).length?o.forEach((e=>{const A=m[e];0===A.children.length&&l.push(A)})):Object.keys(d).forEach((e=>{const[A]=y(e),Y=m[A];null!=Y&&(Y.signatureKey=d[e],l.push(Y))})),Object.keys(p).length>0?Object.keys(p).forEach((e=>{const[A]=y(e),Y=m[A];Y&&(Y.signatureKey=p[e],n.push(Y))})):n=t;let r={};null!=e.library&&null!=e.library.function&&(r=e.library.function.reduce(((e,A)=>(e[A.signature.name]=this.mapFunction(A),e)),{}));const s={nodes:m,inputs:n,outputs:l,weights:a,placeholders:t,signature:A,functions:r};return i.length>0&&(s.initNodes=i),s}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((A,Y)=>(A[e[Y].name]=Y,A)),{})}mapNode(e){const A=k(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const Y={name:e.name,op:e.op,category:A.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.substr(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:A.outputs};return null!=A.inputs&&(Y.inputParams=A.inputs.reduce(((e,A)=>(e[A.name]={type:A.type,inputIndexStart:A.start,inputIndexEnd:A.end},e)),{})),null!=A.attrs&&(Y.attrParams=A.attrs.reduce(((A,Y)=>{const t=Y.type;let a;switch(Y.type){case"string":a=te(e.attr,Y.tfName,Y.defaultValue),void 0===a&&Y.tfDeprecatedName&&(a=te(e.attr,Y.tfDeprecatedName,Y.defaultValue));break;case"string[]":a=se(e.attr,Y.tfName,Y.defaultValue),void 0===a&&Y.tfDeprecatedName&&(a=se(e.attr,Y.tfDeprecatedName,Y.defaultValue));break;case"number":a=ie(e.attr,Y.tfName,Y.defaultValue||0),void 0===a&&Y.tfDeprecatedName&&(a=ie(e.attr,Y.tfDeprecatedName,Y.defaultValue));break;case"number[]":a=re(e.attr,Y.tfName,Y.defaultValue),void 0===a&&Y.tfDeprecatedName&&(a=re(e.attr,Y.tfDeprecatedName,Y.defaultValue));break;case"bool":a=ae(e.attr,Y.tfName,Y.defaultValue),void 0===a&&Y.tfDeprecatedName&&(a=ae(e.attr,Y.tfDeprecatedName,Y.defaultValue));break;case"bool[]":a=Ne(e.attr,Y.tfName,Y.defaultValue),void 0===a&&Y.tfDeprecatedName&&(a=Ne(e.attr,Y.tfDeprecatedName,Y.defaultValue));break;case"shape":a=oe(e.attr,Y.tfName,Y.defaultValue),void 0===a&&Y.tfDeprecatedName&&(a=oe(e.attr,Y.tfDeprecatedName,Y.defaultValue));break;case"shape[]":a=Ze(e.attr,Y.tfName,Y.defaultValue),void 0===a&&Y.tfDeprecatedName&&(a=Ze(e.attr,Y.tfDeprecatedName,Y.defaultValue));break;case"dtype":a=le(e.attr,Y.tfName,Y.defaultValue),void 0===a&&Y.tfDeprecatedName&&(a=le(e.attr,Y.tfDeprecatedName,Y.defaultValue));break;case"dtype[]":a=pe(e.attr,Y.tfName,Y.defaultValue),void 0===a&&Y.tfDeprecatedName&&(a=pe(e.attr,Y.tfDeprecatedName,Y.defaultValue));break;case"func":a=ne(e.attr,Y.tfName,Y.defaultValue),void 0===a&&Y.tfDeprecatedName&&(a=ne(e.attr,Y.tfDeprecatedName,Y.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${Y.type} for op: ${e.op}`)}return A[Y.name]={value:a,type:t},A}),{})),Y}mapFunction(e){const A=e.nodeDef,Y=[];let t={};null!=A&&(t=A.reduce(((e,A)=>(e[A.name]=this.mapNode(A),"Const"===A.op&&Y.push(e[A.name]),e)),{}));const a=[],i=[];e.signature.inputArg.forEach((e=>{const[A]=y(e.name),Y={name:A,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:me(e.type),type:"dtype"}},children:[]};Y.signatureKey=e.name,a.push(Y),t[A]=Y}));Object.keys(t).forEach((e=>{const A=t[e];A.inputNames.forEach(((e,Y)=>{const[a,,i]=y(e),m=t[a];if(null!=m.outputs){const e=m.outputs.indexOf(i);if(-1!==e){const t=`${a}:${e}`;A.inputNames[Y]=t}}A.inputs.push(m),m.children.push(A)}))}));const m=e.ret;e.signature.outputArg.forEach((e=>{const[A,Y]=y(m[e.name]),a=t[A];null!=a&&(a.defaultOutput=Y,i.push(a))}));const n=this.mapArgsToSignature(e);return{nodes:t,inputs:a,outputs:i,weights:Y,placeholders:[],signature:n}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,A)=>(e[A.name]=this.mapArgToTensorInfo(A),e)),{}),outputs:e.signature.outputArg.reduce(((A,Y)=>(A[Y.name]=this.mapArgToTensorInfo(Y,e.ret),A)),{})}}mapArgToTensorInfo(e,A){let Y=e.name;return null!=A&&(Y=A[Y]),{name:Y,dtype:e.type}}}function Ye(e,A){const Y=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const A=(0,X.env)().global;if(void 0!==A.atob)return A.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return A?Y:Y.toLowerCase()}function te(e,A,Y,t=!1){const a=e[A];return null!=a?Ye(a.s,t):Y}function ae(e,A,Y){const t=e[A];return t?t.b:Y}function ie(e,A,Y){const t=e[A]||{},a=null!=t.i?t.i:null!=t.f?t.f:Y;return"number"==typeof a?a:parseInt(a,10)}function me(e){switch("string"==typeof e&&(e=G[e]),e){case G.DT_FLOAT:return"float32";case G.DT_INT32:case G.DT_INT64:case G.DT_INT8:case G.DT_UINT8:return"int32";case G.DT_BOOL:return"bool";case G.DT_DOUBLE:return"float32";case G.DT_STRING:return"string";default:return null}}function ne(e,A,Y){const t=e[A];return t&&t.func?t.func.name:Y}function le(e,A,Y){const t=e[A];return t&&t.type?me(t.type):Y}function pe(e,A,Y){const t=e[A];return t&&t.list&&t.list.type?t.list.type.map((e=>me(e))):Y}function de(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function oe(e,A,Y){const t=e[A];return t&&t.shape?de(t.shape):Y}function re(e,A,Y){const t=e[A];return t?((t.list.f&&t.list.f.length?t.list.f:t.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):Y}function se(e,A,Y,t=!1){const a=e[A];return a&&a.list&&a.list.s?a.list.s.map((e=>Ye(e,t))):Y}function Ze(e,A,Y){const t=e[A];return t&&t.list&&t.list.shape?t.list.shape.map((e=>de(e))):Y}function Ne(e,A,Y){const t=e[A];return t&&t.list&&t.list.b?t.list.b:Y}class je{constructor(e,A,Y){this.node=e,this.tensorMap=A,this.context=Y,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,A)=>(e[A]=this.getAttr(A),e)),{}))}getInput(e){return b(e,this.tensorMap,this.context)}getAttr(e,A){const Y=this.node.rawAttrs[e];if(null!=Y.tensor)return b(e,this.tensorMap,this.context);if(null!=Y.i||null!=Y.f)return ie(this.node.rawAttrs,e,A);if(null!=Y.s)return te(this.node.rawAttrs,e,A);if(null!=Y.b)return ae(this.node.rawAttrs,e,A);if(null!=Y.shape)return oe(this.node.rawAttrs,e,A);if(null!=Y.type)return le(this.node.rawAttrs,e,A);if(null!=Y.list){if(null!=Y.list.i||null!=Y.list.f)return re(this.node.rawAttrs,e,A);if(null!=Y.list.s)return se(this.node.rawAttrs,e,A);if(null!=Y.list.shape)return Ze(this.node.rawAttrs,e,A);if(null!=Y.list.b)return Ne(this.node.rawAttrs,e,A);if(null!=Y.list.type)return pe(this.node.rawAttrs,e,A)}return A}}var he=Y(6407),We=Y(3135),ue=Y(5228),Ve=Y(4841),ce=Y(1274),Ge=Y(9322),Fe=Y(9165),Xe=Y(827),Je=Y(4513),ge=Y(632),ke=Y(3453),fe=Y(5265);var Re=Y(6235),be=Y(7839),ye=Y(1470),Be=Y(2421),Se=Y(1891),xe=Y(7037),Te=Y(9812),qe=Y(369),Ie=Y(6825),ve=Y(1661),we=Y(173),Ue=Y(2699),Ke=Y(3233),Oe=Y(4650),De=Y(4842),Ce=Y(3426),ze=Y(6943),He=Y(2597),Ee=Y(7474),_e=Y(4386),Me=Y(7370),Le=Y(9036),Pe=Y(766),Qe=Y(7409),$e=Y(7809),eA=Y(5503),AA=Y(625),YA=Y(9331),tA=Y(4434),aA=Y(3254),iA=Y(3694),mA=Y(3261),nA=Y(248),lA=Y(1869),pA=Y(1173),dA=Y(2279),oA=Y(3582),rA=Y(2634),sA=Y(9451),ZA=Y(9133),NA=Y(8151),jA=Y(6230);function hA(e,A,Y=""){if("number"!=typeof e&&"number"!=typeof A){X.util.assert(e.length===A.length,(()=>Y+` Shapes ${e} and ${A} must match`));for(let t=0;t<e.length;t++){const a=e[t],i=A[t];X.util.assert(a<0||i<0||a===i,(()=>Y+` Shapes ${e} and ${A} must match`))}}}function WA(e){return"number"!=typeof e&&!e.some((e=>e<0))}function uA(e,A,Y){let t=VA(e,Y);const a=!WA(t);if(a&&0===A.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${t}`);if(a&&A.forEach((e=>{t=VA(e.shape,t)})),!WA(t))throw new Error(`Non-fully-defined elementShape: ${t}`);return t}function VA(e,A){if("number"==typeof e)return A;if("number"==typeof A)return e;if(e.length!==A.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${A}`);const Y=[];for(let t=0;t<e.length;++t){const a=e[t],i=A[t];if(a>=0&&i>=0&&a!==i)throw new Error(`Incompatible shape during merge: ${e} vs. ${A}`);Y[t]=a>=0?a:i}return Y}class cA{constructor(e,A,Y,t,a,i,m){this.name=e,this.dtype=A,this.maxSize=Y,this.elementShape=t,this.identicalElementShapes=a,this.dynamicSize=i,this.clearAfterRead=m,this.tensors=[],this.closed_=!1,this.idTensor=(0,X.scalar)(0),(0,X.keep)(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((A=>{null!=e&&e.has(A.tensor.id)||A.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const A=this.tensors[e];if(A.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(A.cleared=!0),A.read=!0,A.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,A){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const Y=this.tensors[e]||{};if(A.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${A.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=A.shape),hA(this.elementShape,A.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),Y.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(Y.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);Y.tensor=A,(0,X.keep)(A),Y.written=!0,this.tensors[e]=Y}writeMany(e,A){if(e.length!==A.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${A.length}.`);e.forEach(((e,Y)=>this.write(e,A[Y])))}gather(e,A){if(A&&A!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${A}`);if(e)e=e.slice(0,this.size());else{e=[];for(let A=0;A<this.size();A++)e.push(A)}if(0===e.length)return(0,X.tensor)([],[0].concat(this.elementShape));const Y=this.readMany(e);return hA(this.elementShape,Y[0].shape,"TensorArray shape mismatch: "),(0,X.stack)(Y,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return(0,X.tensor)([],[0].concat(this.elementShape));const A=[];for(let e=0;e<this.size();e++)A.push(e);const Y=this.readMany(A);return hA(this.elementShape,Y[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${Y[0].shape})`),(0,X.concat)(Y,0)}scatter(e,A){if(A.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${A.dtype}`);if(e.length!==A.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${A.shape[0]}`);const Y=Math.max(...e);if(!this.dynamicSize&&Y>=this.maxSize)throw new Error(`Max index must be < array size (${Y}  vs. ${this.maxSize})`);this.writeMany(e,(0,X.unstack)(A,0))}split(e,A){if(A.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${A.dtype}`);let Y=0;const t=e.map((e=>(Y+=e,Y)));if(Y!==A.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${Y}, and tensor's shape is: ${A.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const a=0===Y?0:A.size/Y,i=[];(0,X.tidy)((()=>{A=(0,X.reshape)(A,[1,Y,a]);for(let Y=0;Y<e.length;++Y){const m=[0,0===Y?0:t[Y-1],0],n=[1,e[Y],a];i[Y]=(0,X.reshape)((0,X.slice)(A,m,n),this.elementShape)}return i}));const m=[];for(let A=0;A<e.length;A++)m[A]=A;this.writeMany(m,i)}}class GA{constructor(e,A,Y,t=-1){this.tensors=e,this.elementShape=A,this.elementDtype=Y,null!=e&&e.forEach((e=>{if(Y!==e.dtype)throw new Error(`Invalid data types; op elements ${Y}, but list elements ${e.dtype}`);hA(A,e.shape,"TensorList shape mismatch: "),(0,X.keep)(e)})),this.idTensor=(0,X.scalar)(0),this.maxNumElements=t,(0,X.keep)(this.idTensor)}get id(){return this.idTensor.id}copy(){return new GA([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((A=>{null!=e&&e.has(A.id)||A.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,A,Y=-1){if(A!==this.elementDtype)throw new Error(`Invalid data types; op elements ${A}, but list elements ${this.elementDtype}`);if(-1!==Y&&this.tensors.length!==Y)throw new Error(`Operation expected a list with ${Y} elements but got a list with ${this.tensors.length} elements.`);hA(e,this.elementShape,"TensorList shape mismatch: ");const t=uA(this.elementShape,this.tensors,e);return(0,X.tidy)((()=>{const e=this.tensors.map((e=>(0,X.reshape)(e,t)));return(0,X.stack)(e,0)}))}popBack(e,A){if(A!==this.elementDtype)throw new Error(`Invalid data types; op elements ${A}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const Y=uA(this.elementShape,this.tensors,e),t=this.tensors.pop();return hA(t.shape,e,"TensorList shape mismatch: "),(0,X.reshape)(t,Y)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(hA(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");(0,X.keep)(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,A,Y){if(Y!==this.elementDtype)throw new Error(`Invalid data types; op elements ${Y}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);hA(this.tensors[e].shape,A,"TensorList shape mismatch: ");const t=uA(this.elementShape,this.tensors,A);return(0,X.reshape)(this.tensors[e],t)}setItem(e,A){if(A.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${A.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);hA(this.elementShape,A.shape,"TensorList shape mismatch: "),(0,X.keep)(A),this.tensors[e]=A}gather(e,A,Y){if(A!==this.elementDtype)throw new Error(`Invalid data types; op elements ${A}, but list elements ${this.elementDtype}`);hA(this.elementShape,Y,"TensorList shape mismatch: "),e=e.slice(0,this.size());const t=uA(this.elementShape,this.tensors,Y);return 0===e.length?(0,X.tensor)([],[0].concat(t)):(0,X.tidy)((()=>{const A=e.map((e=>(0,X.reshape)(this.tensors[e],t)));return(0,X.stack)(A,0)}))}concat(e,A){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);hA(this.elementShape,A,"TensorList shape mismatch: ");const Y=uA(this.elementShape,this.tensors,A);return 0===this.size()?(0,X.tensor)([],[0].concat(Y)):(0,X.tidy)((()=>{const e=this.tensors.map((e=>(0,X.reshape)(e,Y)));return(0,X.concat)(e,0)}))}}const FA=async(e,A,Y)=>{switch(e.op){case"If":case"StatelessIf":{const t=R("thenBranch",e,A,Y),a=R("elseBranch",e,A,Y),i=R("cond",e,A,Y),m=R("args",e,A,Y);return(await i.data())[0]?Y.functionMap[t].executeFunctionAsync(m,Y.tensorArrayMap,Y.tensorListMap):Y.functionMap[a].executeFunctionAsync(m,Y.tensorArrayMap,Y.tensorListMap)}case"While":case"StatelessWhile":{const t=R("body",e,A,Y),a=R("cond",e,A,Y),i=R("args",e,A,Y),m=await Y.functionMap[a].executeFunctionAsync(i,Y.tensorArrayMap,Y.tensorListMap),n=i.map((e=>e.id));let l=await m[0].data();m.forEach((e=>{e.kept||-1!==n.indexOf(e.id)||e.dispose()}));let p=i;for(;l[0];){const e=p;p=await Y.functionMap[t].executeFunctionAsync(p,Y.tensorArrayMap,Y.tensorListMap);const A=p.map((e=>e.id));e.forEach((e=>{e.kept||-1!==n.indexOf(e.id)||-1!==A.indexOf(e.id)||e.dispose()}));const i=await Y.functionMap[a].executeFunctionAsync(p,Y.tensorArrayMap,Y.tensorListMap);l=await i[0].data(),i.forEach((e=>{e.kept||-1!==n.indexOf(e.id)||-1!==A.indexOf(e.id)||e.dispose()}))}return p}case"LoopCond":return[T(R("pred",e,A,Y))];case"Switch":{const t=R("pred",e,A,Y);let a=R("data",e,A,Y);return a.kept||(a=T(a)),(await t.data())[0]?[void 0,a]:[a,void 0]}case"Merge":{const t=e.inputNames.find((e=>void 0!==b(e,A,Y)));if(t){return[T(b(t,A,Y))]}return}case"Enter":{const t=R("frameName",e,A,Y),a=R("tensor",e,A,Y);return Y.enterFrame(t),[T(a)]}case"Exit":{const t=R("tensor",e,A,Y);return Y.exitFrame(),[T(t)]}case"NextIteration":{const t=R("tensor",e,A,Y);return Y.nextIteration(),[T(t)]}case"TensorArrayV3":{const t=R("size",e,A,Y),a=R("dtype",e,A,Y),i=R("elementShape",e,A,Y),m=R("dynamicSize",e,A,Y),n=R("clearAfterRead",e,A,Y),l=R("identicalElementShapes",e,A,Y),p=R("name",e,A,Y),d=new cA(p,a,t,i,l,m,n);return Y.addTensorArray(d),[d.idTensor,(0,X.scalar)(1)]}case"TensorArrayWriteV3":{const t=R("tensorArrayId",e,A,Y),a=R("index",e,A,Y),i=R("tensor",e,A,Y),m=Y.getTensorArray(t.id);return m.write(a,i),[m.idTensor]}case"TensorArrayReadV3":{const t=R("tensorArrayId",e,A,Y),a=R("index",e,A,Y);return[Y.getTensorArray(t.id).read(a)]}case"TensorArrayGatherV3":{const t=R("tensorArrayId",e,A,Y),a=R("indices",e,A,Y),i=R("dtype",e,A,Y);return[Y.getTensorArray(t.id).gather(a,i)]}case"TensorArrayScatterV3":{const t=R("tensorArrayId",e,A,Y),a=R("indices",e,A,Y),i=R("tensor",e,A,Y),m=Y.getTensorArray(t.id);return m.scatter(a,i),[m.idTensor]}case"TensorArrayConcatV3":{const t=R("tensorArrayId",e,A,Y),a=Y.getTensorArray(t.id),i=R("dtype",e,A,Y);return[a.concat(i)]}case"TensorArraySplitV3":{const t=R("tensorArrayId",e,A,Y),a=R("tensor",e,A,Y),i=R("lengths",e,A,Y),m=Y.getTensorArray(t.id);return m.split(i,a),[m.idTensor]}case"TensorArraySizeV3":{const t=R("tensorArrayId",e,A,Y),a=Y.getTensorArray(t.id);return[(0,X.scalar)(a.size(),"int32")]}case"TensorArrayCloseV3":{const t=R("tensorArrayId",e,A,Y),a=Y.getTensorArray(t.id);return a.clearAndClose(),[a.idTensor]}case"TensorListSetItem":{const t=R("tensorListId",e,A,Y),a=R("index",e,A,Y),i=R("tensor",e,A,Y),m=Y.getTensorList(t.id);return m.setItem(a,i),[m.idTensor]}case"TensorListGetItem":{const t=R("tensorListId",e,A,Y),a=R("index",e,A,Y),i=R("elementShape",e,A,Y),m=R("elementDType",e,A,Y);return[Y.getTensorList(t.id).getItem(a,i,m)]}case"TensorListScatterV2":case"TensorListScatter":{const t=R("indices",e,A,Y),a=function(e,A,Y,t){if(A.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${A.length} vs. ${e.shape[0]}`);const a=Math.max(...A);if(null!=t&&-1!==t&&a>=t)throw new Error(`Max index must be < array size (${a}  vs. ${t})`);const i=new GA([],Y,e.dtype,t),m=(0,X.unstack)(e,0);return A.forEach(((e,A)=>{i.setItem(e,m[A])})),i}(R("tensor",e,A,Y),t,R("elementShape",e,A,Y),R("numElements",e,A,Y));return Y.addTensorList(a),[a.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const t=R("elementShape",e,A,Y),a=R("elementDType",e,A,Y);let i;i="TensorListReserve"===e.op?"numElements":"maxNumElements";const m=function(e,A,Y){return new GA([],e,A,Y)}(t,a,R(i,e,A,Y));return Y.addTensorList(m),[m.idTensor]}case"TensorListGather":{const t=R("tensorListId",e,A,Y),a=R("indices",e,A,Y),i=R("elementShape",e,A,Y),m=R("elementDType",e,A,Y);return[Y.getTensorList(t.id).gather(a,m,i)]}case"TensorListStack":{const t=R("tensorListId",e,A,Y),a=R("elementShape",e,A,Y),i=R("elementDType",e,A,Y),m=R("numElements",e,A,Y);return[Y.getTensorList(t.id).stack(a,i,m)]}case"TensorListFromTensor":{const t=function(e,A,Y){const t=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==Y)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${Y}`);hA(e.shape.slice(1),A,"TensorList shape mismatch: ");const a=(0,X.unstack)(e);return new GA(a,A,t)}(R("tensor",e,A,Y),R("elementShape",e,A,Y),R("elementDType",e,A,Y));return Y.addTensorList(t),[t.idTensor]}case"TensorListConcat":{const t=R("tensorListId",e,A,Y),a=Y.getTensorList(t.id),i=R("dtype",e,A,Y),m=R("elementShape",e,A,Y);return[a.concat(i,m)]}case"TensorListPushBack":{const t=R("tensorListId",e,A,Y),a=R("tensor",e,A,Y),i=Y.getTensorList(t.id);return i.pushBack(a),[i.idTensor]}case"TensorListPopBack":{const t=R("tensorListId",e,A,Y),a=R("elementShape",e,A,Y),i=R("elementDType",e,A,Y);return[Y.getTensorList(t.id).popBack(a,i)]}case"TensorListSplit":{const t=R("tensor",e,A,Y),a=R("elementShape",e,A,Y),i=function(e,A,Y){let t=0;const a=A.map((e=>(t+=e,t)));if(t!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${t}, and tensor's shape is: ${e.shape}`);const i=VA(e.shape.slice(1),Y),m=0===t?0:e.size/t,n=(0,X.tidy)((()=>{const Y=[];e=(0,X.reshape)(e,[1,t,m]);for(let t=0;t<A.length;++t){const n=[0,0===t?0:a[t-1],0],l=[1,A[t],m];Y[t]=(0,X.reshape)((0,X.slice)(e,n,l),i)}return e.dispose(),Y})),l=new GA([],Y,e.dtype,A.length);for(let e=0;e<n.length;e++)l.setItem(e,n[e]);return l}(t,R("lengths",e,A,Y),a);return Y.addTensorList(i),[i.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};var XA=Y(1355),JA=Y(4794),gA=Y(2277),kA=Y(1405),fA=Y(4718),RA=Y(473),bA=Y(5176),yA=Y(1174),BA=Y(6877),SA=Y(1749),xA=Y(5020),TA=Y(557);function qA(e,A,Y){const[t,a]=R("fusedOps",e,A,Y),i="biasadd"===t,m=!i,n="prelu"===a,l="fusedbatchnorm"===t,p=R("numArgs",e,A,Y);if(i){if(n&&2!==p)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!n&&i&&1!==p)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const d=R("strides",e,A,Y),o=x(e,A,Y),r=R("dataFormat",e,A,Y).toUpperCase(),s=R("dilations",e,A,Y);let[Z,N]=R("args",e,A,Y);m&&(N=Z,Z=void 0);return{stride:d,pad:o,dataFormat:r,dilations:s,biasArg:Z,preluArg:N,activationFunc:a,leakyreluAlpha:R("leakyreluAlpha",e,A,Y)}}var IA=Y(4006),vA=Y(4135),wA=Y(686),UA=Y(6708),KA=Y(4917),OA=Y(7846),DA=Y(5002),CA=Y(7245),zA=Y(3596),HA=Y(9640),EA=Y(6577);var _A=Y(4885),MA=Y(2271),LA=Y(6380),PA=Y(6567);function QA(e,A,Y){return{boxes:R("boxes",e,A,Y),scores:R("scores",e,A,Y),maxOutputSize:R("maxOutputSize",e,A,Y),iouThreshold:R("iouThreshold",e,A,Y),scoreThreshold:R("scoreThreshold",e,A,Y),softNmsSigma:R("softNmsSigma",e,A,Y)}}var $A=Y(3243),eY=Y(9608);var AY=Y(6092),YY=Y(9494);class tY{constructor(e,A){this.keyDType=e,this.valueDType=A,this.handle=(0,X.scalar)(0),this.tensorMap=new Map,(0,X.keep)(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return YY.i(this.size(),"int32")}async import(e,A){this.checkKeyAndValueTensor(e,A);const Y=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),(0,X.tidy)((()=>{const e=(0,X.unstack)(A),t=Y.length,a=e.length;X.util.assert(t===a,(()=>`The number of elements doesn't match, keys has ${t} elements, the values has ${a} elements.`));for(let A=0;A<t;A++){const t=Y[A],a=e[A];(0,X.keep)(a),this.tensorMap.set(t,a)}return this.handle}))}async find(e,A){this.checkKeyAndValueTensor(e,A);const Y=await e.data();return(0,X.tidy)((()=>{const e=[];for(let t=0;t<Y.length;t++){const a=Y[t],i=this.findWithDefault(a,A);e.push(i)}return(0,X.stack)(e)}))}findWithDefault(e,A){const Y=this.tensorMap.get(e);return null!=Y?Y:A}checkKeyAndValueTensor(e,A){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(A.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${A.dtype}`)}}var aY=Y(6477),iY=Y(6500),mY=Y(636),nY=Y(7630),lY=Y(6573),pY=Y(624),dY=Y(2856),oY=Y(8651),rY=Y(5750),sY=Y(5912);var ZY=Y(8687),NY=Y(4653),jY=Y(9065);var hY=Y(7505),WY=Y(9648),uY=Y(682),VY=Y(1510),cY=Y(9758);var GY=Y(3307),FY=Y(5130),XY=Y(5735),JY=Y(5475),gY=Y(781),kY=Y(2998),fY=Y(47),RY=Y(7394),bY=Y(7405),yY=Y(3865),BY=Y(5746);var SY=Y(6884),xY=Y(4926),TY=Y(7486),qY=Y(2676),IY=Y(5158),vY=Y(9590),wY=Y(4968),UY=Y(2991),KY=Y(4136),OY=Y(7501),DY=Y(8644),CY=Y(3100),zY=Y(7494);var HY=Y(7020),EY=Y(8447),_Y=Y(3710),MY=Y(4415);var LY=Y(1300),PY=Y(1483),QY=Y(9682),$Y=Y(7918),et=Y(8441),At=Y(9112),Yt=Y(8247),tt=Y(8194);function at(e,A,Y,t){const a=((e,A,Y)=>{switch(e.category){case"arithmetic":return X.tidy((()=>((e,A,Y)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[he.I(R("a",e,A,Y),R("b",e,A,Y))];case"AddN":return[We.Q(R("tensors",e,A,Y))];case"FloorMod":case"Mod":return[ue.w(R("a",e,A,Y),R("b",e,A,Y))];case"Mul":return[Ve.d(R("a",e,A,Y),R("b",e,A,Y))];case"RealDiv":case"Div":return[ce.h(R("a",e,A,Y),R("b",e,A,Y))];case"DivNoNan":return[Ge.N(R("a",e,A,Y),R("b",e,A,Y))];case"FloorDiv":return[Fe.q(R("a",e,A,Y),R("b",e,A,Y))];case"Sub":return[Xe.l(R("a",e,A,Y),R("b",e,A,Y))];case"Minimum":return[Je.L(R("a",e,A,Y),R("b",e,A,Y))];case"Maximum":return[ge.g(R("a",e,A,Y),R("b",e,A,Y))];case"Pow":return[ke.s(R("a",e,A,Y),R("b",e,A,Y))];case"SquaredDifference":return[fe.$(R("a",e,A,Y),R("b",e,A,Y))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,A,Y)));case"basic_math":return X.tidy((()=>((e,A,Y)=>{switch(e.op){case"Abs":case"ComplexAbs":return[Re.W(R("x",e,A,Y))];case"Acos":return[be.K(R("x",e,A,Y))];case"Acosh":return[ye._(R("x",e,A,Y))];case"Asin":return[Be.Z(R("x",e,A,Y))];case"Asinh":return[Se.V(R("x",e,A,Y))];case"Atan":return[xe.z(R("x",e,A,Y))];case"Atan2":return[Te.f(R("x",e,A,Y),R("y",e,A,Y))];case"Atanh":return[qe.C(R("x",e,A,Y))];case"Ceil":return[Ie.m(R("x",e,A,Y))];case"Complex":return[ve.P(R("real",e,A,Y),R("imag",e,A,Y))];case"Cos":return[we.m(R("x",e,A,Y))];case"Cosh":return[Ue.f(R("x",e,A,Y))];case"Elu":return[Ke.p(R("x",e,A,Y))];case"Erf":return[Oe.q(R("x",e,A,Y))];case"Exp":return[De.Q(R("x",e,A,Y))];case"Expm1":return[Ce.t(R("x",e,A,Y))];case"Floor":return[ze.G(R("x",e,A,Y))];case"Log":return[He.c(R("x",e,A,Y))];case"Log1p":return[Ee.K(R("x",e,A,Y))];case"Imag":return[_e.a(R("x",e,A,Y))];case"Neg":return[Me.W(R("x",e,A,Y))];case"Reciprocal":return[Le.M(R("x",e,A,Y))];case"Real":return[Pe.k(R("x",e,A,Y))];case"Relu":return[Qe.U(R("x",e,A,Y))];case"Round":return[$e.N(R("x",e,A,Y))];case"Selu":return[eA.U(R("x",e,A,Y))];case"Sigmoid":return[AA.X(R("x",e,A,Y))];case"Sin":return[YA.O(R("x",e,A,Y))];case"Sign":return[tA.X(R("x",e,A,Y))];case"Sinh":return[aA.R(R("x",e,A,Y))];case"Softplus":return[iA.W(R("x",e,A,Y))];case"Sqrt":return[mA._(R("x",e,A,Y))];case"Square":return[nA.h(R("x",e,A,Y))];case"Tanh":return[lA.A(R("x",e,A,Y))];case"Tan":return[pA.O(R("x",e,A,Y))];case"ClipByValue":return[dA.i(R("x",e,A,Y),R("clipValueMin",e,A,Y),R("clipValueMax",e,A,Y))];case"Relu6":return[oA.b(R("x",e,A,Y))];case"Rsqrt":return[rA.b(b(e.inputNames[0],A,Y))];case"Prod":return[sA.W(R("x",e,A,Y),R("axes",e,A,Y))];case"LeakyRelu":return[ZA.h(R("x",e,A,Y),R("alpha",e,A,Y))];case"Prelu":return[NA.A(R("x",e,A,Y),R("alpha",e,A,Y))];case"IsNan":return[jA.i(b(e.inputNames[0],A,Y))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,A,Y)));case"control":return FA(e,A,Y);case"convolution":return X.tidy((()=>((e,A,Y)=>{switch(e.op){case"Conv1D":{const t=R("stride",e,A,Y),a=R("pad",e,A,Y),i=R("dataFormat",e,A,Y).toUpperCase(),m=R("dilation",e,A,Y);return[XA.P(R("x",e,A,Y),R("filter",e,A,Y),t,a,i,m)]}case"Conv2D":{const t=R("strides",e,A,Y),a=x(e,A,Y),i=R("dataFormat",e,A,Y).toUpperCase(),m=R("dilations",e,A,Y);return[JA.T(R("x",e,A,Y),R("filter",e,A,Y),[t[1],t[2]],a,i,[m[1],m[2]])]}case"_FusedConv2D":{const{stride:t,pad:a,dataFormat:i,dilations:m,biasArg:n,preluArg:l,activationFunc:p,leakyreluAlpha:d}=qA(e,A,Y);return[gA.conv2d({x:R("x",e,A,Y),filter:R("filter",e,A,Y),strides:[t[1],t[2]],pad:a,dataFormat:i,dilations:[m[1],m[2]],bias:n,activation:p,preluActivationWeights:l,leakyreluAlpha:d})]}case"FusedDepthwiseConv2dNative":{const{stride:t,pad:a,dataFormat:i,dilations:m,biasArg:n,preluArg:l,activationFunc:p,leakyreluAlpha:d}=qA(e,A,Y);return[gA.depthwiseConv2d({x:R("x",e,A,Y),filter:R("filter",e,A,Y),strides:[t[1],t[2]],pad:a,dataFormat:i,dilations:[m[1],m[2]],bias:n,activation:p,preluActivationWeights:l,leakyreluAlpha:d})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const t=R("outputShape",e,A,Y),a=R("strides",e,A,Y),i=x(e,A,Y);return[kA.b(R("x",e,A,Y),R("filter",e,A,Y),t,[a[1],a[2]],i)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const t=R("strides",e,A,Y),a=x(e,A,Y),i=R("dilations",e,A,Y),m=R("dataFormat",e,A,Y).toUpperCase();return[fA.B(R("input",e,A,Y),R("filter",e,A,Y),[t[1],t[2]],a,m,[i[1],i[2]])]}case"Conv3D":{const t=R("strides",e,A,Y),a=R("pad",e,A,Y),i=R("dataFormat",e,A,Y).toUpperCase(),m=R("dilations",e,A,Y);return[RA.p(R("x",e,A,Y),R("filter",e,A,Y),[t[1],t[2],t[3]],a,i,[m[1],m[2],m[3]])]}case"AvgPool":{const t=R("strides",e,A,Y),a=R("pad",e,A,Y),i=R("kernelSize",e,A,Y);return[bA.w(R("x",e,A,Y),[i[1],i[2]],[t[1],t[2]],a)]}case"MaxPool":{const t=R("strides",e,A,Y),a=R("pad",e,A,Y),i=R("kernelSize",e,A,Y);return[yA._(R("x",e,A,Y),[i[1],i[2]],[t[1],t[2]],a)]}case"MaxPoolWithArgmax":{const t=R("strides",e,A,Y),a=R("pad",e,A,Y),i=R("kernelSize",e,A,Y),m=R("includeBatchInIndex",e,A,Y),{result:n,indexes:l}=BA.I(R("x",e,A,Y),[i[1],i[2]],[t[1],t[2]],a,m);return[n,l]}case"AvgPool3D":{const t=R("strides",e,A,Y),a=R("pad",e,A,Y),i=R("kernelSize",e,A,Y);return[SA.u(R("x",e,A,Y),[i[1],i[2],i[3]],[t[1],t[2],t[3]],a)]}case"MaxPool3D":{const t=R("strides",e,A,Y),a=R("pad",e,A,Y),i=R("kernelSize",e,A,Y);return[xA.Y(R("x",e,A,Y),[i[1],i[2],i[3]],[t[1],t[2],t[3]],a)]}case"Dilation2D":{const t=R("strides",e,A,Y),a=R("pad",e,A,Y),i=R("dilations",e,A,Y),m=t[1],n=t[2],l=i[1],p=i[2];return[TA.W(R("x",e,A,Y),R("filter",e,A,Y),[m,n],a,[l,p],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,A,Y)));case"creation":return X.tidy((()=>((e,A,Y)=>{switch(e.op){case"Fill":{const t=R("shape",e,A,Y),a=R("dtype",e,A,Y),i=R("value",e,A,Y);return[IA.h(t,i,a)]}case"LinSpace":{const t=R("start",e,A,Y),a=R("stop",e,A,Y),i=R("num",e,A,Y);return[vA.S(t,a,i)]}case"Multinomial":{const t=R("logits",e,A,Y),a=R("numSamples",e,A,Y),i=R("seed",e,A,Y);return[wA.S(t,a,i)]}case"OneHot":{const t=R("indices",e,A,Y),a=R("depth",e,A,Y),i=R("onValue",e,A,Y),m=R("offValue",e,A,Y);return[UA.l(t,a,i,m)]}case"Ones":return[KA.i(R("shape",e,A,Y),R("dtype",e,A,Y))];case"OnesLike":return[OA.J(R("x",e,A,Y))];case"RandomUniform":return[DA.L(R("shape",e,A,Y),R("minval",e,A,Y),R("maxval",e,A,Y),R("dtype",e,A,Y))];case"Range":{const t=R("start",e,A,Y),a=R("stop",e,A,Y),i=R("step",e,A,Y);return[CA.w(t,a,i,R("dtype",e,A,Y))]}case"TruncatedNormal":{const t=R("shape",e,A,Y),a=R("mean",e,A,Y),i=R("stdDev",e,A,Y),m=R("seed",e,A,Y);return[zA.X(t,a,i,R("dtype",e,A,Y),m)]}case"Zeros":return[HA.l(R("shape",e,A,Y),R("dtype",e,A,Y))];case"ZerosLike":return[EA.P(R("x",e,A,Y))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,A,Y)));case"dynamic":return(async(e,A,Y)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:t,scores:a,maxOutputSize:i,iouThreshold:m,scoreThreshold:n,softNmsSigma:l}=QA(e,A,Y),p=await _A.BHj.nonMaxSuppressionWithScoreAsync(t,a,i,m,n,l);return[p.selectedIndices,p.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:t,scores:a,maxOutputSize:i,iouThreshold:m,scoreThreshold:n}=QA(e,A,Y),l=R("padToMaxOutputSize",e,A,Y),p=await _A.BHj.nonMaxSuppressionPaddedAsync(t,a,i,m,n,l);return[p.selectedIndices,p.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:t,scores:a,maxOutputSize:i,iouThreshold:m,scoreThreshold:n}=QA(e,A,Y);return[await _A.BHj.nonMaxSuppressionAsync(t,a,i,m,n)]}case"Where":{const t=MA.p(R("condition",e,A,Y),"bool"),a=[await LA.i(t)];return t.dispose(),a}case"ListDiff":return PA.O(R("x",e,A,Y),R("y",e,A,Y));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,A,Y);case"evaluation":return X.tidy((()=>((e,A,Y)=>{switch(e.op){case"TopKV2":{const t=R("x",e,A,Y),a=R("k",e,A,Y),i=R("sorted",e,A,Y),m=$A.h(t,a,i);return[m.values,m.indices]}case"Unique":{const t=R("x",e,A,Y),a=eY.T(t);return[a.values,a.indices]}case"UniqueV2":{const t=R("x",e,A,Y),a=R("axis",e,A,Y),i=eY.T(t,a);return[i.values,i.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,A,Y)));case"image":return X.tidy((()=>((e,A,Y)=>{switch(e.op){case"ResizeBilinear":{const t=R("images",e,A,Y),a=R("size",e,A,Y),i=R("alignCorners",e,A,Y),m=R("halfPixelCenters",e,A,Y);return[_A.BHj.resizeBilinear(t,[a[0],a[1]],i,m)]}case"ResizeNearestNeighbor":{const t=R("images",e,A,Y),a=R("size",e,A,Y),i=R("alignCorners",e,A,Y),m=R("halfPixelCenters",e,A,Y);return[_A.BHj.resizeNearestNeighbor(t,[a[0],a[1]],i,m)]}case"CropAndResize":{const t=R("image",e,A,Y),a=R("boxes",e,A,Y),i=R("boxInd",e,A,Y),m=R("cropSize",e,A,Y),n=R("method",e,A,Y),l=R("extrapolationValue",e,A,Y);return[_A.BHj.cropAndResize(t,a,i,m,n,l)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,A,Y)));case"graph":return X.tidy((()=>((e,A,Y)=>{switch(e.op){case"Const":return A[e.name];case"PlaceholderWithDefault":const t=R("default",e,A,Y);return[b(e.name,A,Y)||t];case"Placeholder":return[b(e.name,A,Y)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[T(R("x",e,A,Y))];case"IdentityN":return R("x",e,A,Y).map((e=>T(e)));case"Shape":return[AY.R(R("x",e,A,Y).shape,"int32")];case"ShapeN":return R("x",e,A,Y).map((e=>AY.R(e.shape)));case"Size":return[YY.i(R("x",e,A,Y).size,"int32")];case"Rank":return[YY.i(R("x",e,A,Y).rank,"int32")];case"NoOp":return[YY.i(1)];case"Print":const a=R("x",e,A,Y),i=R("data",e,A,Y),m=R("message",e,A,Y),n=R("summarize",e,A,Y);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(m);for(let e=0;e<i.length;e++)console.log(Array.prototype.slice.call(i[e].dataSync()).slice(0,n));return[a];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,A,Y)));case"logical":return X.tidy((()=>((e,A,Y)=>{switch(e.op){case"Equal":return[aY.D(R("a",e,A,Y),R("b",e,A,Y))];case"NotEqual":return[iY.Q(R("a",e,A,Y),R("b",e,A,Y))];case"Greater":return[mY.p(R("a",e,A,Y),R("b",e,A,Y))];case"GreaterEqual":return[nY.b(R("a",e,A,Y),R("b",e,A,Y))];case"Less":return[lY.d(R("a",e,A,Y),R("b",e,A,Y))];case"LessEqual":return[pY.z(R("a",e,A,Y),R("b",e,A,Y))];case"LogicalAnd":return[dY.H(R("a",e,A,Y),R("b",e,A,Y))];case"LogicalNot":return[oY.h(R("a",e,A,Y))];case"LogicalOr":return[rY.K(R("a",e,A,Y),R("b",e,A,Y))];case"Select":case"SelectV2":return[sY.a(R("condition",e,A,Y),R("a",e,A,Y),R("b",e,A,Y))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,A,Y)));case"matrices":return X.tidy((()=>((e,A,Y)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[ZY.O(R("a",e,A,Y),R("b",e,A,Y),R("transposeA",e,A,Y),R("transposeB",e,A,Y))];case"Einsum":return[NY.W(R("equation",e,A,Y),...R("tensors",e,A,Y))];case"Transpose":return[jY.p(R("x",e,A,Y),R("perm",e,A,Y))];case"_FusedMatMul":const[t,a]=R("fusedOps",e,A,Y),i="biasadd"===t,m="prelu"===a,n=R("numArgs",e,A,Y),l=R("leakyreluAlpha",e,A,Y);if(i){if(m&&2!==n)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!m&&1!==n)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[p,d]=R("args",e,A,Y);return[gA.matMul({a:R("a",e,A,Y),b:R("b",e,A,Y),transposeA:R("transposeA",e,A,Y),transposeB:R("transposeB",e,A,Y),bias:p,activation:a,preluActivationWeights:d,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,A,Y)));case"normalization":return X.tidy((()=>((e,A,Y)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[hY.t(R("x",e,A,Y),R("mean",e,A,Y),R("variance",e,A,Y),R("offset",e,A,Y),R("scale",e,A,Y),R("epsilon",e,A,Y))];case"LRN":return[WY.G(R("x",e,A,Y),R("radius",e,A,Y),R("bias",e,A,Y),R("alpha",e,A,Y),R("beta",e,A,Y))];case"Softmax":return[uY.X(R("x",e,A,Y))];case"LogSoftmax":return[VY.C(R("x",e,A,Y))];case"SparseToDense":return[cY.e(R("sparseIndices",e,A,Y),R("outputShape",e,A,Y),R("sparseValues",e,A,Y),R("defaultValue",e,A,Y))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,A,Y)));case"reduction":return X.tidy((()=>((e,A,Y)=>{switch(e.op){case"Max":{const t=R("axis",e,A,Y),a=R("keepDims",e,A,Y);return[GY.F(R("x",e,A,Y),t,a)]}case"Mean":{const t=R("axis",e,A,Y),a=R("keepDims",e,A,Y);return[FY.J(R("x",e,A,Y),t,a)]}case"Min":{const t=R("axis",e,A,Y),a=R("keepDims",e,A,Y);return[XY.V(R("x",e,A,Y),t,a)]}case"Sum":{const t=R("axis",e,A,Y),a=R("keepDims",e,A,Y);return[JY.S(R("x",e,A,Y),t,a)]}case"All":{const t=R("axis",e,A,Y),a=R("keepDims",e,A,Y);return[gY.$(R("x",e,A,Y),t,a)]}case"Any":{const t=R("axis",e,A,Y),a=R("keepDims",e,A,Y);return[kY.Y(R("x",e,A,Y),t,a)]}case"ArgMax":{const t=R("axis",e,A,Y);return[fY.N(R("x",e,A,Y),t)]}case"ArgMin":{const t=R("axis",e,A,Y);return[RY.v(R("x",e,A,Y),t)]}case"Prod":{const t=R("axis",e,A,Y),a=R("keepDims",e,A,Y);return[sA.W(R("x",e,A,Y),t,a)]}case"Cumsum":{const t=R("axis",e,A,Y),a=R("exclusive",e,A,Y),i=R("reverse",e,A,Y);return[bY.z(R("x",e,A,Y),t,a,i)]}case"Bincount":const t=R("x",e,A,Y),a=R("weights",e,A,Y),i=R("size",e,A,Y);return[yY.y(t,a,i)];case"DenseBincount":{const t=R("x",e,A,Y),a=R("weights",e,A,Y),i=R("size",e,A,Y),m=R("binaryOutput",e,A,Y);return[BY.p(t,a,i,m)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,A,Y)));case"slice_join":return X.tidy((()=>((e,A,Y)=>{switch(e.op){case"ConcatV2":case"Concat":{const t=R("n",e,A,Y),a=R("axis",e,A,Y);let i=R("tensors",e,A,Y);return i=i.slice(0,t),[SY.z(i,a)]}case"Gather":{const t=R("x",e,A,Y),a=R("indices",e,A,Y);return[xY.I(t,MA.p(a,"int32"),0)]}case"GatherV2":{const t=R("axis",e,A,Y),a=R("batchDims",e,A,Y),i=R("x",e,A,Y),m=R("indices",e,A,Y);return[xY.I(i,MA.p(m,"int32"),t,a)]}case"Reverse":{const t=R("dims",e,A,Y),a=[];for(let e=0;e<t.length;e++)t[e]&&a.push(e);const i=R("x",e,A,Y);return[TY.G(i,a)]}case"ReverseV2":{const t=R("axis",e,A,Y),a=R("x",e,A,Y);return[TY.G(a,t)]}case"Slice":{const t=R("begin",e,A,Y),a=R("size",e,A,Y);return[qY.t(R("x",e,A,Y),t,a)]}case"StridedSlice":{const t=R("begin",e,A,Y),a=R("end",e,A,Y),i=R("strides",e,A,Y),m=R("beginMask",e,A,Y),n=R("endMask",e,A,Y),l=R("ellipsisMask",e,A,Y),p=R("newAxisMask",e,A,Y),d=R("shrinkAxisMask",e,A,Y),o=R("x",e,A,Y);return[IY.N(o,t,a,i,m,n,l,p,d)]}case"Pack":return(0,X.tidy)((()=>{const t=R("axis",e,A,Y),a=R("tensors",e,A,Y),i=a[0].shape,m=vY.L(a[0]).shape,n=a.map((e=>{const A=X.util.arraysEqual(e.shape,i);if(!A&&!X.util.arraysEqual(vY.L(e).shape,m))throw new Error("the input tensors shape does not match");return A?e:wY.X(e,i)}));return[UY.k(n,t)]}));case"Unpack":{const t=R("axis",e,A,Y),a=R("tensor",e,A,Y);return KY.H(a,t)}case"Tile":{const t=R("reps",e,A,Y);return[OY.G(R("x",e,A,Y),t)]}case"Split":case"SplitV":{const t=R("axis",e,A,Y),a=R("numOrSizeSplits",e,A,Y),i=R("x",e,A,Y);return DY.V(i,a,t)}case"ScatterNd":{const t=R("indices",e,A,Y),a=R("values",e,A,Y),i=R("shape",e,A,Y);return[CY.s(t,a,i)]}case"GatherNd":{const t=R("x",e,A,Y),a=R("indices",e,A,Y);return[zY.d(t,a)]}case"SparseToDense":{const t=R("sparseIndices",e,A,Y),a=R("outputShape",e,A,Y),i=R("sparseValues",e,A,Y),m=R("defaultValue",e,A,Y);return[cY.e(t,i,a,i.dtype===m.dtype?m:MA.p(m,i.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,A,Y)));case"sparse":return X.tidy((()=>((e,A,Y)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:t,outputValues:a,emptyRowIndicator:i,reverseIndexMap:m}=_A.rVs.sparseFillEmptyRows(R("indices",e,A,Y),R("values",e,A,Y),R("denseShape",e,A,Y),R("defaultValue",e,A,Y));return[t,a,i,m]}case"SparseReshape":{const{outputIndices:t,outputShape:a}=_A.rVs.sparseReshape(R("inputIndices",e,A,Y),R("inputShape",e,A,Y),R("newShape",e,A,Y));return[t,a]}case"SparseSegmentMean":return[_A.rVs.sparseSegmentMean(R("data",e,A,Y),R("indices",e,A,Y),R("segmentIds",e,A,Y))];case"SparseSegmentSum":return[_A.rVs.sparseSegmentSum(R("data",e,A,Y),R("indices",e,A,Y),R("segmentIds",e,A,Y))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,A,Y)));case"spectral":return X.tidy((()=>((e,A,Y)=>{switch(e.op){case"FFT":return[HY.k(R("x",e,A,Y))];case"IFFT":return[EY.S(R("x",e,A,Y))];case"RFFT":return[_Y.Q(R("x",e,A,Y))];case"IRFFT":return[MY.w(R("x",e,A,Y))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,A,Y)));case"string":return X.tidy((()=>((e,A,Y)=>{switch(e.op){case"StringNGrams":{const{nGrams:t,nGramsSplits:a}=_A.Z_8.stringNGrams(R("data",e,A,Y),R("dataSplits",e,A,Y),R("separator",e,A,Y),R("nGramWidths",e,A,Y),R("leftPad",e,A,Y),R("rightPad",e,A,Y),R("padWidth",e,A,Y),R("preserveShortSequences",e,A,Y));return[t,a]}case"StringSplit":{const{indices:t,values:a,shape:i}=_A.Z_8.stringSplit(R("input",e,A,Y),R("delimiter",e,A,Y),R("skipEmpty",e,A,Y));return[t,a,i]}case"StringToHashBucketFast":return[_A.Z_8.stringToHashBucketFast(R("input",e,A,Y),R("numBuckets",e,A,Y))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,A,Y)));case"transformation":return X.tidy((()=>((e,A,Y)=>{switch(e.op){case"Cast":return[MA.p(R("x",e,A,Y),R("dtype",e,A,Y))];case"ExpandDims":{const t=R("axis",e,A,Y);return[LY.d(R("x",e,A,Y),t)]}case"Squeeze":{const t=R("axis",e,A,Y);return[vY.L(R("x",e,A,Y),t)]}case"Reshape":return[wY.X(R("x",e,A,Y),R("shape",e,A,Y))];case"MirrorPad":return[PY.V(R("x",e,A,Y),R("padding",e,A,Y),R("mode",e,A,Y))];case"PadV2":case"Pad":return[QY.v(R("x",e,A,Y),R("padding",e,A,Y),R("constantValue",e,A,Y))];case"SpaceToBatchND":{const t=R("blockShape",e,A,Y),a=R("paddings",e,A,Y);return[$Y.f(R("x",e,A,Y),t,a)]}case"BatchToSpaceND":{const t=R("blockShape",e,A,Y),a=R("crops",e,A,Y);return[et.E(R("x",e,A,Y),t,a)]}case"DepthToSpace":{const t=R("blockSize",e,A,Y),a=R("dataFormat",e,A,Y).toUpperCase();return[At.n(R("x",e,A,Y),t,a)]}case"BroadcastTo":return[Yt.U(R("x",e,A,Y),R("shape",e,A,Y))];case"BroadcastArgs":return[tt.X(R("s0",e,A,Y),R("s1",e,A,Y))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,A,Y)));case"hash_table":return(async(e,A,Y,t)=>{switch(e.op){case"HashTable":case"HashTableV2":{const a=R("keyDType",e,A,Y),i=R("valueDType",e,A,Y),m=new tY(a,i);return t.addHashTable(e.name,m),[m.handle]}case"LookupTableImport":case"LookupTableImportV2":{const a=R("tableHandle",e,A,Y,t),i=R("keys",e,A,Y),m=R("values",e,A,Y),n=t.getHashTableById(a.id);return[await n.import(i,m)]}case"LookupTableFind":case"LookupTableFindV2":{const a=R("tableHandle",e,A,Y,t),i=R("keys",e,A,Y),m=R("defaultValue",e,A,Y),n=t.getHashTableById(a.id);return[await n.find(i,m)]}case"LookupTableSize":case"LookupTableSizeV2":{const a=R("tableHandle",e,A,Y,t);return[t.getHashTableById(a.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,A,Y,t);case"custom":const a=k(e.op);if(a&&a.customExecutor)return a.customExecutor(new je(e,A,Y));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,A,Y);return X.util.isPromise(a)?a.then((e=>[].concat(e))):[].concat(a)}class it{constructor(e={},A={},Y={},t={}){this.weightMap=e,this.tensorArrayMap=A,this.tensorListMap=Y,this.functionMap=t,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,A){return{id:e,frameName:A,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let A=0;A<this.contexts.length-1;A++){const Y=this.contexts.slice(0,this.contexts.length-A);e.push(this.contextIdforContexts(Y))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const A in this.tensorArrayMap)this.tensorArrayMap[A].clearAndClose(e);for(const A in this.tensorListMap)this.tensorListMap[A].clearAndClose(e)}}function mt(e,A,Y,t){const a=new Set,i=[];let m=null,n=null;const l=new Set,p=Object.keys(e).map((e=>S(e)[0]));let d=[];null!=t&&(d=t.map((e=>S(e.name)[0])));const o=[...A];for(;o.length>0;){const e=o.pop();(dt(e)||ot(e)||rt(e))&&null==m&&(m=e,n=m.children.map((e=>e.name)).filter((e=>a.has(e)))),a.add(e.name),null==Y[e.name]&&(-1===p.indexOf(e.name)&&-1===d.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),o.push(e))})):i.push(e.name)))}return{inputs:e,outputs:A,usedNodes:a,missingInputs:i,dynamicNode:m,syncInputs:n}}const nt=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],lt=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],pt=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function dt(e){return nt.indexOf(e.op)>=0}function ot(e){return lt.indexOf(e.op)>=0}function rt(e){return pt.indexOf(e.op)>=0}class st{constructor(e,A){this.graph=e,this.parent=A,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((A=>{this._functionExecutorMap[A]=new st(e.functions[A],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const A=Object.keys(e).map((A=>e[A].map((e=>e.id))));this._weightIds=[].concat(...A),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const A=e.signatureKey||e.name;return e.defaultOutput?`${A}:${e.defaultOutput}`:A}))}get functions(){return Object.keys(this._functions).reduce(((e,A)=>(e[A]=this._functions[A].signature,e)),{})}getCompilationKey(e,A){const Y=e.map((e=>e.name)).sort(),t=A.map((e=>e.name)).sort();return Y.join(this.SEPERATOR)+"--"+t.join(this.SEPERATOR)}compile(e,A){const Y=mt(e,A,this.weightMap,this._initNodes),{missingInputs:t,dynamicNode:a,syncInputs:i}=Y;if(null!=a)throw new Error(`This execution contains the node '${a.name}', which has the dynamic op '${a.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${i}]`);if(t.length>0){const Y=A.map((e=>e.name)),a=Object.keys(e);throw new Error(`Cannot compute the outputs [${Y}] from the provided inputs [${a}]. Missing the following inputs: [${t}]`)}return function(e,A,Y){const{usedNodes:t,inputs:a}=Y,i=[],m=Object.keys(a).map((e=>S(e)[0])).map((A=>e.nodes[A])),n=e.initNodes;m.forEach((e=>{t.has(e.name)&&i.push(e)})),e.weights.forEach((e=>{t.has(e.name)&&i.push(e)})),null!=n&&n.forEach((e=>{t.has(e.name)&&i.push(e)}));const l=new Set,p=[];for(;i.length>0;){const e=i.pop();l.add(e.name),A[e.name]||p.push(e),e.children.forEach((e=>{!l.has(e.name)&&t.has(e.name)&&e.inputs.every((e=>l.has(e.name)))&&i.push(e)}))}return p}(this.graph,this.weightMap,Y)}execute(e,A){e=this.mapInputs(e);const Y=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),A=this.mapOutputs(A),this.checkOutputs(A);const t=Y.map((e=>this.graph.nodes[S(e)[0]])),a=A.map((e=>S(e)[0]));let i=a.map((e=>this.graph.nodes[e]));0===i.length&&(i=this._outputs);const m=this.getCompilationKey(t,i);let n=this.compiledMap.get(m);null==n&&(n=this.compile(e,i),this.compiledMap.set(m,n));const l={},p={};return(0,X.tidy)((()=>{const Y=new it(this.weightMap,l,p,this.functionExecutorMap),t=Object.assign({},this.weightMap);Object.keys(e).forEach((A=>{const[Y,a]=S(A),i=[];i[a]=e[A],t[Y]=i}));const i=this.getFrozenTensorIds(t),m={};for(let e=0;e<n.length;e++){const A=n[e];if(!t[A.name]){const e=at(A,t,Y,this._resourceManager);if(X.util.isPromise(e))throw new Error(`The execution of the op '${A.op}' returned a promise. Please use model.executeAsync() instead.`);t[A.name]=e,this.checkTensorForDisposal(A.name,A,t,Y,i,a,m)}}return null==this.parent&&Y.dispose(i),A.map((e=>b(e,t,Y)))}))}getFrozenTensorIds(e){const A=[].concat.apply([],Object.keys(e).map((A=>e[A])).map((e=>e.map((e=>e.id)))));return new Set(A)}checkTensorForDisposal(e,A,Y,t,a,i,m){"control"!==A.category&&-1===i.indexOf(e)&&(Y[e].forEach((e=>{null!=e&&(m[e.id]=(m[e.id]||0)+A.children.length)})),A.inputs.forEach((e=>{if("control"!==e.category){const A=function(e,A,Y){return A[B(e,Y.currentContextId)]}(e.name,Y,t);null!=A&&A.forEach((e=>{if(e&&!e.kept&&!a.has(e.id)){const A=m[e.id];1===A?(e.dispose(),delete m[e.id]):null!=A&&m[e.id]--}}))}})))}async executeAsync(e,A){return this._executeAsync(e,A)}async _executeAsync(e,A,Y=!1,t={},a={}){Y||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),A=this.mapOutputs(A),this.checkOutputs(A));const i=new it(this.weightMap,t,a,this.functionExecutorMap),m=await this.executeWithControlFlow(e,i,A,Y),n=A.map((e=>b(e,m,i))),l=n.map((e=>e.id)),p=Object.keys(e).map((A=>e[A].id)),d=new Set([...l,...p,...this.weightIds]);return Object.keys(m).forEach((e=>{m[e].forEach((e=>{!e||e.kept||e.isDisposed||d.has(e.id)||e.dispose()}))})),null==this.parent&&i.dispose(d),n}async executeFunctionAsync(e,A,Y){const t=e.reduce(((e,A,Y)=>(e[this.inputs[Y].name]=A,e)),{});return this._executeAsync(t,this.outputNodes,!0,A,Y)}async executeWithControlFlow(e,A,Y,t){const a=Object.keys(e),i=a.map((e=>this.graph.nodes[S(e)[0]])),m=Y.map((e=>S(e)[0]));let n=m.map((e=>this.graph.nodes[e]));0===n.length&&(n=this._outputs);const{usedNodes:l,missingInputs:p,dynamicNode:d,syncInputs:o}=mt(e,n,this.weightMap,this._initNodes),r=[...i,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:A.currentContext}))),s=Object.assign({},this.weightMap);Object.keys(e).forEach((A=>{const[Y,t]=S(A),a=[];a[t]=e[A],s[Y]=a}));const Z={},N=this.getFrozenTensorIds(s),j={};for(;r.length>0;){const e=this.processStack(i,r,A,s,j,N,m,Z,l);await Promise.all(e)}null!=d||t||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const h=n.filter((e=>!dt(e)&&!b(e.name,s,A))).map((e=>e.name));if(h.length>0){let e="";throw null!=d&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${o}]`),new Error(`Cannot compute the outputs [${h}] from the provided inputs [${a}]. Consider providing the following inputs: [${p}]. ${e}`)}return s}processStack(e,A,Y,t,a,i,m,n,l){const p=[];for(;A.length>0;){const e=A.pop();Y.currentContext=e.contexts;let d="";if("Enter"===e.node.op&&R("isConstant",e.node,t,Y)&&([d]=y(e.node.name,Y)),null==t[e.node.name]){const o=at(e.node,t,Y,this._resourceManager);d||([d]=y(e.node.name,Y));const r=Y.currentContext;X.util.isPromise(o)?p.push(o.then((p=>(t[d]=p,Y.currentContext=r,this.checkTensorForDisposal(d,e.node,t,Y,i,m,n),this.processChildNodes(e.node,A,Y,t,a,l),p)))):(t[d]=o,this.checkTensorForDisposal(d,e.node,t,Y,i,m,n),this.processChildNodes(e.node,A,Y,t,a,l))}else this.processChildNodes(e.node,A,Y,t,a,l)}return p}processChildNodes(e,A,Y,t,a,i){e.children.forEach((e=>{const[m]=y(e.name,Y);!a[m]&&i.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!b(e,t,Y)))&&(a[m]=!0,A.push({contexts:Y.currentContext,node:e})):e.inputNames.every((e=>!!b(e,t,Y)))&&(a[m]=!0,A.push({contexts:Y.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((A=>{const Y=e[A],[t]=S(A),a=this.graph.nodes[t];if(a.attrParams.shape&&a.attrParams.shape.value){const e=a.attrParams.shape.value,A=e.length===Y.shape.length&&Y.shape.every(((A,Y)=>-1===e[Y]||e[Y]===A));X.util.assert(A,(()=>`The shape of dict['${a.name}'] provided in model.execute(dict) must be [${e}], but was [${Y.shape}]`))}a.attrParams.dtype&&a.attrParams.dtype.value&&X.util.assert(Y.dtype===a.attrParams.dtype.value,(()=>`The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${Y.dtype}`))}))}mapInputs(e){const A={};for(const Y in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[Y]){A[this._signature.inputs[Y].name]=e[Y]}else A[Y]=e[Y];return A}checkInputs(e){const A=Object.keys(e).filter((e=>{const[A]=S(e);return null==this.graph.nodes[A]}));if(A.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${A}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){return this._signature.outputs[e].name}return e}),{})}checkOutputs(e){e.forEach((e=>{const[A]=S(e);if(!this.graph.nodes[A])throw new Error(`The output '${e}' is not found in the graph`)}))}}class Zt{constructor(e={},A={}){this.hashTableNameToHandle=e,this.hashTableMap=A}addHashTable(e,A){this.hashTableNameToHandle[e]=A.handle,this.hashTableMap[A.id]=A}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class Nt{constructor(e,A={}){this.modelUrl=e,this.loadOptions=A,this.version="n/a",null==A&&(this.loadOptions={}),this.resourceManager=new Zt}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=X.io.browserHTTPRequest(e,this.loadOptions);else{const A=X.io.getLoadHandlers(e,this.loadOptions);if(0===A.length)A.push(X.io.browserHTTPRequest(e,this.loadOptions));else if(A.length>1)throw new Error(`Found more than one (${A.length}) load handlers for URL '${[e]}'`);this.handler=A[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const A=this.artifacts.modelTopology;let Y;Y=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=Y,this.version=`${A.versions.producer}.${A.versions.minConsumer}`;const t=X.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new st(Ae.Instance.transformGraph(A,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(t),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const A=Ae.Instance.transformGraph(e.modelInitializer);this.initializer=new st(A),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,A){if("string"==typeof e){const A=X.io.getSaveHandlers(e);if(0===A.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(A.length>1)throw new Error(`Found more than one (${A.length}) save handlers for URL '${e}'`);e=A[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,A){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof X.Tensor||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((A,Y,t)=>(A[Y]=e[t],A)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,A){e=this.normalizeInputs(e),A=this.normalizeOutputs(A);const Y=this.executor.execute(e,A);return Y.length>1?Y:Y[0]}async executeAsync(e,A){e=this.normalizeInputs(e),A=this.normalizeOutputs(A);const Y=await this.executor.executeAsync(e,A);return Y.length>1?Y:Y[0]}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((A,Y)=>(A[Y]=[e[Y]],A)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function jt(e,A={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==A&&(A={}),A.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e=`${e}model.json?tfjs-format=file`);const Y=new Nt(e,A);return await Y.load(),Y}const ht="3.9.0"},8713:(e,A,Y)=>{"use strict";Y.d(A,{JL:()=>t,Zu:()=>a});class t{constructor(e,A){this.backend=e,this.dataMover=A,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,A){this.dataIdsCount++,this.data.set(e,A)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class a{refCount(e){return i("refCount")}incRef(e){return i("incRef")}timerAvailable(){return!0}time(e){return i("time")}read(e){return i("read")}readSync(e){return i("readSync")}numDataIds(){return i("numDataIds")}disposeData(e,A){return i("disposeData")}write(e,A,Y){return i("write")}move(e,A,Y,t,a){return i("move")}memory(){return i("memory")}floatPrecision(){return i("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return i("dispose")}}function i(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}},3337:(e,A,Y)=>{"use strict";function t(e,A,Y){const t=function(e,A,Y){return function(e,A,Y){let t=0,a=e.length,i=0,m=!1;for(;t<a;){i=t+(a-t>>>1);const n=Y(A,e[i]);n>0?t=i+1:(a=i,m=!n)}return m?t:-t-1}(e,A,Y||a)}(e,A,Y),i=t<0?-(t+1):t;e.splice(i,0,A)}function a(e,A){return e>A?1:e<A?-1:0}function i(e,A,Y,t,a){return l(e,A,Y,t,a,0)}function m(e,A,Y,t,a,i){return l(e,A,Y,t,a,0,!1,i,!0)}function n(e,A,Y,t,a,i){return l(e,A,Y,t,a,i,!0)}function l(e,A,Y,a,i,m,n=!1,l=!1,r=!1){const s=[];for(let e=0;e<A.length;e++)A[e]>i&&s.push({score:A[e],boxIndex:e,suppressBeginIndex:0});s.sort(o);const Z=m>0?-.5/m:0,N=[],j=[];for(;N.length<Y&&s.length>0;){const A=s.pop(),{score:Y,boxIndex:m,suppressBeginIndex:n}=A;if(Y<i)break;let l=!1;for(let Y=N.length-1;Y>=n;--Y){const t=p(e,m,N[Y]);if(t>=a){l=!0;break}if(A.score=A.score*d(a,Z,t),A.score<=i)break}A.suppressBeginIndex=N.length,l||(A.score===Y?(N.push(m),j.push(A.score)):A.score>i&&t(s,A,o))}const h=N.length,W=Y-h;l&&W>0&&(N.push(...new Array(W).fill(0)),j.push(...new Array(W).fill(0)));const u={selectedIndices:N};return n&&(u.selectedScores=j),r&&(u.validOutputs=h),u}function p(e,A,Y){const t=e.subarray(4*A,4*A+4),a=e.subarray(4*Y,4*Y+4),i=Math.min(t[0],t[2]),m=Math.min(t[1],t[3]),n=Math.max(t[0],t[2]),l=Math.max(t[1],t[3]),p=Math.min(a[0],a[2]),d=Math.min(a[1],a[3]),o=Math.max(a[0],a[2]),r=Math.max(a[1],a[3]),s=(n-i)*(l-m),Z=(o-p)*(r-d);if(s<=0||Z<=0)return 0;const N=Math.max(i,p),j=Math.max(m,d),h=Math.min(n,o),W=Math.min(l,r),u=Math.max(h-N,0)*Math.max(W-j,0);return u/(s+Z-u)}function d(e,A,Y){const t=Math.exp(A*Y*Y);return Y<=e?t:0}function o(e,A){return e.score-A.score||e.score===A.score&&A.boxIndex-e.boxIndex}Y.d(A,{GP:()=>i,qP:()=>m,pA:()=>n})},8333:(e,A,Y)=>{"use strict";Y.d(A,{Z:()=>a});var t=Y(2657);function a(e,A){const Y=[];for(let e=0;e<A.length;e++)A[e]&&Y.push(e);const a=(0,t.f)(e,"int32"),i=(0,t.f)([Y.length,e.length],"int32");for(let A=0;A<Y.length;A++){const t=a.indexToLoc(Y[A]),m=A*e.length;i.values.set(t,m)}return i.toTensor()}},7097:(e,A,Y)=>{"use strict";Y.d(A,{BV:()=>V,wv:()=>u});var t=Y(8713),a=Y(2885),i=Y(5938),m=Y(9121),n=Y(6151),l=Y(9122),p=Y(569);class d{constructor(e,A){this.backendTimer=e,this.logger=A,null==A&&(this.logger=new r)}profileKernel(e,A,Y){let t;const i=()=>{t=Y()};let m;const n=l.now();if(this.backendTimer.timerAvailable())m=this.backendTimer.time(i);else{i();for(const e of t)e.dataSync();m=Promise.resolve({kernelMs:l.now()-n})}if((0,a.OB)().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let A=0;A<t.length;A++){const Y=t[A];Y.data().then((A=>{o(A,Y.dtype,e)}))}return{kernelName:e,outputs:t,inputs:A,timeMs:m.then((e=>e.kernelMs)),extraInfo:m.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:A,outputs:Y,timeMs:t,inputs:a,extraInfo:i}=e;Y.forEach((e=>{Promise.all([e.data(),t,i]).then((Y=>{this.logger.logKernelProfile(A,e,Y[0],Y[1],a,Y[2])}))}))}}function o(e,A,Y){if("float32"!==A)return!1;for(let A=0;A<e.length;A++){const t=e[A];if(isNaN(t)||!isFinite(t))return console.warn(`Found ${t} in the result of '${Y}'`),!0}return!1}class r{logKernelProfile(e,A,Y,t,a,i){const m="number"==typeof t?p.oj(`${t}ms`,9):t.error,n=p.oj(e,25),l=A.rank,d=A.size,o=p.oj(A.shape.toString(),14);let r="";for(const e in a){const Y=a[e];if(null!=Y){const t=Y.shape||A.shape,a=t.length;r+=`${e}: ${a}D ${a>0?t:""} `}}console.log(`%c${n}\t%c${m}\t%c${l}D ${o}\t%c${d}\t%c${r}\t%c${i}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}var s=Y(4077),Z=Y(747),N=Y(4706);function j(e){return null!=e.kernelName}class h{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class W{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new h}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let A=0;A<e.length;A++){const Y=e[A];if(await this.initializeBackend(Y).success)return void await this.setBackend(Y)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:A}=this.initializeBackendsAndReturnBest();if(A)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:A}=this.initializeBackend(e);if(A)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,A,Y=1){return e in this.registryFactory?(N.Z(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:A,priority:Y},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:A,asyncInit:Y}=this.initializeBackend(e);if(!(Y?await A:A))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new d(this.backendInstance),!0}setupRegisteredKernels(){(0,n.tr)(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){(0,n.tr)(e).forEach((A=>{null!=A.disposeFunc&&A.disposeFunc(this.registry[e])}))}initializeBackend(e){const A=this.registryFactory[e];if(null==A)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const Y=A.factory();if(!Y||Y instanceof t.Zu||"function"!=typeof Y.then)return this.registry[e]=Y,{success:!0,asyncInit:!1};{const A=++this.pendingBackendInitId,t=Y.then((Y=>!(A<this.pendingBackendInitId)&&(this.registry[e]=Y,this.pendingBackendInit=null,!0))).catch((Y=>(A<this.pendingBackendInitId||(this.pendingBackendInit=null,N.Z(`Initialization of backend ${e} failed`),N.Z(Y.stack||Y.message)),!1)));return this.pendingBackendInit=t,{success:t,asyncInit:!0}}}catch(A){return N.Z(`Initialization of backend ${e} failed`),N.Z(A.stack||A.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,A)=>this.registryFactory[A].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let A=0;A<e.length;A++){const Y=e[A],{success:t,asyncInit:a}=this.initializeBackend(Y);if(a||t)return{name:Y,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,A){const Y=this.state.tensorInfo.get(A),t=Y.backend,a=this.readSync(A),i=t.refCount(A);t.disposeData(A,!0),Y.backend=e,e.move(A,a,Y.shape,Y.dtype,i),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,A){let Y,t=null;if(null==A){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");A=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof A)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");t=e}return this.scopedRun((()=>this.startScope(t)),(()=>this.endScope(Y)),(()=>(Y=A(),Y instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),Y)))}scopedRun(e,A,Y){e();try{const e=Y();return A(),e}catch(e){throw A(),e}}nextTensorId(){return W.nextTensorId++}nextVariableId(){return W.nextVariableId++}clone(e){const A=V.runKernel(m.iJ,{x:e}),Y={x:e};return this.addTapeNode(this.state.activeScope.name,Y,[A],(e=>({x:()=>{const A={x:e},Y={dtype:"float32"};return V.runKernel(m.RF,A,Y)}})),[],{}),A}runKernel(e,A,Y){null==this.backendName&&this.backend;if(!(null!=(0,n.pI)(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:A,attrs:Y})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,A,Y){const t=this.backend.numDataIds();let a=0;Y.forEach((e=>{a+="complex64"===e.dtype?3:1}));const i=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],m=t-A-a-i;if(m>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${m} data ids) after running '${e}'`)}runKernelFunc(e){let A,Y=[];const t=this.isTapeOn(),a=this.state.numBytes,i=this.state.numTensors;let m,l;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const d=j(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(j(e)){const{kernelName:A,inputs:a,attrs:i}=e;null==this.backendName&&this.backend;const d=(0,n.pI)(A,this.backendName);p.hu(null!=d,(()=>`Cannot find registered kernel '${A}' for backend '${this.backendName}'`)),m=()=>{const e=this.backend.numDataIds();l=d.kernelFunc({inputs:a,attrs:i,backend:this.backend});const m=Array.isArray(l)?l:[l];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(A,e,m);const n=m.map((e=>{if(null!=e.rank)return e;const{dataId:A,shape:Y,dtype:t}=e;return this.makeTensorFromDataId(A,Y,t)}));if(t){const e=this.getTensorsForGradient(A,a,n);Y=this.saveTensorsForBackwardMode(e)}return n}}else{const{forwardFunc:A}=e,a=e=>{t&&(Y=e.map((e=>this.keep(this.clone(e)))))};m=()=>{const e=this.backend.numDataIds();l=this.tidy((()=>A(this.backend,a)));const Y=Array.isArray(l)?l:[l];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(d,e,Y),Y}}const{inputs:o,attrs:r}=e,s=j(e)?null:e.backwardsFunc;let Z;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(Z=this.profiler.profileKernel(d,o,(()=>m())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(Z),A=Z.outputs):A=m()})),t&&this.addTapeNode(d,o,A,s,Y,r),this.state.profiling&&this.state.activeProfile.kernels.push({name:d,bytesAdded:this.state.numBytes-a,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-i,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(o).map((e=>null!=o[e]?o[e].shape:null)),outputShapes:A.map((e=>e.shape)),kernelTimeMs:Z.timeMs,extraInfo:Z.extraInfo}),Array.isArray(l)?A:A[0]}saveTensorsForBackwardMode(e){const A=e.map((e=>this.keep(this.clone(e))));return A}getTensorsForGradient(e,A,Y){const t=(0,n.uk)(e);if(null!=t){const e=t.inputsToSave||[],a=t.outputsToSave||[];let i;t.saveAllInputs?(p.hu(Array.isArray(A),(()=>"saveAllInputs is true, expected inputs to be an array.")),i=Object.keys(A).map((e=>A[e]))):i=e.map((e=>A[e]));const m=Y.filter(((e,A)=>a[A]));return i.concat(m)}return[]}makeTensor(e,A,Y,t){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");Y=Y||"float32",t=t||this.backend;let a=e;"string"===Y&&p.HD(e[0])&&(a=e.map((e=>l.encodeString(e))));const i=t.write(a,A,Y),m=new s.es(A,Y,i,this.nextTensorId());if(this.trackTensor(m,t),"string"===Y){const e=this.state.tensorInfo.get(i),A=(0,p.Ub)(a);this.state.numBytes+=A-e.bytes,e.bytes=A}return m}makeTensorFromDataId(e,A,Y,t){Y=Y||"float32";const a=new s.es(A,Y,e,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,A=!0,Y,t){Y=Y||this.nextVariableId().toString(),null!=t&&t!==e.dtype&&(e=e.cast(t));const a=new s._w(e,A,Y,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw new Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,A){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let Y=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(Y=e.size*p.bT(e.dtype)),this.state.numBytes+=Y,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:A||this.backend,dtype:e.dtype,shape:e.shape,bytes:Y})),e instanceof s._w||this.track(e)}incRef(e,A){this.trackTensor(e,A),this.backend.incRef(e.dataId)}removeDataId(e,A){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===A&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const A=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=A.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const A=e.size*p.bT(e.dtype);this.state.numBytes-=A}A.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,A.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const A=this.state.registeredVariables[e];this.disposeVariable(A)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const A=this.state.numBytes,Y=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-A,this.state.activeProfile.newTensors=this.state.numTensors-Y;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,A,Y,t,a,i){const m={id:this.state.nextTapeNodeId++,kernelName:e,inputs:A,outputs:Y,saved:a},l=(0,n.uk)(e);null!=l&&(t=l.gradFunc),null!=t&&(m.gradient=e=>(e=e.map(((e,A)=>{if(null==e){const e=Y[A],t=p.wT(e.size,e.dtype);return this.makeTensor(t,e.shape,e.dtype)}return e})),t(e.length>1?e:e[0],a,i))),this.state.activeTape.push(m)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const A={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(A.name=e),this.state.scopeStack.push(A),this.state.activeScope=A}endScope(e){const A=(0,Z.getTensorsInContainer)(e),Y=new Set(A.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const A=this.state.activeScope.track[e];A.kept||Y.has(A.id)||A.dispose()}const t=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],A.forEach((e=>{e.kept||e.scopeId!==t.id||this.track(e)}))}gradients(e,A,Y,t=!1){if(p.hu(A.length>0,(()=>"gradients() received an empty list of xs.")),null!=Y&&"float32"!==Y.dtype)throw new Error(`dy must have 'float32' dtype, but has '${Y.dtype}'`);const a=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));p.hu(a instanceof s.es,(()=>"The result y returned by f() must be a tensor."));const i=function(e,A,Y){const t={},a={};for(let e=0;e<A.length;e++)t[A[e].id]=!0;for(let Y=0;Y<e.length;Y++){const i=e[Y],m=i.inputs;for(const e in m){const Y=m[e];let n=!1;for(let e=0;e<A.length;e++)if(t[Y.id]){i.outputs.forEach((e=>t[e.id]=!0)),n=!0,a[i.id]=!0;break}if(n)break}}const i={};i[Y.id]=!0;const m={};for(let A=e.length-1;A>=0;A--){const Y=e[A],t=Y.inputs;for(let e=0;e<Y.outputs.length;e++)if(i[Y.outputs[e].id]){for(const e in t)i[t[e].id]=!0,m[Y.id]=!0;break}}const n=[];for(let A=0;A<e.length;A++){const Y=e[A];if(a[Y.id]&&m[Y.id]){const e={};for(const A in Y.inputs){const a=Y.inputs[A];t[a.id]&&(e[A]=a)}const A=Object.assign({},Y);A.inputs=e,A.outputs=Y.outputs,n.push(A)}}return n}(this.state.activeTape,A,a);if(!t&&0===i.length&&A.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[a.id]=null==Y?function(e){const A=(0,p.p8)((0,p.NA)(e),"float32");return V.makeTensor(A,e,"float32")}(a.shape):Y,function(e,A,Y,t){for(let a=A.length-1;a>=0;a--){const i=A[a],m=[];if(i.outputs.forEach((A=>{const Y=e[A.id];null!=Y?m.push(Y):m.push(null)})),null==i.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${i.kernelName}.`);const n=i.gradient(m);for(const A in i.inputs){if(!(A in n))throw new Error(`Cannot backprop through input ${A}. Available gradients found: ${Object.keys(n)}.`);const a=Y((()=>n[A]()));if("float32"!==a.dtype)throw new Error(`Error in gradient for op ${i.kernelName}. The gradient of input ${A} must have 'float32' dtype, but has '${a.dtype}'`);const m=i.inputs[A];if(!p.cO(a.shape,m.shape))throw new Error(`Error in gradient for op ${i.kernelName}. The gradient of input '${A}' has shape '${a.shape}', which does not match the shape of the input '${m.shape}'`);if(null==e[m.id])e[m.id]=a;else{const A=e[m.id];e[m.id]=t(A,a),A.dispose()}}}}(e,i,(e=>this.tidy(e)),c);const t=A.map((A=>e[A.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const A of e.saved)A.dispose()})),this.state.activeTape=null),{value:a,grads:t}}))}customGrad(e){return p.hu(p.mf(e),(()=>"The f passed in customGrad(f) must be a function.")),(...A)=>{let Y;p.hu(A.every((e=>e instanceof s.es)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const t={};A.forEach(((e,A)=>{t[A]=e}));return this.runKernelFunc({forwardFunc:(t,a)=>(Y=e(...A,a),p.hu(Y.value instanceof s.es,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),p.hu(p.mf(Y.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),Y.value),backwardsFunc:(e,t)=>{const a=Y.gradFunc(e,t),i=Array.isArray(a)?a:[a];p.hu(i.length===A.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),p.hu(i.every((e=>e instanceof s.es)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const m={};return i.forEach(((e,A)=>{m[A]=()=>e})),m},inputs:t})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const A=(0,l.now)(),Y=await this.backend.time(e);return Y.wallMs=(0,l.now)()-A,Y}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new h;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function u(){const e=(0,i.D)();if(null==e._tfengine){const A=new a.qA(e);e._tfengine=new W(A)}return(0,a.iG)(e._tfengine.ENV),(0,s.Vi)((()=>e._tfengine)),e._tfengine}W.nextTensorId=0,W.nextVariableId=0;const V=u();function c(e,A){const Y={a:e,b:A};return V.runKernel(m.mm,Y)}},2885:(e,A,Y)=>{"use strict";Y.d(A,{qA:()=>m,OB:()=>l,Vi:()=>p,iG:()=>d});var t=Y(569),a=Y(4706);const i="tfjsflags";class m{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=n,this.populateURLFlags()}setPlatform(e,A){null!=this.platform&&a.Z(`Platform ${this.platformName} has already been set. Overwriting the platform with ${A}.`),this.platformName=e,this.platform=A}registerFlag(e,A,Y){if(this.flagRegistry[e]={evaluationFn:A,setHook:Y},null!=this.urlFlags[e]){const A=this.urlFlags[e];a.Z(`Setting feature override from URL ${e}: ${A}.`),this.set(e,A)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const A=this.evaluateFlag(e);if((0,t.tI)(A))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=A,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,A){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=A,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(A)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if(i in e){e.tfjsflags.split(",").forEach((e=>{const[A,Y]=e.split(":");this.urlFlags[A]=function(e,A){if("true"===(A=A.toLowerCase())||"false"===A)return"true"===A;if(""+ +A===A)return+A;throw new Error(`Could not parse value flag value ${A} for flag ${e}.`)}(A,Y)}))}}}function n(e){const A={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...Y)=>(function(e,A,Y){e[decodeURIComponent(A)]=decodeURIComponent(Y||"")}(A,Y[0],Y[1]),Y.join("=")))),A}function l(){return p}let p=null;function d(e){p=e}},5938:(e,A,Y)=>{"use strict";let t;function a(){if(null==t){let e;if("undefined"!=typeof window)e=window;else if("undefined"!=typeof global)e=global;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}t=e}return t}function i(e,A){const Y=function(){const e=a();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(Y.has(e))return Y.get(e);{const t=A();return Y.set(e,t),Y.get(e)}}Y.d(A,{D:()=>a,R:()=>i})},4368:(e,A,Y)=>{"use strict";Y.d(A,{G4:()=>n,R:()=>l,cF:()=>p,MX:()=>d,N8:()=>o,SR:()=>r,sq:()=>s,N5:()=>Z,lu:()=>N,B9:()=>j,Cn:()=>h,XV:()=>W,CQ:()=>u,Cd:()=>V,N_:()=>c,cj:()=>G,x3:()=>F,ze:()=>X,jq:()=>J,y3:()=>g,VY:()=>k});var t=Y(7097),a=Y(2885),i=Y(4077),m=Y(747);function n(){(0,a.OB)().set("PROD",!0)}function l(){(0,a.OB)().set("DEBUG",!0)}function p(){(0,a.OB)().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function d(e){(0,a.OB)().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function o(){t.BV.disposeVariables()}function r(){return t.BV}function s(){return t.BV.memory()}function Z(e){return t.BV.profile(e)}function N(e,A){return t.BV.tidy(e,A)}function j(e){(0,m.getTensorsInContainer)(e).forEach((e=>e.dispose()))}function h(e){return t.BV.keep(e)}function W(e){return t.BV.time(e)}function u(e){return t.BV.setBackend(e)}function V(){return t.BV.ready()}function c(){return t.BV.backendName}function G(e){t.BV.removeBackend(e)}function F(e){return t.BV.findBackend(e)}function X(e){return t.BV.findBackendFactory(e)}function J(e,A,Y=1){return t.BV.registerBackend(e,A,Y)}function g(){return t.BV.backend}function k(e,A){(0,a.OB)().setPlatform(e,A)}(0,i.FZ)(d)},633:(e,A,Y)=>{"use strict";Y.d(A,{cb:()=>r,pn:()=>o,h7:()=>p,fN:()=>d,UQ:()=>n,ti:()=>l});var t=Y(7097),a=Y(4077),i=Y(3740),m=Y(569);function n(e){return m.hu(m.mf(e),(()=>"The f passed in grad(f) must be a function")),(A,Y)=>{const a=(0,i._1)(A,"x","tf.grad","string_or_numeric"),n=null!=Y?(0,i._1)(Y,"dy","tf.grad"):null;return t.BV.tidy((()=>{const{value:A,grads:Y}=t.BV.gradients((()=>e(a)),[a],n);return null!=n&&m.k5(A.shape,n.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),s(Y),Y[0]}))}}function l(e){return m.hu(m.mf(e),(()=>"The f passed in grads(f) must be a function")),(A,Y)=>{m.hu(Array.isArray(A),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const a=(0,i.sI)(A,"args","tf.grads","string_or_numeric"),n=null!=Y?(0,i._1)(Y,"dy","tf.grads"):null;return t.BV.tidy((()=>{const{value:A,grads:Y}=t.BV.gradients((()=>e(...a)),a,n);return null!=n&&m.k5(A.shape,n.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),s(Y),Y}))}}function p(e){return m.hu(m.mf(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(A,Y)=>{m.hu(A instanceof a.es,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),m.hu(null==Y||Y instanceof a.es,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:i,value:n}=t.BV.gradients((()=>e(A)),[A],Y);return s(i),{grad:i[0],value:n}}}function d(e){return m.hu(m.mf(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(A,Y)=>{m.hu(Array.isArray(A)&&A.every((e=>e instanceof a.es)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),m.hu(null==Y||Y instanceof a.es,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const i=t.BV.gradients((()=>e(...A)),A,Y);return null!=Y&&m.k5(i.value.shape,Y.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),s(i.grads),i}}function o(e,A){m.hu(m.mf(e),(()=>"The f passed in variableGrads(f) must be a function")),m.hu(null==A||Array.isArray(A)&&A.every((e=>e instanceof a._w)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const Y=null!=A;if(!Y){A=[];for(const e in t.BV.registeredVariables)A.push(t.BV.registeredVariables[e])}const i=Y?A.filter((e=>!e.trainable)):null,n=A.length;A=A.filter((e=>e.trainable)),m.hu(A.length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${n} variables is trainable.`));const{value:l,grads:p}=t.BV.gradients(e,A,null,!0);m.hu(p.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),m.hu(0===l.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${l.rank} tensor`));const d={};return A.forEach(((e,A)=>{null!=p[A]&&(d[e.name]=p[A])})),null!=i&&i.forEach((e=>d[e.name]=null)),{value:l,grads:d}}function r(e){return t.BV.customGrad(e)}function s(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}},5363:(e,A,Y)=>{"use strict";Y.r(A),Y.d(A,{Abs:()=>Ee.SY,Acos:()=>Ee.VG,Acosh:()=>Ee.Sp,AdadeltaOptimizer:()=>EA,AdagradOptimizer:()=>MA,AdamOptimizer:()=>QA,AdamaxOptimizer:()=>AY,Add:()=>Ee.mm,AddN:()=>Ee.Xz,All:()=>Ee.oT,Any:()=>Ee.IK,ArgMax:()=>Ee.sJ,ArgMin:()=>Ee.aJ,Asin:()=>Ee.M2,Asinh:()=>Ee.qw,Atan:()=>Ee.jM,Atan2:()=>Ee.QC,Atanh:()=>Ee.Oy,AvgPool:()=>Ee.Jh,AvgPool3D:()=>Ee._k,AvgPool3DGrad:()=>Ee.IM,AvgPoolGrad:()=>Ee.RO,BatchMatMul:()=>Ee.XL,BatchToSpaceND:()=>Ee.zw,Bincount:()=>Ee.zv,BroadcastArgs:()=>Ee.eE,BroadcastTo:()=>Ee.Ly,Cast:()=>Ee.RF,Ceil:()=>Ee.gJ,ClipByValue:()=>Ee.xn,Complex:()=>Ee.Zz,ComplexAbs:()=>Ee.yj,Concat:()=>Ee.Eh,Conv2D:()=>Ee.mh,Conv2DBackpropFilter:()=>Ee.wU,Conv2DBackpropInput:()=>Ee.wm,Conv3D:()=>Ee.x1,Conv3DBackpropFilterV2:()=>Ee.o2,Conv3DBackpropInputV2:()=>Ee.ik,Cos:()=>Ee.mc,Cosh:()=>Ee.TR,CropAndResize:()=>Ee.Vc,Cumsum:()=>Ee.iH,DataStorage:()=>it.JL,DenseBincount:()=>Ee.QR,DepthToSpace:()=>Ee.T0,DepthwiseConv2dNative:()=>Ee.ci,DepthwiseConv2dNativeBackpropFilter:()=>Ee.sL,DepthwiseConv2dNativeBackpropInput:()=>Ee.y7,Diag:()=>Ee.$w,Dilation2D:()=>Ee.p4,Dilation2DBackpropFilter:()=>Ee.Vn,Dilation2DBackpropInput:()=>Ee.ek,ENV:()=>h.Vi,Einsum:()=>Ee.$g,Elu:()=>Ee.SX,EluGrad:()=>Ee.HE,Environment:()=>h.qA,Equal:()=>Ee.hd,Erf:()=>Ee.Om,Exp:()=>Ee.NE,ExpandDims:()=>Ee.YF,Expm1:()=>Ee.Y0,FFT:()=>Ee.vw,Fill:()=>Ee.de,FlipLeftRight:()=>Ee.Uy,Floor:()=>Ee.OR,FloorDiv:()=>Ee.je,FromPixels:()=>Ee.eB,FusedBatchNorm:()=>Ee.sH,FusedConv2D:()=>Ee._V,FusedDepthwiseConv2D:()=>Ee.lu,GatherNd:()=>Ee.q1,GatherV2:()=>Ee.qi,Greater:()=>Ee.iZ,GreaterEqual:()=>Ee.Ac,IFFT:()=>Ee.Qg,Identity:()=>Ee.iJ,Imag:()=>Ee.J_,IsFinite:()=>Ee.av,IsInf:()=>Ee.iW,IsNan:()=>Ee.r7,KernelBackend:()=>it.Zu,LRN:()=>Ee.eZ,LRNGrad:()=>Ee.Hh,LeakyRelu:()=>Ee.J$,Less:()=>Ee.vt,LessEqual:()=>Ee.CA,LinSpace:()=>Ee.e7,Log:()=>Ee.Zb,Log1p:()=>Ee.kU,LogSoftmax:()=>Ee.qC,LogicalAnd:()=>Ee.PY,LogicalNot:()=>Ee.Vf,LogicalOr:()=>Ee.MZ,Max:()=>Ee.Yo,MaxPool:()=>Ee.mT,MaxPool3D:()=>Ee.OA,MaxPool3DGrad:()=>Ee.OU,MaxPoolGrad:()=>Ee.OV,MaxPoolWithArgmax:()=>Ee.vF,Maximum:()=>Ee.BM,Mean:()=>Ee.q2,Min:()=>Ee.c1,Minimum:()=>Ee.q8,MirrorPad:()=>Ee.jQ,Mod:()=>Ee.Vb,MomentumOptimizer:()=>tY,Multinomial:()=>Ee.NZ,Multiply:()=>Ee.wY,Neg:()=>Ee.ku,NonMaxSuppressionV3:()=>Ee.uv,NonMaxSuppressionV4:()=>Ee.cy,NonMaxSuppressionV5:()=>Ee.W0,NotEqual:()=>Ee.yQ,OP_SCOPE_SUFFIX:()=>mY.zvA,OneHot:()=>Ee.we,OnesLike:()=>Ee.qW,Optimizer:()=>HA,Pack:()=>Ee.Qi,PadV2:()=>Ee.ly,Pool:()=>Ee.Kg,Pow:()=>Ee.pe,Prelu:()=>Ee.o0,Prod:()=>Ee.Dl,RMSPropOptimizer:()=>aY,Range:()=>Ee.e6,Rank:()=>iY.yw,Real:()=>Ee.xJ,RealDiv:()=>Ee.oH,Reciprocal:()=>Ee.$H,Reduction:()=>nY.I,Relu:()=>Ee.qk,Relu6:()=>Ee.Sb,Reshape:()=>Ee.HZ,ResizeBilinear:()=>Ee._Y,ResizeBilinearGrad:()=>Ee.zb,ResizeNearestNeighbor:()=>Ee.dp,ResizeNearestNeighborGrad:()=>Ee.Hm,Reverse:()=>Ee.mK,RotateWithOffset:()=>Ee.b9,Round:()=>Ee.e0,Rsqrt:()=>Ee.bV,SGDOptimizer:()=>YY,ScatterNd:()=>Ee.xQ,Select:()=>Ee.Ph,Selu:()=>Ee.oF,Sigmoid:()=>Ee.a5,Sign:()=>Ee.i5,Sin:()=>Ee.RQ,Sinh:()=>Ee.w3,Slice:()=>Ee.p2,Softmax:()=>Ee.Gc,Softplus:()=>Ee.MR,SpaceToBatchND:()=>Ee.TQ,SparseFillEmptyRows:()=>Ee.O3,SparseReshape:()=>Ee.nh,SparseSegmentMean:()=>Ee.YW,SparseSegmentSum:()=>Ee.Zj,SparseToDense:()=>Ee.D2,SplitV:()=>Ee.L8,Sqrt:()=>Ee.FK,Square:()=>Ee.bK,SquaredDifference:()=>Ee._t,Step:()=>Ee.h8,StridedSlice:()=>Ee.m2,StringNGrams:()=>Ee._J,StringSplit:()=>Ee.s1,StringToHashBucketFast:()=>Ee.Xk,Sub:()=>Ee.Tr,Sum:()=>Ee.GB,Tan:()=>Ee.sE,Tanh:()=>Ee.MI,Tensor:()=>Ge.es,TensorBuffer:()=>Ge.YD,Tile:()=>Ee.n9,TopK:()=>Ee.cW,Transform:()=>Ee.wx,Transpose:()=>Ee.G3,Unique:()=>Ee.kp,Unpack:()=>Ee.To,UnsortedSegmentSum:()=>Ee.Qv,Variable:()=>Ge._w,ZerosLike:()=>Ee.Ru,_FusedMatMul:()=>Ee.us,abs:()=>mY.WnP,acos:()=>mY.Khb,acosh:()=>mY.__u,add:()=>mY.IHx,addN:()=>mY.QBD,all:()=>mY.$6P,any:()=>mY.YjB,argMax:()=>mY.NqF,argMin:()=>mY.vHJ,asin:()=>mY.ZRM,asinh:()=>mY.VfV,atan:()=>mY.z4N,atan2:()=>mY.fvJ,atanh:()=>mY.C80,avgPool:()=>mY.wS1,avgPool3d:()=>mY.uR5,backend:()=>IA.y3,backend_util:()=>r,basicLSTMCell:()=>mY.zEQ,batchNorm:()=>mY.tgs,batchNorm2d:()=>mY.Dxk,batchNorm3d:()=>mY.JY5,batchNorm4d:()=>mY.p3b,batchToSpaceND:()=>mY.E4h,bincount:()=>mY.yE8,booleanMaskAsync:()=>mY.anm,broadcastArgs:()=>mY.XsQ,broadcastTo:()=>mY.UFq,browser:()=>m,buffer:()=>mY.f3b,cast:()=>mY.pju,ceil:()=>mY.mDi,clipByValue:()=>mY.iUl,clone:()=>mY.d9v,complex:()=>mY.PYB,concat:()=>mY.zoF,concat1d:()=>mY.gME,concat2d:()=>mY.Izb,concat3d:()=>mY.MNy,concat4d:()=>mY.ZaL,conv1d:()=>mY.PAt,conv2d:()=>mY.Tek,conv2dTranspose:()=>mY.bc,conv3d:()=>mY.pdZ,conv3dTranspose:()=>mY.$QV,copyRegisteredKernels:()=>_e.T3,cos:()=>mY.mCk,cosh:()=>mY.f9Y,cosineWindow:()=>mY.mew,cumsum:()=>mY.zbp,customGrad:()=>CA.cb,denseBincount:()=>mY.ppE,deprecationWarn:()=>IA.MX,depthToSpace:()=>mY.nTT,depthwiseConv2d:()=>mY.B10,device_util:()=>t,diag:()=>mY.Ka3,dilation2d:()=>mY.WmZ,disableDeprecationWarnings:()=>IA.cF,dispose:()=>IA.B9,disposeVariables:()=>IA.N8,div:()=>mY.hiC,divNoNan:()=>mY.NTj,dot:()=>mY.AKD,dropout:()=>mY.rvX,einsum:()=>mY.WYO,elu:()=>mY.pyx,enableDebugMode:()=>IA.R,enableProdMode:()=>IA.G4,enclosingPowerOfTwo:()=>mY.GRh,engine:()=>IA.SR,env:()=>h.OB,equal:()=>mY.DgJ,erf:()=>mY.qNN,exp:()=>mY.Qqt,expandDims:()=>mY.dt4,expm1:()=>mY.t$B,eye:()=>mY.iyy,fft:()=>mY.kp_,fill:()=>mY.hlL,findBackend:()=>IA.x3,findBackendFactory:()=>IA.ze,floor:()=>mY.GWj,floorDiv:()=>mY.qPi,fused:()=>mY.imm,gather:()=>mY.Iqj,gatherND:()=>mY.dbB,gather_util:()=>n,getBackend:()=>IA.N_,getGradient:()=>_e.uk,getKernel:()=>_e.pI,getKernelsForBackend:()=>_e.tr,grad:()=>CA.UQ,grads:()=>CA.ti,greater:()=>mY.pjt,greaterEqual:()=>mY.brS,ifft:()=>mY.Sxn,imag:()=>mY.asL,image:()=>mY.BHj,inTopKAsync:()=>mY.V3u,io:()=>a,irfft:()=>mY.wx0,isFinite:()=>mY.xVT,isInf:()=>mY.UWc,isNaN:()=>mY.i2d,keep:()=>IA.Cn,kernel_impls:()=>s,leakyRelu:()=>mY.hi7,less:()=>mY.d9m,lessEqual:()=>mY.zN1,linalg:()=>mY.$r2,linspace:()=>mY.SX3,localResponseNormalization:()=>mY.G9k,log:()=>mY.cM7,log1p:()=>mY.Krr,logSigmoid:()=>mY.e_t,logSoftmax:()=>mY.CmS,logSumExp:()=>mY.l_t,logicalAnd:()=>mY.HvI,logicalNot:()=>mY.hJK,logicalOr:()=>mY.K5V,logicalXor:()=>mY.egP,losses:()=>mY.MB5,matMul:()=>mY.OI3,math:()=>i,max:()=>mY.Fp7,maxPool:()=>mY._sB,maxPool3d:()=>mY.YQQ,maxPoolWithArgmax:()=>mY.Ip$,maximum:()=>mY.gWQ,mean:()=>mY.J69,memory:()=>IA.sq,meshgrid:()=>mY.ry_,min:()=>mY.VV$,minimum:()=>mY.LTh,mirrorPad:()=>mY.VdP,mod:()=>mY.wQq,moments:()=>mY.Gi7,movingAverage:()=>mY.p_,mul:()=>mY.dC7,multiRNNCell:()=>mY.rq4,multinomial:()=>mY.SJ_,neg:()=>mY.W76,nextFrame:()=>oY,norm:()=>mY.KOy,notEqual:()=>mY.Quu,oneHot:()=>mY.lfX,ones:()=>mY.iUs,onesLike:()=>mY.JpU,op:()=>mY.op,outerProduct:()=>mY.N2O,pad:()=>mY.vku,pad1d:()=>mY.pNR,pad2d:()=>mY.koy,pad3d:()=>mY.t1L,pad4d:()=>mY.lGY,pool:()=>mY.d_R,pow:()=>mY.sQ3,prelu:()=>mY.AL3,print:()=>mY.S0v,prod:()=>mY.WVs,profile:()=>IA.N5,rand:()=>mY.TN_,randomGamma:()=>mY.wzB,randomNormal:()=>mY.nGf,randomUniform:()=>mY.LGj,range:()=>mY.w6H,ready:()=>IA.Cd,real:()=>mY.kwC,reciprocal:()=>mY.M25,registerBackend:()=>IA.jq,registerGradient:()=>_e.Li,registerKernel:()=>_e.wC,relu:()=>mY.UYe,relu6:()=>mY.btT,removeBackend:()=>IA.cj,reshape:()=>mY.XLQ,reverse:()=>mY.GYS,reverse1d:()=>mY.SDf,reverse2d:()=>mY.diP,reverse3d:()=>mY.sx7,reverse4d:()=>mY.mG2,rfft:()=>mY.QEs,round:()=>mY.NMM,rsqrt:()=>mY.bp0,scalar:()=>mY.iD$,scatterND:()=>mY.snQ,scatter_util:()=>tA,selu:()=>mY.U8D,separableConv2d:()=>mY.U_I,serialization:()=>p,setBackend:()=>IA.CQ,setPlatform:()=>IA.VY,setdiff1dAsync:()=>mY.ODp,sigmoid:()=>mY.XD2,sign:()=>mY.Xxe,signal:()=>mY.tdS,sin:()=>mY.O$l,sinh:()=>mY.R_K,slice:()=>mY.tPi,slice1d:()=>mY.jZU,slice2d:()=>mY.SmN,slice3d:()=>mY.CnO,slice4d:()=>mY.p0P,slice_util:()=>l,softmax:()=>mY.XAC,softplus:()=>mY.Wvh,spaceToBatchND:()=>mY.fBT,sparse:()=>mY.rVs,sparseToDense:()=>mY.ers,spectral:()=>mY.uN7,split:()=>mY.Vl2,sqrt:()=>mY._b3,square:()=>mY.h62,squaredDifference:()=>mY.$i,squeeze:()=>mY.L9e,stack:()=>mY.knu,step:()=>mY.Nbs,stridedSlice:()=>mY.NXj,string:()=>mY.Z_8,sub:()=>mY.luU,sum:()=>mY.Smz,sumOutType:()=>iY.z4,tan:()=>mY.ORZ,tanh:()=>mY.AEp,tensor:()=>mY.XeE,tensor1d:()=>mY.RRF,tensor2d:()=>mY.odF,tensor3d:()=>mY.wOQ,tensor4d:()=>mY.yXz,tensor5d:()=>mY.Bfx,tensor6d:()=>mY.xZs,tensor_util:()=>FA,test_util:()=>d,tidy:()=>IA.lu,tile:()=>mY.Gg6,time:()=>IA.XV,topk:()=>mY.hg7,train:()=>pY,transpose:()=>mY.p4s,truncatedNormal:()=>mY.Xu6,unique:()=>mY.Two,unregisterGradient:()=>_e.bt,unregisterKernel:()=>_e.nE,unsortedSegmentSum:()=>mY.pUJ,unstack:()=>mY.HHK,upcastType:()=>iY.x8,util:()=>XA,valueAndGrad:()=>CA.h7,valueAndGrads:()=>CA.fN,variable:()=>mY.VD$,variableGrads:()=>CA.pn,version_core:()=>qA,where:()=>mY.arb,whereAsync:()=>mY.itS,zeros:()=>mY.lls,zerosLike:()=>mY.P84});var t={};Y.r(t),Y.d(t,{isBrowser:()=>j,isMobile:()=>N});var a={};Y.r(a),Y.d(a,{browserFiles:()=>ke,browserHTTPRequest:()=>qe,concatenateArrayBuffers:()=>f,copyModel:()=>re,decodeWeights:()=>X,encodeWeights:()=>F,fromMemory:()=>we,getLoadHandlers:()=>v,getModelArtifactsForJSON:()=>y,getModelArtifactsInfoForJSON:()=>B,getSaveHandlers:()=>I,http:()=>Te,isHTTPScheme:()=>Se,listModels:()=>de,loadWeights:()=>be,moveModel:()=>se,registerLoadRouter:()=>q,registerSaveRouter:()=>T,removeModel:()=>oe,weightsLoaderFactory:()=>ye,withSaveHandler:()=>Ue});var i={};Y.r(i),Y.d(i,{confusionMatrix:()=>He});var m={};Y.r(m),Y.d(m,{fromPixels:()=>AA,fromPixelsAsync:()=>$e,toPixels:()=>eA});var n={};Y.r(n),Y.d(n,{prepareAndValidate:()=>YA});var l={};Y.r(l),Y.d(l,{assertParamsValid:()=>aA,computeFlatOffset:()=>hA,computeOutShape:()=>mA,getNormalizedAxes:()=>dA,isSliceContinous:()=>jA,maskToAxes:()=>iA,parseSliceParams:()=>WA,sliceInfo:()=>uA,startForAxis:()=>ZA,startIndicesWithElidedDims:()=>oA,stopForAxis:()=>NA,stopIndicesWithElidedDims:()=>rA,stridesForAxis:()=>sA,stridesWithElidedDims:()=>nA});var p={};Y.r(p),Y.d(p,{Serializable:()=>VA,SerializationMap:()=>cA,registerClass:()=>GA});var d={};Y.r(d),Y.d(d,{TEST_EPSILON_FLOAT16:()=>JA,encodeStrings:()=>TA,expectArrayBuffersEqual:()=>xA,expectArraysClose:()=>gA,expectArraysEqual:()=>bA,expectNumbersClose:()=>yA,expectPromiseToFail:()=>RA,expectValuesInRange:()=>SA,testEpsilon:()=>kA});var o={};Y.r(o),Y.d(o,{collectGatherOpShapeInfo:()=>et,computeOutShape:()=>$Y,segOpComputeOptimalWindowSize:()=>QY});var r={};Y.r(r),Y.d(r,{ERF_A1:()=>RY,ERF_A2:()=>bY,ERF_A3:()=>yY,ERF_A4:()=>BY,ERF_A5:()=>SY,ERF_P:()=>fY,PARALLELIZE_THRESHOLD:()=>WY,SELU_SCALE:()=>kY,SELU_SCALEALPHA:()=>gY,applyActivation:()=>hY.QH,assertAndGetBroadcastShape:()=>sY.$N,assertAxesAreInnerMostDims:()=>rY.lB,assertParamsConsistent:()=>ZY,assignToTypedArray:()=>UY,axesAreInnerMostDims:()=>rY.YB,calculateShapes:()=>tA.calculateShapes,checkEinsumDimSizes:()=>EY,combineLocations:()=>rY.Vh,complexWithEvenIndex:()=>IY,complexWithOddIndex:()=>vY,computeConv2DInfo:()=>jY.Ix,computeConv3DInfo:()=>jY.jw,computeDefaultPad:()=>jY.aO,computeDilation2DInfo:()=>jY.Rf,computeOptimalWindowSize:()=>uY,computeOutAndReduceShapes:()=>rY.kz,computeOutShape:()=>NY,computePool2DInfo:()=>jY.Xw,computePool3DInfo:()=>jY.pl,convertConv2DDataFormat:()=>jY.sl,decodeEinsumEquation:()=>zY,eitherStridesOrDilationsAreOne:()=>jY.jT,expandShapeToKeepDim:()=>rY.rv,exponent:()=>OY,exponents:()=>KY,fromStringArrayToUint8:()=>Yt,fromUint8ToStringArray:()=>At,getAxesPermutation:()=>rY.Q3,getBroadcastDims:()=>sY.XF,getComplexWithIndex:()=>wY,getEinsumComputePath:()=>_Y,getEinsumPermutation:()=>HY,getFusedBiasGradient:()=>hY.pf,getFusedDyActivation:()=>hY.Fr,getImageCenter:()=>VY,getInnerMostAxes:()=>rY.sY,getPermuted:()=>GY,getReductionAxes:()=>sY.RR,getReshaped:()=>cY,getReshapedPermuted:()=>FY,getSliceBeginCoords:()=>XY,getSliceSize:()=>JY,getUndoAxesPermutation:()=>rY.LJ,isIdentityPermutation:()=>MY,log:()=>xY.c,mergeRealAndImagArrays:()=>TY,prepareAndValidate:()=>YA,prepareSplitSize:()=>PY,segment_util:()=>o,shouldFuse:()=>hY.uy,slice_util:()=>l,splitRealAndImagArrays:()=>qY,tupleValuesAreOne:()=>jY.I0,upcastType:()=>iY.x8,validateInput:()=>tA.validateInput,validateUpdateShape:()=>tA.validateUpdateShape,warn:()=>xY.Z});var s={};Y.r(s),Y.d(s,{nonMaxSuppressionV3Impl:()=>tt.GP,nonMaxSuppressionV4Impl:()=>tt.qP,nonMaxSuppressionV5Impl:()=>tt.pA,whereImpl:()=>at.Z});var Z=Y(7097);function N(e){if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const A=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!A){const A=e;return A.userAgentData&&A.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(A)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(A.substr(0,4))}return!1}function j(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var h=Y(2885);const W=(0,h.OB)();W.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),W.registerFlag("IS_BROWSER",(()=>j())),W.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),W.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),W.registerFlag("PROD",(()=>!1)),W.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>W.getBool("DEBUG"))),W.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),W.registerFlag("IS_TEST",(()=>!1)),W.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),W.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1));var u=Y(1661),V=Y(701),c=Y(569);const G={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function F(e,A){const Y=[],t=[],a=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let i=0;i<a.length;++i){const m=a[i],n=Array.isArray(e)?e[i].tensor:e[m];if("float32"!==n.dtype&&"int32"!==n.dtype&&"bool"!==n.dtype&&"string"!==n.dtype&&"complex64"!==n.dtype)throw new Error(`Unsupported dtype in weight '${m}': ${n.dtype}`);const l={name:m,shape:n.shape,dtype:n.dtype};if("string"===n.dtype){const e=new Promise((async e=>{const A=await n.bytes(),Y=A.reduce(((e,A)=>e+A.length),0)+4*A.length,t=new Uint8Array(Y);let a=0;for(let e=0;e<A.length;e++){const Y=A[e],i=new Uint8Array(new Uint32Array([Y.length]).buffer);t.set(i,a),a+=4,t.set(Y,a),a+=Y.length}e(t)}));t.push(e)}else t.push(n.data());null!=A&&(l.group=A),Y.push(l)}return{data:J(await Promise.all(t)),specs:Y}}function X(e,A){const Y={};let t,a=0;for(const i of A){const A=i.name,m=i.dtype,n=i.shape,l=(0,c.NA)(n);let p;if("quantization"in i){const Y=i.quantization;if("uint8"===Y.dtype||"uint16"===Y.dtype){if(!("min"in Y)||!("scale"in Y))throw new Error(`Weight ${i.name} with quantization ${Y.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==Y.dtype)throw new Error(`Weight ${i.name} has unknown quantization dtype ${Y.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==m)throw new Error(`Weight ${i.name} is quantized with ${Y.dtype} which only supports weights of type float32 not ${m}.`)}const n=G[Y.dtype],d=e.slice(a,a+l*n),o="uint8"===Y.dtype?new Uint8Array(d):new Uint16Array(d);if("float32"===m)if("uint8"===Y.dtype||"uint16"===Y.dtype){p=new Float32Array(o.length);for(let e=0;e<o.length;e++){const A=o[e];p[e]=A*Y.scale+Y.min}}else{if("float16"!==Y.dtype)throw new Error(`Unsupported quantization type ${Y.dtype} for weight type float32.`);void 0===t&&(t=S()),p=t(o)}else{if("int32"!==m)throw new Error(`Unsupported dtype in weight '${A}': ${m}`);if("uint8"!==Y.dtype&&"uint16"!==Y.dtype)throw new Error(`Unsupported quantization type ${Y.dtype} for weight type int32.`);p=new Int32Array(o.length);for(let e=0;e<o.length;e++){const A=o[e];p[e]=Math.round(A*Y.scale+Y.min)}}a+=l*n}else if("string"===m){const A=(0,c.NA)(i.shape);p=[];for(let Y=0;Y<A;Y++){const A=new Uint32Array(e.slice(a,a+4))[0];a+=4;const Y=new Uint8Array(e.slice(a,a+A));p.push(Y),a+=A}}else{const t=G[m],i=e.slice(a,a+l*t);if("float32"===m)p=new Float32Array(i);else if("int32"===m)p=new Int32Array(i);else if("bool"===m)p=new Uint8Array(i);else{if("complex64"!==m)throw new Error(`Unsupported dtype in weight '${A}': ${m}`);{p=new Float32Array(i);const e=new Float32Array(p.length/2),t=new Float32Array(p.length/2);for(let A=0;A<e.length;A++)e[A]=p[2*A],t[A]=p[2*A+1];const a=(0,V.X)(e,n,"float32"),m=(0,V.X)(t,n,"float32");Y[A]=(0,u.P)(a,m),a.dispose(),m.dispose()}}a+=l*t}"complex64"!==m&&(Y[A]=(0,V.X)(p,n,m))}return Y}function J(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let A=0;const Y=[];e.forEach((e=>{if(A+=e.byteLength,Y.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const t=new Uint8Array(A);let a=0;return Y.forEach((e=>{t.set(new Uint8Array(e.buffer),a),a+=e.byteLength})),t.buffer}const g="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function k(e){return g?Buffer.byteLength(e):new Blob([e]).size}function f(e){if(1===e.length)return e[0];let A=0;e.forEach((e=>{A+=e.byteLength}));const Y=new Uint8Array(A);let t=0;return e.forEach((e=>{Y.set(new Uint8Array(e),t),t+=e.byteLength})),Y.buffer}function R(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const A=e.split("/");return A[A.length-1]}function b(e,A){const Y={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:A};return null!=e.signature&&(Y.signature=e.signature),null!=e.userDefinedMetadata&&(Y.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(Y.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(Y.trainingConfig=e.trainingConfig),Y}async function y(e,A){const Y={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(Y.trainingConfig=e.trainingConfig),null!=e.weightsManifest){const[t,a]=await A(e.weightsManifest);Y.weightSpecs=t,Y.weightData=a}return null!=e.signature&&(Y.signature=e.signature),null!=e.userDefinedMetadata&&(Y.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(Y.modelInitializer=e.modelInitializer),Y}function B(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:k(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:k(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function S(){const e=function(){const e=e=>{let A=e<<13,Y=0;for(;0==(8388608&A);)Y-=8388608,A<<=1;return A&=-8388609,Y+=947912704,A|Y},A=new Uint32Array(2048);A[0]=0;for(let Y=1;Y<1024;Y++)A[Y]=e(Y);for(let e=1024;e<2048;e++)A[e]=939524096+(e-1024<<13);return A}(),A=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let A=1;A<31;A++)e[A]=A<<23;for(let A=33;A<63;A++)e[A]=2147483648+(A-32<<23);return e}(),Y=function(){const e=new Uint32Array(64);for(let A=0;A<64;A++)e[A]=1024;return e[0]=e[32]=0,e}();return t=>{const a=new ArrayBuffer(4*t.length),i=new Uint32Array(a);for(let a=0;a<t.length;a++){const m=t[a],n=e[Y[m>>10]+(1023&m)]+A[m>>10];i[a]=n}return new Float32Array(a)}}class x{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==x.instance&&(x.instance=new x),x.instance}static registerSaveRouter(e){x.getInstance().saveRouters.push(e)}static registerLoadRouter(e){x.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return x.getHandlers(e,"save")}static getLoadHandlers(e,A){return x.getHandlers(e,"load",A)}static getHandlers(e,A,Y){const t=[];return("load"===A?x.getInstance().loadRouters:x.getInstance().saveRouters).forEach((A=>{const a=A(e,Y);null!==a&&t.push(a)})),t}}const T=e=>x.registerSaveRouter(e),q=e=>x.registerLoadRouter(e),I=e=>x.getSaveHandlers(e),v=(e,A)=>x.getLoadHandlers(e,A),w="tensorflowjs",U="models_store",K="model_info_store";function O(){if(!(0,h.OB)().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,A=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==A)throw new Error("The current browser does not appear to support IndexedDB.");return A}function D(e){const A=e.result;A.createObjectStore(U,{keyPath:"modelPath"}),A.createObjectStore(K,{keyPath:"modelPath"})}class C{constructor(e){if(this.indexedDB=O(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,A){return new Promise(((e,Y)=>{const t=this.indexedDB.open(w,1);t.onupgradeneeded=()=>D(t),t.onsuccess=()=>{const a=t.result;if(null==A){const A=a.transaction(U,"readonly"),t=A.objectStore(U).get(this.modelPath);t.onsuccess=()=>{if(null==t.result)return a.close(),Y(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(t.result.modelArtifacts)},t.onerror=e=>(a.close(),Y(t.error)),A.oncomplete=()=>a.close()}else{const t=B(A),i=a.transaction(K,"readwrite");let m=i.objectStore(K);const n=m.put({modelPath:this.modelPath,modelArtifactsInfo:t});let l;n.onsuccess=()=>{l=a.transaction(U,"readwrite");const n=l.objectStore(U).put({modelPath:this.modelPath,modelArtifacts:A,modelArtifactsInfo:t});n.onsuccess=()=>e({modelArtifactsInfo:t}),n.onerror=e=>{m=i.objectStore(K);const A=m.delete(this.modelPath);A.onsuccess=()=>(a.close(),Y(n.error)),A.onerror=e=>(a.close(),Y(n.error))}},n.onerror=e=>(a.close(),Y(n.error)),i.oncomplete=()=>{null==l?a.close():l.oncomplete=()=>a.close()}}},t.onerror=e=>Y(t.error)}))}}C.URL_SCHEME="indexeddb://";const z=e=>{return(0,h.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(C.URL_SCHEME)?(A=e.slice(C.URL_SCHEME.length),new C(A)):null;var A};x.registerSaveRouter(z),x.registerLoadRouter(z);class H{constructor(){this.indexedDB=O()}async listModels(){return new Promise(((e,A)=>{const Y=this.indexedDB.open(w,1);Y.onupgradeneeded=()=>D(Y),Y.onsuccess=()=>{const t=Y.result,a=t.transaction(K,"readonly"),i=a.objectStore(K).getAll();i.onsuccess=()=>{const A={};for(const e of i.result)A[e.modelPath]=e.modelArtifactsInfo;e(A)},i.onerror=e=>(t.close(),A(i.error)),a.oncomplete=()=>t.close()},Y.onerror=e=>A(Y.error)}))}async removeModel(e){var A;return e=(A=e).startsWith(C.URL_SCHEME)?A.slice(C.URL_SCHEME.length):A,new Promise(((A,Y)=>{const t=this.indexedDB.open(w,1);t.onupgradeneeded=()=>D(t),t.onsuccess=()=>{const a=t.result,i=a.transaction(K,"readwrite"),m=i.objectStore(K),n=m.get(e);let l;n.onsuccess=()=>{if(null==n.result)return a.close(),Y(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const t=m.delete(e),i=()=>{l=a.transaction(U,"readwrite");const t=l.objectStore(U).delete(e);t.onsuccess=()=>A(n.result.modelArtifactsInfo),t.onerror=e=>Y(n.error)};t.onsuccess=i,t.onerror=e=>(i(),a.close(),Y(n.error))}},n.onerror=e=>(a.close(),Y(n.error)),i.oncomplete=()=>{null==l?a.close():l.oncomplete=()=>a.close()}},t.onerror=e=>Y(t.error)}))}}const E="/",_="tensorflowjs_models",M="info",L="model_topology",P="weight_specs",Q="weight_data",$="model_metadata";function ee(e){return{info:[_,e,M].join(E),topology:[_,e,L].join(E),weightSpecs:[_,e,P].join(E),weightData:[_,e,Q].join(E),modelMetadata:[_,e,$].join(E)}}function Ae(e){for(const A of Object.values(e))window.localStorage.removeItem(A)}function Ye(e){const A=e.split(E);if(A.length<3)throw new Error(`Invalid key format: ${e}`);return A.slice(1,A.length-1).join(E)}class te{constructor(e){if(!(0,h.OB)().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=ee(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const A=JSON.stringify(e.modelTopology),Y=JSON.stringify(e.weightSpecs),t=B(e);try{this.LS.setItem(this.keys.info,JSON.stringify(t)),this.LS.setItem(this.keys.topology,A),this.LS.setItem(this.keys.weightSpecs,Y),this.LS.setItem(this.keys.weightData,function(e){if(g)return Buffer.from(e).toString("base64");const A=new Uint8Array(e);let Y="";for(let e=0,t=A.length;e<t;e++)Y+=String.fromCharCode(A[e]);return btoa(Y)}(e.weightData));const a={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(a)),{modelArtifactsInfo:t}}catch(e){throw Ae(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${t.modelTopologyBytes}, weightSpecsBytes=${t.weightSpecsBytes}, weightDataBytes=${t.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const A={},Y=JSON.parse(this.LS.getItem(this.keys.topology));if(null==Y)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);A.modelTopology=Y;const t=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==t)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);A.weightSpecs=t;const a=this.LS.getItem(this.keys.modelMetadata);if(null!=a){const e=JSON.parse(a);A.format=e.format,A.generatedBy=e.generatedBy,A.convertedBy=e.convertedBy,null!=e.signature&&(A.signature=e.signature),null!=e.userDefinedMetadata&&(A.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(A.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(A.trainingConfig=e.trainingConfig)}const i=this.LS.getItem(this.keys.weightData);if(null==i)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return A.weightData=function(e){if(g){const A=Buffer.from(e,"base64");return A.buffer.slice(A.byteOffset,A.byteOffset+A.byteLength)}const A=atob(e),Y=new Uint8Array(A.length);for(let e=0;e<A.length;++e)Y.set([A.charCodeAt(e)],e);return Y.buffer}(i),A}}te.URL_SCHEME="localstorage://";const ae=e=>{return(0,h.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(te.URL_SCHEME)?(A=e.slice(te.URL_SCHEME.length),new te(A)):null;var A};x.registerSaveRouter(ae),x.registerLoadRouter(ae);class ie{constructor(){(0,c.hu)((0,h.OB)().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),(0,c.hu)("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},A=_+E,Y=E+M;for(let t=0;t<this.LS.length;++t){const a=this.LS.key(t);if(a.startsWith(A)&&a.endsWith(Y)){e[Ye(a)]=JSON.parse(this.LS.getItem(a))}}return e}async removeModel(e){var A;const Y=ee(e=(A=e).startsWith(te.URL_SCHEME)?A.slice(te.URL_SCHEME.length):A);if(null==this.LS.getItem(Y.info))throw new Error(`Cannot find model at path '${e}'`);const t=JSON.parse(this.LS.getItem(Y.info));return Ae(Y),t}}const me="://";class ne{constructor(){this.managers={}}static getInstance(){return null==ne.instance&&(ne.instance=new ne),ne.instance}static registerManager(e,A){(0,c.hu)(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(me)&&(e=e.slice(0,e.indexOf(me))),(0,c.hu)(e.length>0,(()=>"scheme must not be an empty string."));const Y=ne.getInstance();(0,c.hu)(null==Y.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),Y.managers[e]=A}static getManager(e){const A=this.getInstance().managers[e];if(null==A)throw new Error(`Cannot find model manager for scheme '${e}'`);return A}static getSchemes(){return Object.keys(this.getInstance().managers)}}function le(e){if(-1===e.indexOf(me))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${ne.getSchemes().join(",")}`);return{scheme:e.split(me)[0],path:e.split(me)[1]}}async function pe(e,A,Y=!1){(0,c.hu)(e!==A,(()=>`Old path and new path are the same: '${e}'`));const t=x.getLoadHandlers(e);(0,c.hu)(t.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),(0,c.hu)(t.length<2,(()=>`Copying failed because more than one (${t.length}) load handlers for source URL ${e}.`));const a=t[0],i=x.getSaveHandlers(A);(0,c.hu)(i.length>0,(()=>`Copying failed because no save handler is found for destination URL ${A}.`)),(0,c.hu)(i.length<2,(()=>`Copying failed because more than one (${t.length}) save handlers for destination URL ${A}.`));const m=i[0],n=le(e).scheme,l=le(e).path,p=n===le(e).scheme,d=await a.load();Y&&p&&await ne.getManager(n).removeModel(l);const o=await m.save(d);return Y&&!p&&await ne.getManager(n).removeModel(l),o.modelArtifactsInfo}async function de(){const e=ne.getSchemes(),A={};for(const Y of e){const e=await ne.getManager(Y).listModels();for(const t in e){A[Y+me+t]=e[t]}}return A}async function oe(e){const A=le(e);return ne.getManager(A.scheme).removeModel(A.path)}async function re(e,A){return pe(e,A,!1)}async function se(e,A){return pe(e,A,!0)}class Ze{fetch(e,A){return fetch(e,A)}now(){return performance.now()}encode(e,A){if("utf-8"!==A&&"utf8"!==A)throw new Error(`Browser's encoder only supports utf-8, but got ${A}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,A){return new TextDecoder(A).decode(e)}}if((0,h.OB)().get("IS_BROWSER")){(0,h.OB)().setPlatform("browser",new Ze);try{ne.registerManager(te.URL_SCHEME,new ie)}catch(e){}try{ne.registerManager(C.URL_SCHEME,new H)}catch(e){}}const Ne=()=>Y(7085);let je;class he{constructor(){this.util=Y(3837),this.textEncoder=new this.util.TextEncoder}fetch(e,A){return null!=(0,h.OB)().global.fetch?(0,h.OB)().global.fetch(e,A):(null==je&&(je=Ne()),je(e,A))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,A){if("utf-8"!==A&&"utf8"!==A)throw new Error(`Node built-in encoder only supports utf-8, but got ${A}`);return this.textEncoder.encode(e)}decode(e,A){return 0===e.length?"":new this.util.TextDecoder(A).decode(e)}}(0,h.OB)().get("IS_NODE")&&(0,h.OB)().setPlatform("node",new he);var We=Y(2657),ue=Y(2271),Ve=Y(8723),ce=Y(9798),Ge=Y(4077);(0,Z.wv)();const Fe={buffer:We.f,cast:ue.p,clone:Ve.d,print:ce.S};(0,Ge.Vp)(Fe);function Xe(e){return new Promise((e=>setTimeout(e))).then(e)}class Je{constructor(e){if(!(0,h.OB)().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Je.URL_SCHEME)&&(e=e.slice(Je.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const A=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const Y=b(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),t=window.URL.createObjectURL(new Blob([JSON.stringify(Y)],{type:"application/json"})),a=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(a.download=this.modelJsonFileName,a.href=t,await Xe((()=>a.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=A,await Xe((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:B(e)}}}}Je.URL_SCHEME="downloads://";class ge{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,A)=>{const Y=new FileReader;Y.onload=Y=>{const t=JSON.parse(Y.target.result),a=t.modelTopology;if(null==a)return void A(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==t.weightsManifest)return void A(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:a});const i=y(t,(e=>this.loadWeights(e)));e(i)},Y.onerror=e=>A(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),Y.readAsText(this.jsonFile)}))}loadWeights(e){const A=[],Y=[];for(const t of e)A.push(...t.weights),Y.push(...t.paths);const t=this.checkManifestAndWeightFiles(e),a=Y.map((e=>this.loadWeightsFile(e,t[e])));return Promise.all(a).then((e=>[A,f(e)]))}loadWeightsFile(e,A){return new Promise(((Y,t)=>{const a=new FileReader;a.onload=e=>{const A=e.target.result;Y(A)},a.onerror=A=>t(`Failed to weights data from file of path '${e}'.`),a.readAsArrayBuffer(A)}))}checkManifestAndWeightFiles(e){const A=[],Y=this.weightsFiles.map((e=>R(e.name))),t={};for(const a of e)a.paths.forEach((e=>{const a=R(e);if(-1!==A.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(A.push(a),-1===Y.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);t[e]=this.weightsFiles[Y.indexOf(a)]}));if(A.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${A.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return t}}function ke(e){return new ge(e)}function fe(e,A,Y,t){!function(e){(0,c.hu)(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,A){(0,c.hu)(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),(0,c.hu)(A>=0&&A<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${A}`)),(0,c.hu)(A>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${A}`))}(Y=null==Y?0:Y,t=null==t?1:t);let a=0;return Promise.all(e.map((i=>(i.then((i=>{const m=Y+ ++a/e.length*(t-Y);return A(m),i})),i))))}async function Re(e,A){null==A&&(A={});const Y=null==A.fetchFunc?(0,h.OB)().platform.fetch:A.fetchFunc,t=e.map((e=>Y(e,A.requestInit,{isBinary:!0}))),a=(null==A.onProgress?await Promise.all(t):await fe(t,A.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==A.onProgress?await Promise.all(a):await fe(a,A.onProgress,.5,1)}async function be(e,A="",Y,t){return ye((e=>Re(e,{requestInit:t})))(e,A,Y)}function ye(e){return async(A,Y="",t)=>{const a=A.map((()=>!1)),i={},m=null!=t?t.map((()=>!1)):[],n=[];if(A.forEach(((e,A)=>{let Y=0;e.weights.forEach((e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,p=G[l]*c.NA(e.shape),d=()=>{a[A]=!0,null==i[A]&&(i[A]=[]),i[A].push({manifestEntry:e,groupOffset:Y,sizeBytes:p})};null!=t?t.forEach(((A,Y)=>{A===e.name&&(d(),m[Y]=!0)})):d(),n.push(e.name),Y+=p}))})),!m.every((e=>e))){const e=t.filter(((e,A)=>!m[A]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${n.join(", ")}.`)}const l=a.reduce(((e,A,Y)=>(A&&e.push(Y),e)),[]),p=[];l.forEach((e=>{A[e].paths.forEach((e=>{const A=Y+(Y.endsWith("/")?"":"/")+e;p.push(A)}))}));const d=await e(p),o={};let r=0;return l.forEach((e=>{const Y=A[e].paths.length;let t=0;for(let e=0;e<Y;e++)t+=d[r+e].byteLength;const a=new ArrayBuffer(t),m=new Uint8Array(a);let n=0;for(let e=0;e<Y;e++){const A=new Uint8Array(d[r+e]);m.set(A,n),n+=A.byteLength}i[e].forEach((e=>{const A=X(a.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in A)o[e]=A[e]})),r+=Y})),o}}x.registerSaveRouter((e=>(0,h.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Je.URL_SCHEME)?function(e="model"){return new Je(e)}(e.slice(Je.URL_SCHEME.length)):null));class Be{constructor(e,A){if(this.DEFAULT_METHOD="POST",null==A&&(A={}),this.weightPathPrefix=A.weightPathPrefix,this.onProgress=A.onProgress,this.weightUrlConverter=A.weightUrlConverter,null!=A.fetchFunc?((0,c.hu)("function"==typeof A.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=A.fetchFunc):this.fetch=(0,h.OB)().platform.fetch,(0,c.hu)(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&(0,c.hu)(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=A.requestInit&&null!=A.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=A.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const A=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);A.body=new FormData;const Y=b(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);A.body.append("model.json",new Blob([JSON.stringify(Y)],{type:"application/json"}),"model.json"),null!=e.weightData&&A.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const t=await this.fetch(this.path,A);if(t.ok)return{modelArtifactsInfo:B(e),responses:[t]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${t.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let A;try{A=await e.json()}catch(e){let A=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?A+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":A+=" Please make sure the server is serving valid JSON for this request.",new Error(A)}const Y=A.modelTopology,t=A.weightsManifest;if(null==Y&&null==t)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return y(A,(e=>this.loadWeights(e)))}async loadWeights(e){const A=Array.isArray(this.path)?this.path[1]:this.path,[Y,t]=function(e){const A=e.lastIndexOf("/"),Y=e.lastIndexOf("?"),t=e.substring(0,A),a=Y>A?e.substring(Y):"";return[t+"/",a]}(A),a=this.weightPathPrefix||Y,i=[];for(const A of e)i.push(...A.weights);const m=[],n=[];for(const A of e)for(const e of A.paths)null!=this.weightUrlConverter?n.push(this.weightUrlConverter(e)):m.push(a+e+t);this.weightUrlConverter&&m.push(...await Promise.all(n));return[i,f(await Re(m,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Se(e){return null!=e.match(Be.URL_SCHEME_REGEX)}Be.URL_SCHEME_REGEX=/^https?:\/\//;const xe=(e,A)=>{if("undefined"==typeof fetch&&(null==A||null==A.fetchFunc))return null;{let Y=!0;if(Y=Array.isArray(e)?e.every((e=>Se(e))):Se(e),Y)return Te(e,A)}return null};function Te(e,A){return new Be(e,A)}function qe(e,A){return Te(e,A)}x.registerSaveRouter(xe),x.registerLoadRouter(xe);class Ie{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class ve{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}function we(e,A,Y,t){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new Ie(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Ie({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Ie({modelTopology:e,weightSpecs:A,weightData:Y,trainingConfig:t})}function Ue(e){return new ve(e)}var Ke=Y(3740),Oe=Y(8687),De=Y(6708),Ce=Y(2668),ze=Y(9065);const He=(0,Ce.op)({confusionMatrix_:function(e,A,Y){const t=(0,Ke._1)(e,"labels","confusionMatrix"),a=(0,Ke._1)(A,"predictions","confusionMatrix");c.hu(null==Y||Y>0&&Number.isInteger(Y),(()=>`If provided, numClasses must be a positive integer, but got ${Y}`)),c.hu(1===t.rank,(()=>`Expected the rank of labels to be 1, but got ${t.rank}`)),c.hu(1===a.rank,(()=>`Expected the rank of predictions to be 1, but got ${a.rank}`)),c.hu(t.shape[0]===a.shape[0],(()=>`Mismatch in the number of examples: ${t.shape[0]} vs. ${a.shape[0]}. Labels and predictions should have the same number of elements.`)),c.hu(Y>0&&Number.isInteger(Y),(()=>`numClasses is required to be a positive integer, but got ${Y}`));const i=(0,De.l)((0,ue.p)(t,"int32"),Y),m=(0,De.l)((0,ue.p)(a,"int32"),Y),n=(0,ze.p)(i),l=(0,Oe.O)(n,m);return(0,ue.p)(l,"int32")}});var Ee=Y(9121),_e=Y(6151),Me=Y(9906);let Le;function Pe(e,A=3){if(A>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let Y=!1,t=!1,a=!1,i=!1,m=!1,n=!1;if(e.data instanceof Uint8Array)Y=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)t=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)a=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)i=!0;else if(null!=e.getContext)m=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);n=!0}if(a){const A=2;if(a&&e.readyState<A)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=(0,_e.pI)(Ee.eB,Z.BV.backendName)){const Y={pixels:e},t={numChannels:A};return Z.BV.runKernel(Ee.eB,Y,t)}const[l,p]=a?[e.videoWidth,e.videoHeight]:[e.width,e.height];let d,o;if(m?d=e.getContext("2d").getImageData(0,0,l,p).data:t||Y?d=e.data:(i||a||n)&&(null==Le&&(Le=document.createElement("canvas").getContext("2d")),Le.canvas.width=l,Le.canvas.height=p,Le.drawImage(e,0,0,l,p),d=Le.getImageData(0,0,l,p).data),4===A)o=new Int32Array(d);else{const e=l*p;o=new Int32Array(e*A);for(let Y=0;Y<e;Y++)for(let e=0;e<A;++e)o[Y*A+e]=d[4*Y+e]}const r=[p,l,A];return(0,Me.w)(o,r,"int32")}function Qe(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}async function $e(e,A=3){let Y=null;if((0,h.OB)().getBool("WRAP_TO_IMAGEBITMAP")&&Qe(e)){let A;try{A=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){A=null}Y=null!=A&&A.width===e.width&&A.height===e.height?A:e}else Y=e;return Pe(Y,A)}async function eA(e,A){let Y=(0,Ke._1)(e,"img","toPixels");if(!(e instanceof Ge.es)){const e=Y;Y=(0,ue.p)(e,"int32"),e.dispose()}if(2!==Y.rank&&3!==Y.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${Y.rank}.`);const[t,a]=Y.shape.slice(0,2),i=2===Y.rank?1:Y.shape[2];if(i>4||2===i)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${i}`);if("float32"!==Y.dtype&&"int32"!==Y.dtype)throw new Error(`Unsupported type for toPixels: ${Y.dtype}. Please use float32 or int32 tensors.`);const m=await Y.data(),n="float32"===Y.dtype?255:1,l=new Uint8ClampedArray(a*t*4);for(let e=0;e<t*a;++e){const A=[0,0,0,255];for(let t=0;t<i;t++){const a=m[e*i+t];if("float32"===Y.dtype){if(a<0||a>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${a}.`)}else if("int32"===Y.dtype&&(a<0||a>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${a}.`);1===i?(A[0]=a*n,A[1]=a*n,A[2]=a*n):A[t]=a*n}const t=4*e;l[t+0]=Math.round(A[0]),l[t+1]=Math.round(A[1]),l[t+2]=Math.round(A[2]),l[t+3]=Math.round(A[3])}if(null!=A){A.width=a,A.height=t;const e=A.getContext("2d"),Y=new ImageData(l,a,t);e.putImageData(Y,0,0)}return Y!==e&&Y.dispose(),l}const AA=(0,Ce.op)({fromPixels_:Pe});function YA(e,A){const Y=e.shape.length,t=A.shape.length;if(Y<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${Y}.`);if(t<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${t}.`);if("int32"!==A.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${A.dtype}.`);if(A.shape[t-1]>Y)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${A.shape[t-1]} vs. ${Y}`);if(0===(0,c.NA)(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const a=A.shape,i=a[a.length-1];let m=1;for(let e=0;e<a.length-1;++e)m*=a[e];const n=e.shape,l=a.slice();l.pop();let p=1;for(let e=i;e<Y;++e)p*=n[e],l.push(n[e]);const d=[...(0,c.e3)(e.shape).map((e=>e/p)),1].slice(0,i);return[l,m,p,d]}var tA=Y(3028);function aA(e,A,Y){const t=e.shape.length;c.hu(t===A.length,(()=>`Error in slice${t}D: Length of begin ${A} must match the rank of the array (${t}).`)),c.hu(t===Y.length,(()=>`Error in slice${t}D: Length of size ${Y} must match the rank of the array (${t}).`));for(let a=0;a<t;++a)c.hu(A[a]+Y[a]<=e.shape[a],(()=>`Error in slice${t}D: begin[${a}] + size[${a}] (${A[a]+Y[a]}) would overflow input.shape[${a}] (${e.shape[a]})`))}function iA(e){const A=[];let Y=0;for(;e>0;)1&e&&A.push(Y),e/=2,Y++;return A}function mA(e,A,Y){const t=[];for(let a=0;a<e.length;a++)t[a]=Math.ceil((A[a]-e[a])/Y[a]);return t}function nA(e,A,Y,t){const a=[...e];for(let e=a.length;e<t.length;e++)a.push(1);for(let e=0;e<Y;e++)0===e?a[A]=1:(a.splice(A,0,1),a.pop());return a}function lA(e,A,Y){return Y<=e?Y:Y-(A-1)}function pA(e,A){const Y=[];for(let t=0;t<e;t++)Y.push(A+t);return Y}function dA(e,A,Y,t,a,i,m,n,l){const p=e.length;let d=new Array(p),o=new Array(p),r=new Array(p);if(A.length&&Y>0){const l=A[0],p=Y+1;d=oA(m,l,p,t,e),o=rA(n,l,p,a,e),r=nA(i,l,p,e)}else for(let A=0;A<p;A++)d[A]=ZA(m,t,i,e,A,l),o[A]=NA(n,a,i,e,A,l),r[A]=sA(i,A,l);return{begin:d,end:o,strides:r}}function oA(e,A,Y,t,a){const i=[...a],m=pA(Y,A);for(let a=0;a<i.length;a++)if(m.indexOf(a)>-1)i[a]=0;else{const m=lA(A,Y,a);let n=t[m];e&1<<m&&(n=0),i[a]=n}return i}function rA(e,A,Y,t,a){const i=[...a],m=pA(Y,A);for(let a=0;a<i.length;a++)if(m.indexOf(a)>-1)i[a]=Number.MAX_SAFE_INTEGER;else{const m=lA(A,Y,a);let n=t[m];e&1<<m&&(n=Number.MAX_SAFE_INTEGER),i[a]=n}for(let e=0;e<i.length;e++){const A=a[e];i[e]<0&&(i[e]+=A),i[e]=c.uZ(0,i[e],a[e])}return i}function sA(e,A,Y){let t=e[A];return(Y&1<<A||null==t)&&(t=1),t}function ZA(e,A,Y,t,a,i){let m=A[a];const n=Y[a]||1;(e&1<<a||i&1<<a||null==m)&&(m=n>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=t[a];return m<0&&(m+=l),m=c.uZ(0,m,l-1),m}function NA(e,A,Y,t,a,i){let m=A[a];const n=Y[a]||1;(e&1<<a||i&1<<a||null==m)&&(m=n>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=t[a];return m<0&&(m+=l),m=n>0?c.uZ(0,m,l):c.uZ(-1,m,l-1),m}function jA(e,A,Y){let t=Y.length;for(let e=0;e<Y.length;e++)if(Y[e]>1){t=e;break}for(let a=t+1;a<Y.length;a++)if(A[a]>0||Y[a]!==e[a])return!1;return!0}function hA(e,A){let Y=e.length>0?e[e.length-1]:1;for(let t=0;t<e.length-1;t++)Y+=e[t]*A[t];return Y}function WA(e,A,Y){let t;const a=e.shape.length;let i;return t="number"==typeof A?[A,...new Array(a-1).fill(0)]:A.length<a?A.concat(new Array(a-A.length).fill(0)):A.slice(),t.forEach((e=>{c.hu(-1!==e,(()=>"slice() does not support negative begin indexing."))})),i=null==Y?new Array(a).fill(-1):"number"==typeof Y?[Y,...new Array(a-1).fill(-1)]:Y.length<a?Y.concat(new Array(a-Y.length).fill(-1)):Y,i=i.map(((A,Y)=>A>=0?A:(c.hu(-1===A,(()=>`Negative size values should be exactly -1 but got ${A} for the slice() size at index ${Y}.`)),e.shape[Y]-t[Y]))),[t,i]}function uA(e,A,Y,t,a,i,m,n,l){let p=A.slice(),d=Y.slice(),o=t;null==t&&(o=new Array(p.length));const r=iA(m);if(r.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==m&&0!==n)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==m&&0!==l)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const s=e.length-p.length,Z=iA(n),N=e.slice();Z.forEach((e=>{p[e]=0,d[e]=1,N.splice(e,0,1)}));const{begin:j,end:h,strides:W}=dA(N,r,s,p,d,o,a,i,m);p=j,d=h,o=W;const u=iA(l);u.forEach((e=>{d[e]=p[e]+1,o[e]=1}));const V=mA(p,d,o),c=V.filter(((e,A)=>-1===u.indexOf(A)));return{nonStrided:o.every((e=>1===e)),$begin:p,$end:d,$strides:o,size:V,newShape:N,outShape:c}}class VA{getClassName(){return this.constructor.className}static fromConfig(e,A){return new e(A)}}class cA{constructor(){this.classNameMap={}}static getMap(){return null==cA.instance&&(cA.instance=new cA),cA.instance}static register(e){cA.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function GA(e){(0,c.hu)(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),(0,c.hu)("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),(0,c.hu)(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),cA.register(e)}var FA=Y(747),XA=Y(9122);const JA=.1;function gA(e,A,Y){return null==Y&&(Y=kA()),fA(e,A,((e,A)=>BA(e,A,Y)))}function kA(){return 32===Z.BV.backend.floatPrecision()?.001:JA}function fA(e,A,Y){let t=!0;if(((0,c.fU)(e)||(0,c.fU)(A))&&(t=!1),(0,c.fU)(e)&&(0,c.fU)(A)&&(t=!0),t){const Y=e.constructor.name,t=A.constructor.name;if(Y!==t)throw new Error(`Arrays are of different type. Actual: ${Y}. Expected: ${t}`)}if(Array.isArray(e)&&Array.isArray(A)){const Y=(0,Ke.C)(e),t=(0,Ke.C)(A);if(!(0,c.cO)(Y,t))throw new Error(`Arrays have different shapes. Actual: [${Y}]. Expected: [${t}]`)}const a=(0,c.fU)(e)?e:(0,c.xH)(e),i=(0,c.fU)(A)?A:(0,c.xH)(A);if(a.length!==i.length)throw new Error(`Arrays have different lengths actual: ${a.length} vs expected: ${i.length}.\nActual:   ${a}.\nExpected: ${i}.`);for(let e=0;e<i.length;++e){const A=a[e],t=i[e];if(!Y(A,t))throw new Error(`Arrays differ: actual[${e}] = ${A}, expected[${e}] = ${t}.\nActual:   ${a}.\nExpected: ${i}.`)}}function RA(e,A){e().then((()=>A.fail()),(()=>A()))}function bA(e,A){const Y="string"==typeof A||"number"==typeof A||"boolean"==typeof A?[A]:A;return(0,c.HD)(e)||(0,c.HD)(e[0])||(0,c.HD)(A)||(0,c.HD)(A[0])?fA(e,Y,((e,A)=>e==A)):fA(e,A,((e,A)=>BA(e,A,0)))}function yA(e,A,Y){if(null==Y&&(Y=kA()),!BA(e,A,Y))throw new Error(`Numbers differ: actual === ${e}, expected === ${A}`)}function BA(e,A,Y){return!isFinite(e)&&!isFinite(A)||!(isNaN(e)||isNaN(A)||Math.abs(e-A)>Y)}function SA(e,A,Y){for(let t=0;t<e.length;t++)if(e[t]<A||e[t]>Y)throw new Error(`Value out of range:${e[t]} low: ${A}, high: ${Y}`)}function xA(e,A){expect(new Float32Array(e)).toEqual(new Float32Array(A))}function TA(e){for(let A=0;A<e.length;A++){const Y=e[A];Array.isArray(Y)?TA(Y):e[A]=(0,XA.encodeString)(Y)}return e}const qA="3.9.0";var IA=Y(4368),vA=Y(6407),wA=Y(1274),UA=Y(4841),KA=Y(3261),OA=Y(248),DA=Y(6577),CA=Y(633),zA=Y(9494);class HA extends VA{minimize(e,A=!1,Y){const{value:t,grads:a}=this.computeGradients(e,Y);if(null!=Y){const e=Y.map((e=>({name:e.name,tensor:a[e.name]})));this.applyGradients(e)}else this.applyGradients(a);return(0,IA.B9)(a),A?t:(t.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,A){return(0,CA.pn)(e,A)}dispose(){null!=this.iterations_&&(0,IA.B9)(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:(0,zA.i)(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(HA,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class EA extends HA{constructor(e,A,Y=null){super(),this.learningRate=e,this.rho=A,this.epsilon=Y,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==Y&&(this.epsilon=Z.BV.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((A,Y)=>{const t=Z.BV.registeredVariables[A];null==this.accumulatedGrads[Y]&&(this.accumulatedGrads[Y]={originalName:`${A}/accum_grad`,variable:(0,IA.lu)((()=>(0,DA.P)(t).variable(false)))}),null==this.accumulatedUpdates[Y]&&(this.accumulatedUpdates[Y]={originalName:`${A}/accum_var`,variable:(0,IA.lu)((()=>(0,DA.P)(t).variable(false)))});const a=Array.isArray(e)?e[Y].tensor:e[A];if(null==a)return;const i=this.accumulatedGrads[Y].variable,m=this.accumulatedUpdates[Y].variable;(0,IA.lu)((()=>{const e=(0,vA.I)((0,UA.d)(i,this.rho),(0,UA.d)((0,OA.h)(a),1-this.rho)),A=(0,UA.d)((0,wA.h)((0,KA._)((0,vA.I)(m,this.epsilon)),(0,KA._)((0,vA.I)(i,this.epsilon))),a),Y=(0,vA.I)((0,UA.d)(m,this.rho),(0,UA.d)((0,OA.h)(A),1-this.rho));i.assign(e),m.assign(Y);const n=(0,vA.I)((0,UA.d)(A,-this.learningRate),t);t.assign(n)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&((0,IA.B9)(this.accumulatedGrads.map((e=>e.variable))),(0,IA.B9)(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const A=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,A).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(A,2*A).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,A){return new e(A.learningRate,A.rho,A.epsilon)}}EA.className="Adadelta",GA(EA);var _A=Y(4006);class MA extends HA{constructor(e,A=.1){super(),this.learningRate=e,this.initialAccumulatorValue=A,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((A,Y)=>{const t=Z.BV.registeredVariables[A];if(null==this.accumulatedGrads[Y]){const e=!1;this.accumulatedGrads[Y]={originalName:`${A}/accumulator`,variable:(0,IA.lu)((()=>(0,_A.h)(t.shape,this.initialAccumulatorValue).variable(e)))}}const a=Array.isArray(e)?e[Y].tensor:e[A];if(null==a)return;const i=this.accumulatedGrads[Y].variable;(0,IA.lu)((()=>{const e=(0,vA.I)(i,(0,OA.h)(a));i.assign(e);const A=(0,vA.I)((0,UA.d)((0,wA.h)(a,(0,KA._)((0,vA.I)(e,Z.BV.backend.epsilon()))),-this.learningRate),t);t.assign(A)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&(0,IA.B9)(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,A){return new e(A.learningRate,A.initialAccumulatorValue)}}MA.className="Adagrad",GA(MA);var LA=Y(3453),PA=Y(827);class QA extends HA{constructor(e,A,Y,t=null){super(),this.learningRate=e,this.beta1=A,this.beta2=Y,this.epsilon=t,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],(0,IA.lu)((()=>{this.accBeta1=(0,zA.i)(A).variable(),this.accBeta2=(0,zA.i)(Y).variable()})),null==t&&(this.epsilon=Z.BV.backend.epsilon())}applyGradients(e){const A=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);(0,IA.lu)((()=>{const Y=(0,PA.l)(1,this.accBeta1),t=(0,PA.l)(1,this.accBeta2);A.forEach(((A,a)=>{const i=Z.BV.registeredVariables[A];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${A}/m`,variable:(0,IA.lu)((()=>(0,DA.P)(i).variable(false)))}),null==this.accumulatedSecondMoment[a]&&(this.accumulatedSecondMoment[a]={originalName:`${A}/v`,variable:(0,IA.lu)((()=>(0,DA.P)(i).variable(false)))});const m=Array.isArray(e)?e[a].tensor:e[A];if(null==m)return;const n=this.accumulatedFirstMoment[a].variable,l=this.accumulatedSecondMoment[a].variable,p=(0,vA.I)((0,UA.d)(n,this.beta1),(0,UA.d)(m,1-this.beta1)),d=(0,vA.I)((0,UA.d)(l,this.beta2),(0,UA.d)((0,OA.h)(m),1-this.beta2)),o=(0,wA.h)(p,Y),r=(0,wA.h)(d,t);n.assign(p),l.assign(d);const s=(0,vA.I)((0,UA.d)((0,wA.h)(o,(0,vA.I)((0,KA._)(r),this.epsilon)),-this.learningRate),i);i.assign(s)})),this.accBeta1.assign((0,UA.d)(this.accBeta1,this.beta1)),this.accBeta2.assign((0,UA.d)(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&(0,IA.B9)(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&(0,IA.B9)(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),(0,IA.lu)((()=>{this.accBeta1.assign((0,LA.s)(this.beta1,this.iterations_+1)),this.accBeta2.assign((0,LA.s)(this.beta2,this.iterations_+1))}));const A=e.length/2;this.accumulatedFirstMoment=e.slice(0,A).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(A,2*A).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,A){return new e(A.learningRate,A.beta1,A.beta2,A.epsilon)}}QA.className="Adam",GA(QA);var $A=Y(6235),eY=Y(632);class AY extends HA{constructor(e,A,Y,t=null,a=0){super(),this.learningRate=e,this.beta1=A,this.beta2=Y,this.epsilon=t,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],(0,IA.lu)((()=>{this.iteration=(0,zA.i)(0).variable(),this.accBeta1=(0,zA.i)(A).variable()})),null==t&&(this.epsilon=Z.BV.backend.epsilon())}applyGradients(e){const A=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);(0,IA.lu)((()=>{const Y=(0,PA.l)(1,this.accBeta1),t=(0,wA.h)(-this.learningRate,(0,vA.I)((0,UA.d)(this.iteration,this.decay),1));A.forEach(((A,a)=>{const i=Z.BV.registeredVariables[A];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${A}/m`,variable:(0,DA.P)(i).variable(false)}),null==this.accumulatedWeightedInfNorm[a]&&(this.accumulatedWeightedInfNorm[a]={originalName:`${A}/v`,variable:(0,DA.P)(i).variable(false)});const m=Array.isArray(e)?e[a].tensor:e[A];if(null==m)return;const n=this.accumulatedFirstMoment[a].variable,l=this.accumulatedWeightedInfNorm[a].variable,p=(0,vA.I)((0,UA.d)(n,this.beta1),(0,UA.d)(m,1-this.beta1)),d=(0,UA.d)(l,this.beta2),o=(0,$A.W)(m),r=(0,eY.g)(d,o);n.assign(p),l.assign(r);const s=(0,vA.I)((0,UA.d)((0,wA.h)(t,Y),(0,wA.h)(p,(0,vA.I)(r,this.epsilon))),i);i.assign(s)})),this.iteration.assign((0,vA.I)(this.iteration,1)),this.accBeta1.assign((0,UA.d)(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&(0,IA.B9)(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&(0,IA.B9)(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,A){return new e(A.learningRate,A.beta1,A.beta2,A.epsilon,A.decay)}}AY.className="Adamax",GA(AY);class YY extends HA{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((A,Y)=>{const t=Array.isArray(e)?e[Y].tensor:e[A];if(null==t)return;const a=Z.BV.registeredVariables[A];(0,IA.lu)((()=>{const e=(0,vA.I)((0,UA.d)(this.c,t),a);a.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=(0,IA.Cn)((0,zA.i)(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,A){return new e(A.learningRate)}}YY.className="SGD",GA(YY);class tY extends YY{constructor(e,A,Y=!1){super(e),this.learningRate=e,this.momentum=A,this.useNesterov=Y,this.accumulations=[],this.m=(0,zA.i)(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((A,Y)=>{const t=Z.BV.registeredVariables[A];if(null==this.accumulations[Y]){const e=!1;this.accumulations[Y]={originalName:`${A}/momentum`,variable:(0,IA.lu)((()=>(0,DA.P)(t).variable(e)))}}const a=this.accumulations[Y].variable,i=Array.isArray(e)?e[Y].tensor:e[A];null!=i&&(0,IA.lu)((()=>{let e;const A=(0,vA.I)((0,UA.d)(this.m,a),i);e=this.useNesterov?(0,vA.I)((0,UA.d)(this.c,(0,vA.I)(i,(0,UA.d)(A,this.m))),t):(0,vA.I)((0,UA.d)(this.c,A),t),a.assign(A),t.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&(0,IA.B9)(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,A){return new e(A.learningRate,A.momentum,A.useNesterov)}}tY.className="Momentum",GA(tY);class aY extends HA{constructor(e,A=.9,Y=0,t=null,a=!1){if(super(),this.learningRate=e,this.decay=A,this.momentum=Y,this.epsilon=t,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,null==t&&(this.epsilon=Z.BV.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((A,Y)=>{const t=Z.BV.registeredVariables[A],a=!1;null==this.accumulatedMeanSquares[Y]&&(this.accumulatedMeanSquares[Y]={originalName:`${A}/rms`,variable:(0,IA.lu)((()=>(0,DA.P)(t).variable(a)))}),null==this.accumulatedMoments[Y]&&(this.accumulatedMoments[Y]={originalName:`${A}/momentum`,variable:(0,IA.lu)((()=>(0,DA.P)(t).variable(a)))}),null==this.accumulatedMeanGrads[Y]&&this.centered&&(this.accumulatedMeanGrads[Y]={originalName:`${A}/mg`,variable:(0,IA.lu)((()=>(0,DA.P)(t).variable(a)))});const i=Array.isArray(e)?e[Y].tensor:e[A];if(null==i)return;const m=this.accumulatedMeanSquares[Y].variable,n=this.accumulatedMoments[Y].variable;(0,IA.lu)((()=>{const e=(0,vA.I)((0,UA.d)(m,this.decay),(0,UA.d)((0,OA.h)(i),1-this.decay));if(this.centered){const A=this.accumulatedMeanGrads[Y].variable,a=(0,vA.I)((0,UA.d)(A,this.decay),(0,UA.d)(i,1-this.decay)),l=(0,wA.h)((0,UA.d)(i,this.learningRate),(0,KA._)((0,PA.l)(e,(0,vA.I)((0,OA.h)(a),this.epsilon)))),p=(0,vA.I)((0,UA.d)(n,this.momentum),l);m.assign(e),A.assign(a),n.assign(p);const d=(0,PA.l)(t,p);t.assign(d)}else{const e=(0,vA.I)((0,UA.d)(m,this.decay),(0,UA.d)((0,OA.h)(i),1-this.decay)),A=(0,vA.I)((0,UA.d)(n,this.momentum),(0,wA.h)((0,UA.d)(i,this.learningRate),(0,KA._)((0,vA.I)(e,this.epsilon))));m.assign(e),n.assign(A);const Y=(0,PA.l)(t,A);t.assign(Y)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&(0,IA.B9)(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&(0,IA.B9)(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&(0,IA.B9)(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const A=this.centered?e.length/3:e.length/2,Y=!1;this.accumulatedMeanSquares=e.slice(0,A).map((e=>({originalName:e.name,variable:e.tensor.variable(Y)}))),this.accumulatedMoments=e.slice(A,2*A).map((e=>({originalName:e.name,variable:e.tensor.variable(Y)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*A,3*A).map((e=>({originalName:e.name,variable:e.tensor.variable(Y)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,A){return new e(A.learningRate,A.decay,A.momentum,A.epsilon,A.centered)}}aY.className="RMSProp",GA(aY);var iY=Y(1221),mY=Y(4885),nY=Y(9876);class lY{static sgd(e){return new YY(e)}static momentum(e,A,Y=!1){return new tY(e,A,Y)}static rmsprop(e,A=.9,Y=0,t=null,a=!1){return new aY(e,A,Y,t,a)}static adam(e=.001,A=.9,Y=.999,t=null){return new QA(e,A,Y,t)}static adadelta(e=.001,A=.95,Y=null){return new EA(e,A,Y)}static adamax(e=.002,A=.9,Y=.999,t=null,a=0){return new AY(e,A,Y,t,a)}static adagrad(e,A=.1){return new MA(e,A)}}const pY={sgd:lY.sgd,momentum:lY.momentum,adadelta:lY.adadelta,adagrad:lY.adagrad,rmsprop:lY.rmsprop,adamax:lY.adamax,adam:lY.adam},dY="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function oY(){return new Promise((e=>dY((()=>e()))))}var rY=Y(3591),sY=Y(2200);function ZY(e,A){const Y=e[0].length;e.forEach(((e,A)=>{c.hu(e.length===Y,(()=>`Error in concat${Y}D: rank of tensors[${A}] must be the same as the rank of the rest (${Y})`))})),c.hu(A>=0&&A<Y,(()=>`Error in concat${Y}D: axis must be between 0 and ${Y-1}.`));const t=e[0];e.forEach(((e,a)=>{for(let i=0;i<Y;i++)c.hu(i===A||e[i]===t[i],(()=>`Error in concat${Y}D: Shape of tensors[${a}] (${e}) does not match the shape of the rest (${t}) along the non-concatenated axis ${a}.`))}))}function NY(e,A){const Y=e[0].slice();for(let t=1;t<e.length;t++)Y[A]+=e[t][A];return Y}var jY=Y(2582),hY=Y(9323);const WY=30;function uY(e){return e<=WY?e:(0,c.jP)(e,Math.floor(Math.sqrt(e)))}function VY(e,A,Y){return[Y*("number"==typeof e?e:e[0]),A*("number"==typeof e?e:e[1])]}function cY(e,A,Y,t=!0){let a=[];if(t)a=a.concat(A.slice(0)),a.push(e[0]/Y),a=a.concat(e.slice(1));else{a=a.concat(e[0]);const Y=A.length;for(let t=0;t<Y;++t)a=a.concat([e[t+1]/A[t],A[t]]);a=a.concat(e.slice(Y+1))}return a}function GY(e,A,Y=!0){const t=[];if(Y){t.push(A);for(let Y=A+1;Y<e;++Y)Y<=2*A?(t.push(Y),t.push(Y-(A+1))):t.push(Y)}else{const Y=[],a=[];for(let t=1;t<e;++t)t>=2*A+1||t%2==1?a.push(t):Y.push(t);t.push(...Y),t.push(0),t.push(...a)}return t}function FY(e,A,Y,t=!0){const a=[];t?a.push(e[0]/Y):a.push(e[0]*Y);for(let Y=1;Y<e.length;++Y)Y<=A.length?t?a.push(A[Y-1]*e[Y]):a.push(e[Y]/A[Y-1]):a.push(e[Y]);return a}function XY(e,A){const Y=[0];for(let t=0;t<A;++t)Y.push(e[t][0]);return Y}function JY(e,A,Y){const t=e.slice(0,1);for(let a=0;a<Y;++a)t.push(e[a+1]-A[a][0]-A[a][1]);return t}const gY=1.7580993408473768,kY=1.0507009873554805,fY=.3275911,RY=.254829592,bY=-.284496736,yY=1.421413741,BY=-1.453152027,SY=1.061405429;var xY=Y(4706);function TY(e,A){if(e.length!==A.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${A.length}.`);const Y=new Float32Array(2*e.length);for(let t=0;t<Y.length;t+=2)Y[t]=e[t/2],Y[t+1]=A[t/2];return Y}function qY(e){const A=new Float32Array(e.length/2),Y=new Float32Array(e.length/2);for(let t=0;t<e.length;t+=2)A[t/2]=e[t],Y[t/2]=e[t+1];return{real:A,imag:Y}}function IY(e){const A=Math.ceil(e.length/4),Y=new Float32Array(A),t=new Float32Array(A);for(let A=0;A<e.length;A+=4)Y[Math.floor(A/4)]=e[A],t[Math.floor(A/4)]=e[A+1];return{real:Y,imag:t}}function vY(e){const A=Math.floor(e.length/4),Y=new Float32Array(A),t=new Float32Array(A);for(let A=2;A<e.length;A+=4)Y[Math.floor(A/4)]=e[A],t[Math.floor(A/4)]=e[A+1];return{real:Y,imag:t}}function wY(e,A){return{real:e[2*A],imag:e[2*A+1]}}function UY(e,A,Y,t){e[2*t]=A,e[2*t+1]=Y}function KY(e,A){const Y=new Float32Array(e/2),t=new Float32Array(e/2);for(let a=0;a<Math.ceil(e/2);a++){const i=(A?2:-2)*Math.PI*(a/e);Y[a]=Math.cos(i),t[a]=Math.sin(i)}return{real:Y,imag:t}}function OY(e,A,Y){const t=(Y?2:-2)*Math.PI*(e/A);return{real:Math.cos(t),imag:Math.sin(t)}}const DY="->",CY=/->/g;function zY(e,A){const Y=((e=e.replace(/\s/g,"")).length-e.replace(CY,"").length)/DY.length;if(Y<1)throw new Error("Equations without an arrow are not supported.");if(Y>1)throw new Error('Equation must contain exactly one arrow ("->").');const[t,a]=e.split(DY);(0,c.hu)(-1===t.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const i=t.split(","),m=i.length;if(A!==m)throw new Error(`Expected ${m} input tensors, received ${A}`);if(m>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const n=[];for(let e=0;e<a.length;++e){const A=a[e];if(!i.some((e=>-1!==e.indexOf(A))))throw new Error(`Output subscripts contain the label ${A} not present in the input subscripts.`);-1===n.indexOf(A)&&n.push(A)}for(let e=0;e<t.length;++e){const A=t[e];-1===n.indexOf(A)&&","!==A&&n.push(A)}const l=new Array(i.length);for(let e=0;e<m;++e){if(new Set(i[e].split("")).size!==i[e].length)throw new Error(`Found duplicate axes in input component ${i[e]}. Support for duplicate axes in input is not implemented yet.`);l[e]=[];for(let A=0;A<i[e].length;++A)l[e].push(n.indexOf(i[e][A]))}const p=n.length,d=[];for(let e=a.length;e<p;++e)d.push(e);return{allDims:n,summedDims:d,idDims:l}}function HY(e,A){let Y=new Array(e);Y.fill(-1);for(let e=0;e<A.length;++e)Y[A[e]]=e;const t=[];for(let A=0;A<e;++A)-1===Y[A]&&t.push(A);return Y=Y.filter((e=>-1!==e)),{permutationIndices:Y,expandDims:t}}function EY(e,A,Y){const t=new Array(e);for(let e=0;e<Y.length;++e){const a=Y[e].shape;for(let Y=0;Y<A[e].length;++Y)void 0===t[A[e][Y]]?t[A[e][Y]]=a[Y]:(0,c.hu)(t[A[e][Y]]===a[Y],(()=>`Expected dimension ${t[A[e][Y]]} at axis ${Y} of input shaped ${JSON.stringify(a)}, but got dimension ${a[Y]}`))}}function _Y(e,A){const Y=e,t=[];let a=0;0===e.length&&Y.push(-1),a=e.length+1;for(let e=0;e<a;++e)t.push([]);const i=[];for(let e=0;e<Y.length;++e){const a=LY(A,Y[e]);for(const A of a)-1===i.indexOf(A)&&(t[e].push(A),i.push(A))}return{path:Y,steps:t}}function MY(e){return e.every(((e,A)=>e===A))}function LY(e,A){const Y=[];for(let t=0;t<e.length;++t)0!==e[t].length&&-1===e[t].indexOf(A)&&-1!==A||Y.push(t);return Y}function PY(e,A,Y=0){let t=[];if("number"==typeof A)(0,c.hu)(e.shape[Y]%A==0,(()=>"Number of splits must evenly divide the axis.")),t=new Array(A).fill(e.shape[Y]/A);else{const a=A.reduce(((e,A)=>(-1===A&&(e+=1),e)),0);(0,c.hu)(a<=1,(()=>"There should be only one negative value in split array."));const i=A.indexOf(-1);if(-1!==i){const t=A.reduce(((e,A)=>A>0?e+A:e));A[i]=e.shape[Y]-t}(0,c.hu)(e.shape[Y]===A.reduce(((e,A)=>e+A)),(()=>"The sum of sizes must match the size of the axis dimension.")),t=A}return t}function QY(e,A){let Y,t=!1;for(e<=WY?(Y=e,t=!0):Y=(0,c.jP)(e,Math.floor(Math.sqrt(e)));!t;)Y>A||Y===e?t=!0:Y=(0,c.jP)(e,Y+1);return Y}function $Y(e,A,Y){const t=[],a=e.length;for(let i=0;i<a;i++)i!==A?t.push(e[i]):t.push(Y);return t}function et(e,A,Y,t){const a=A.shape.length,i=e.shape.length;if(0!==t&&(t<-a||t>a))throw new Error(`Expect batchDims in the range of [-${a}, ${a}], but got ${t}`);if(t<0&&(t+=a),t>i)throw new Error(`batchDims (${t}) must be less than rank(x) (\n    ${i}).`);if(Y<t)throw new Error(`batchDims (${t}) must be less than or equal to axis (${Y}).`);for(let Y=0;Y<t;++Y)if(e.shape[Y]!==A.shape[Y])throw new Error(`x.shape[${Y}]: ${e.shape[Y]} should be equal to indices.shape[${Y}]: ${A.shape[Y]}.`);const m=e.shape[Y],n=[];let l=1,p=1,d=1;for(let A=0;A<t;++A)n.push(e.shape[A]),l*=e.shape[A];for(let A=t;A<Y;A++)n.push(e.shape[A]),p*=e.shape[A];for(let e=t;e<a;e++)n.push(A.shape[e]);for(let A=Y+1;A<i;A++)n.push(e.shape[A]),d*=e.shape[A];return{batchSize:l,sliceSize:d,outerSize:p,dimSize:m,outputShape:n}}function At(e){try{return e.map((e=>(0,XA.decodeString)(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function Yt(e){return e.map((e=>(0,XA.encodeString)(e)))}var tt=Y(3337),at=Y(8333),it=Y(8713)},9121:(e,A,Y)=>{"use strict";Y.d(A,{SY:()=>t,VG:()=>a,Sp:()=>i,mm:()=>m,Xz:()=>n,oT:()=>l,IK:()=>p,sJ:()=>d,aJ:()=>o,M2:()=>r,qw:()=>s,jM:()=>Z,Oy:()=>N,QC:()=>j,Jh:()=>h,RO:()=>W,_k:()=>u,IM:()=>V,XL:()=>c,zw:()=>G,zv:()=>F,Ly:()=>X,eE:()=>J,RF:()=>g,gJ:()=>k,xn:()=>f,Zz:()=>R,yj:()=>b,Eh:()=>y,mh:()=>B,wU:()=>S,wm:()=>x,x1:()=>T,o2:()=>q,ik:()=>I,mc:()=>v,TR:()=>w,iH:()=>U,Vc:()=>K,QR:()=>O,T0:()=>D,ci:()=>C,sL:()=>z,y7:()=>H,$w:()=>E,p4:()=>_,ek:()=>M,Vn:()=>L,oH:()=>P,$g:()=>Q,SX:()=>$,HE:()=>ee,Om:()=>Ae,hd:()=>Ye,NE:()=>te,YF:()=>ae,Y0:()=>ie,vw:()=>me,de:()=>ne,Uy:()=>le,OR:()=>pe,je:()=>de,sH:()=>oe,qi:()=>re,q1:()=>se,iZ:()=>Ze,Ac:()=>Ne,iJ:()=>je,Qg:()=>he,J_:()=>We,av:()=>ue,iW:()=>Ve,r7:()=>ce,J$:()=>Ge,vt:()=>Fe,CA:()=>Xe,e7:()=>Je,Zb:()=>ge,kU:()=>ke,PY:()=>fe,Vf:()=>Re,MZ:()=>be,qC:()=>ye,eZ:()=>Be,Hh:()=>Se,Yo:()=>xe,BM:()=>Te,mT:()=>qe,OV:()=>Ie,OA:()=>ve,OU:()=>we,vF:()=>Ue,q2:()=>Ke,c1:()=>Oe,q8:()=>De,jQ:()=>Ce,Vb:()=>ze,NZ:()=>He,wY:()=>Ee,ku:()=>_e,yQ:()=>Me,uv:()=>Le,cy:()=>Pe,W0:()=>Qe,qW:()=>$e,we:()=>eA,Qi:()=>AA,ly:()=>YA,Kg:()=>tA,pe:()=>aA,o0:()=>iA,Dl:()=>mA,e6:()=>nA,xJ:()=>lA,$H:()=>pA,qk:()=>dA,HZ:()=>oA,dp:()=>rA,Hm:()=>sA,_Y:()=>ZA,zb:()=>NA,Sb:()=>jA,mK:()=>hA,e0:()=>WA,bV:()=>uA,xQ:()=>VA,Ph:()=>cA,oF:()=>GA,p2:()=>FA,RQ:()=>XA,w3:()=>JA,i5:()=>gA,a5:()=>kA,MR:()=>fA,FK:()=>RA,GB:()=>bA,TQ:()=>yA,L8:()=>BA,Gc:()=>SA,O3:()=>xA,nh:()=>TA,YW:()=>qA,Zj:()=>IA,D2:()=>vA,_t:()=>wA,bK:()=>UA,m2:()=>KA,_J:()=>OA,s1:()=>DA,Xk:()=>CA,Tr:()=>zA,sE:()=>HA,MI:()=>EA,n9:()=>_A,cW:()=>MA,wx:()=>LA,G3:()=>PA,kp:()=>QA,To:()=>$A,Qv:()=>eY,Ru:()=>AY,h8:()=>YY,eB:()=>tY,b9:()=>aY,us:()=>iY,_V:()=>mY,lu:()=>nY});const t="Abs",a="Acos",i="Acosh",m="Add",n="AddN",l="All",p="Any",d="ArgMax",o="ArgMin",r="Asin",s="Asinh",Z="Atan",N="Atanh",j="Atan2",h="AvgPool",W="AvgPoolGrad",u="AvgPool3D",V="AvgPool3DGrad",c="BatchMatMul",G="BatchToSpaceND",F="Bincount",X="BroadcastTo",J="BroadcastArgs",g="Cast",k="Ceil",f="ClipByValue",R="Complex",b="ComplexAbs",y="Concat",B="Conv2D",S="Conv2DBackpropFilter",x="Conv2DBackpropInput",T="Conv3D",q="Conv3DBackpropFilterV2",I="Conv3DBackpropInputV2",v="Cos",w="Cosh",U="Cumsum",K="CropAndResize",O="DenseBincount",D="DepthToSpace",C="DepthwiseConv2dNative",z="DepthwiseConv2dNativeBackpropFilter",H="DepthwiseConv2dNativeBackpropInput",E="Diag",_="Dilation2D",M="Dilation2DBackpropInput",L="Dilation2DBackpropFilter",P="RealDiv",Q="Einsum",$="Elu",ee="EluGrad",Ae="Erf",Ye="Equal",te="Exp",ae="ExpandDims",ie="Expm1",me="FFT",ne="Fill",le="FlipLeftRight",pe="Floor",de="FloorDiv",oe="FusedBatchNorm",re="GatherV2",se="GatherNd",Ze="Greater",Ne="GreaterEqual",je="Identity",he="IFFT",We="Imag",ue="IsFinite",Ve="IsInf",ce="IsNan",Ge="LeakyRelu",Fe="Less",Xe="LessEqual",Je="LinSpace",ge="Log",ke="Log1p",fe="LogicalAnd",Re="LogicalNot",be="LogicalOr",ye="LogSoftmax",Be="LRN",Se="LRNGrad",xe="Max",Te="Maximum",qe="MaxPool",Ie="MaxPoolGrad",ve="MaxPool3D",we="MaxPool3DGrad",Ue="MaxPoolWithArgmax",Ke="Mean",Oe="Min",De="Minimum",Ce="MirrorPad",ze="Mod",He="Multinomial",Ee="Multiply",_e="Neg",Me="NotEqual",Le="NonMaxSuppressionV3",Pe="NonMaxSuppressionV4",Qe="NonMaxSuppressionV5",$e="OnesLike",eA="OneHot",AA="Pack",YA="PadV2",tA="Pool",aA="Pow",iA="Prelu",mA="Prod",nA="Range",lA="Real",pA="Reciprocal",dA="Relu",oA="Reshape",rA="ResizeNearestNeighbor",sA="ResizeNearestNeighborGrad",ZA="ResizeBilinear",NA="ResizeBilinearGrad",jA="Relu6",hA="Reverse",WA="Round",uA="Rsqrt",VA="ScatterNd",cA="Select",GA="Selu",FA="Slice",XA="Sin",JA="Sinh",gA="Sign",kA="Sigmoid",fA="Softplus",RA="Sqrt",bA="Sum",yA="SpaceToBatchND",BA="SplitV",SA="Softmax",xA="SparseFillEmptyRows",TA="SparseReshape",qA="SparseSegmentMean",IA="SparseSegmentSum",vA="SparseToDense",wA="SquaredDifference",UA="Square",KA="StridedSlice",OA="StringNGrams",DA="StringSplit",CA="StringToHashBucketFast",zA="Sub",HA="Tan",EA="Tanh",_A="Tile",MA="TopK",LA="Transform",PA="Transpose",QA="Unique",$A="Unpack",eY="UnsortedSegmentSum",AY="ZerosLike",YY="Step",tY="FromPixels",aY="RotateWithOffset",iY="_FusedMatMul",mY="FusedConv2D",nY="FusedDepthwiseConv2D"},6151:(e,A,Y)=>{"use strict";Y.d(A,{pI:()=>l,uk:()=>p,tr:()=>d,wC:()=>o,Li:()=>r,nE:()=>s,bt:()=>Z,T3:()=>N});var t=Y(2885),a=Y(5938),i=Y(4706);const m=(0,a.R)("kernelRegistry",(()=>new Map)),n=(0,a.R)("gradRegistry",(()=>new Map));function l(e,A){const Y=j(e,A);return m.get(Y)}function p(e){return n.get(e)}function d(e){const A=m.entries(),Y=[];for(;;){const{done:t,value:a}=A.next();if(t)break;const[i,m]=a,[n]=i.split("_");n===e&&Y.push(m)}return Y}function o(e){const{kernelName:A,backendName:Y}=e,t=j(A,Y);m.has(t)&&i.Z(`The kernel '${A}' for backend '${Y}' is already registered`),m.set(t,e)}function r(e){const{kernelName:A}=e;n.has(A)&&(0,t.OB)().getBool("DEBUG")&&i.Z(`Overriding the gradient for '${A}'`),n.set(A,e)}function s(e,A){const Y=j(e,A);if(!m.has(Y))throw new Error(`The kernel '${e}' for backend '${A}' is not registered`);m.delete(Y)}function Z(e){if(!n.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);n.delete(e)}function N(e,A){d(e).forEach((e=>{o(Object.assign({},e,{backendName:A}))}))}function j(e,A){return`${A}_${e}`}},4706:(e,A,Y)=>{"use strict";Y.d(A,{Z:()=>a,c:()=>i});var t=Y(2885);function a(...e){(0,t.OB)().getBool("IS_TEST")||(0,t.OB)().getBool("PROD")||console.warn(...e)}function i(...e){(0,t.OB)().getBool("IS_TEST")||(0,t.OB)().getBool("PROD")||console.log(...e)}},6235:(e,A,Y)=>{"use strict";Y.d(A,{W:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({abs_:function(e){const A=(0,i._1)(e,"x","abs");if("complex64"===A.dtype){const e={x:A};return t.BV.runKernel(a.yj,e)}{const e={x:A};return t.BV.runKernel(a.SY,e)}}})},7839:(e,A,Y)=>{"use strict";Y.d(A,{K:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({acos_:function(e){const A={x:(0,i._1)(e,"x","acos")};return t.BV.runKernel(a.VG,A)}})},1470:(e,A,Y)=>{"use strict";Y.d(A,{_:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({acosh_:function(e){const A={x:(0,i._1)(e,"x","acosh")};return t.BV.runKernel(a.Sp,A)}})},6407:(e,A,Y)=>{"use strict";Y.d(A,{I:()=>n});var t=Y(7097),a=Y(9121),i=Y(747),m=Y(3740);const n=(0,Y(2668).op)({add_:function(e,A){let Y=(0,m._1)(e,"a","add"),n=(0,m._1)(A,"b","add");[Y,n]=(0,i.makeTypesMatch)(Y,n);const l={a:Y,b:n};return t.BV.runKernel(a.mm,l)}})},3135:(e,A,Y)=>{"use strict";Y.d(A,{Q:()=>n});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569);const n=(0,Y(2668).op)({addN_:function(e){m.hu(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),m.hu(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const A=e.map(((e,A)=>(0,i._1)(e,`tensors${A}`,"addN"))),Y=A[0];A.forEach((e=>{if(e.dtype!==Y.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),A.forEach((e=>{if(!m.cO(e.shape,Y.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const n=A;return t.BV.runKernel(a.Xz,n)}})},781:(e,A,Y)=>{"use strict";Y.d(A,{$:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({all_:function(e,A=null,Y=!1){const m={x:(0,i._1)(e,"x","all","bool")},n={axis:A,keepDims:Y};return t.BV.runKernel(a.oT,m,n)}})},2998:(e,A,Y)=>{"use strict";Y.d(A,{Y:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({any_:function(e,A=null,Y=!1){const m={x:(0,i._1)(e,"x","any","bool")},n={axis:A,keepDims:Y};return t.BV.runKernel(a.IK,m,n)}})},47:(e,A,Y)=>{"use strict";Y.d(A,{N:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({argMax_:function(e,A=0){const Y={x:(0,i._1)(e,"x","argMax")},m={axis:A};return t.BV.runKernel(a.sJ,Y,m)}})},7394:(e,A,Y)=>{"use strict";Y.d(A,{v:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({argMin_:function(e,A=0){const Y={x:(0,i._1)(e,"x","argMin")},m={axis:A};return t.BV.runKernel(a.aJ,Y,m)}})},2421:(e,A,Y)=>{"use strict";Y.d(A,{Z:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({asin_:function(e){const A={x:(0,i._1)(e,"x","asin")};return t.BV.runKernel(a.M2,A)}})},1891:(e,A,Y)=>{"use strict";Y.d(A,{V:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({asinh_:function(e){const A={x:(0,i._1)(e,"x","asinh")};return t.BV.runKernel(a.qw,A)}})},7037:(e,A,Y)=>{"use strict";Y.d(A,{z:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({atan_:function(e){const A={x:(0,i._1)(e,"x","atan")};return t.BV.runKernel(a.jM,A)}})},9812:(e,A,Y)=>{"use strict";Y.d(A,{f:()=>n});var t=Y(7097),a=Y(9121),i=Y(747),m=Y(3740);const n=(0,Y(2668).op)({atan2_:function(e,A){let Y=(0,m._1)(e,"a","atan2"),n=(0,m._1)(A,"b","atan2");[Y,n]=(0,i.makeTypesMatch)(Y,n);const l={a:Y,b:n};return t.BV.runKernel(a.QC,l)}})},369:(e,A,Y)=>{"use strict";Y.d(A,{C:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({atanh_:function(e){const A={x:(0,i._1)(e,"x","atanh")};return t.BV.runKernel(a.Oy,A)}})},5176:(e,A,Y)=>{"use strict";Y.d(A,{w:()=>o});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569),n=Y(2271),l=Y(2582),p=Y(2668),d=Y(4968);const o=(0,p.op)({avgPool_:function(e,A,Y,p,o){const r=(0,i._1)(e,"x","avgPool","float32");m.hu(l.jT(Y,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${Y} and dilations '1'`));let s=r,Z=!1;3===r.rank&&(Z=!0,s=(0,d.X)(r,[1,r.shape[0],r.shape[1],r.shape[2]])),m.hu(4===s.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${s.rank}.`)),null!=o&&m.hu(m.GN(p),(()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${o} but got pad ${p}.`));const N={x:s},j={filterSize:A,strides:Y,pad:p,dimRoundingMode:o};let h=t.BV.runKernel(a.Jh,N,j);return h=(0,n.p)(h,r.dtype),Z?(0,d.X)(h,[h.shape[1],h.shape[2],h.shape[3]]):h}})},1749:(e,A,Y)=>{"use strict";Y.d(A,{u:()=>d});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569),n=Y(2271),l=Y(2668),p=Y(4968);const d=(0,l.op)({avgPool3d_:function(e,A,Y,l,d,o="NDHWC"){const r=(0,i._1)(e,"x","avgPool3d","float32");let s=r,Z=!1;4===r.rank&&(Z=!0,s=(0,p.X)(r,[1,r.shape[0],r.shape[1],r.shape[2],r.shape[3]])),m.hu(5===s.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${s.rank}.`)),m.hu("NDHWC"===o,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`)),null!=d&&m.hu(m.GN(l),(()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${d} but got pad ${l}.`));const N={x:s},j={filterSize:A,strides:Y,pad:l,dimRoundingMode:d,dataFormat:o};let h=t.BV.runKernel(a._k,N,j);return h=(0,n.p)(h,s.dtype),Z?(0,p.X)(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}})},3591:(e,A,Y)=>{"use strict";Y.d(A,{YB:()=>a,Vh:()=>i,kz:()=>m,rv:()=>n,lB:()=>l,Q3:()=>p,LJ:()=>d,sY:()=>o});var t=Y(569);function a(e,A){for(let Y=0;Y<e.length;++Y)if(e[e.length-Y-1]!==A-1-Y)return!1;return!0}function i(e,A,Y){const t=e.length+A.length,a=[];let i=0,m=0;for(let n=0;n<t;n++)-1===Y.indexOf(n)?a.push(e[i++]):a.push(A[m++]);return a}function m(e,A){const Y=[],t=e.length;for(let a=0;a<t;a++)-1===A.indexOf(a)&&Y.push(e[a]);return[Y,A.map((A=>e[A]))]}function n(e,A){return i(e,A.map((e=>1)),A)}function l(e,A,Y){t.hu(a(A,Y),(()=>`${e} supports only inner-most axes for now. Got axes ${A} and rank-${Y} input.`))}function p(e,A){if(a(e,A))return null;const Y=[];for(let t=0;t<A;++t)-1===e.indexOf(t)&&Y.push(t);return e.forEach((e=>Y.push(e))),Y}function d(e){return e.map(((e,A)=>[A,e])).sort(((e,A)=>e[1]-A[1])).map((e=>e[0]))}function o(e,A){const Y=[];for(let t=A-e;t<A;++t)Y.push(t);return Y}},8441:(e,A,Y)=>{"use strict";Y.d(A,{E:()=>n});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569);const n=(0,Y(2668).op)({batchToSpaceND_:function(e,A,Y){const n=(0,i._1)(e,"x","batchToSpaceND"),l=A.reduce(((e,A)=>e*A));m.hu(n.rank>=1+A.length,(()=>`input rank is ${n.rank} but should be > than blockShape.length ${A.length}`)),m.hu(Y.length===A.length,(()=>`crops.length is ${Y.length} but should be equal to blockShape.length  ${A.length}`)),m.hu(n.shape[0]%l==0,(()=>`input tensor batch is ${n.shape[0]} but is not divisible by the product of the elements of blockShape ${A.join(" * ")} === ${l}`));const p={x:n},d={blockShape:A,crops:Y};return t.BV.runKernel(a.zw,p,d)}})},7505:(e,A,Y)=>{"use strict";Y.d(A,{t:()=>l});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569),n=Y(4968);const l=(0,Y(2668).op)({batchNorm_:function(e,A,Y,l,p,d){null==d&&(d=.001);const o=(0,i._1)(e,"x","batchNorm"),r=(0,i._1)(A,"mean","batchNorm"),s=(0,i._1)(Y,"variance","batchNorm");let Z,N;null!=p&&(Z=(0,i._1)(p,"scale","batchNorm")),null!=l&&(N=(0,i._1)(l,"offset","batchNorm")),m.hu(r.rank===s.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),m.hu(null==N||r.rank===N.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),m.hu(null==Z||r.rank===Z.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const j=function(e){let A;return A=0===e.rank||1===e.rank?(0,n.X)(e,[1,1,1,e.size]):2===e.rank?(0,n.X)(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?(0,n.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,A}(o),h={x:j,scale:Z,offset:N,mean:r,variance:s},W={varianceEpsilon:d},u=t.BV.runKernel(a.sH,h,W);return(0,n.X)(u,o.shape)}})},3865:(e,A,Y)=>{"use strict";Y.d(A,{y:()=>n});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569);const n=(0,Y(2668).op)({bincount_:function(e,A,Y){const n=(0,i._1)(e,"x","bincount"),l=(0,i._1)(A,"weights","bincount");m.hu("int32"===n.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${n.dtype}`)),m.hu(Y>=0,(()=>`size must be non-negative, but got ${Y}.`)),m.hu(l.size===n.size||0===l.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${n.shape}, weights shape: ${l.shape}.`));const p={x:n,weights:l},d={size:Y};return t.BV.runKernel(a.zv,p,d)}})},8194:(e,A,Y)=>{"use strict";Y.d(A,{X:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({broadcastArgs_:function(e,A){const Y=(0,i._1)(e,"s0","broadcastArgs","int32"),m=(0,i._1)(A,"s1","broadcastArgs","int32");if(1!==Y.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${Y.rank}`);if(1!==m.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${m.rank}`);const n={s0:Y,s1:m};return t.BV.runKernel(a.eE,n)}})},8247:(e,A,Y)=>{"use strict";Y.d(A,{U:()=>p});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(8723),n=Y(2668),l=Y(4968);const p=(0,n.op)({broadcastTo_:function(e,A){let Y=(0,i._1)(e,"broadcastTo","x");const n=Y.shape;if(A.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${A}].`);if(A.length<Y.rank)throw new Error(`broadcastTo(): shape.length=${A.length} < input.rank=${Y.rank}.`);if(A.length>Y.rank){const e=Y.shape.slice();for(;e.length<A.length;)e.unshift(1);Y=(0,l.X)(Y,e)}const p=Y.shape,d=Array.from(A);for(let e=A.length-1;e>=0;e--)if(p[e]===A[e])d[e]=1;else if(1!==Y.shape[e])throw new Error(`broadcastTo(): [${n}] cannot be broadcast to [${A}].`);if(0===d.map(((e,A)=>e>1?A:-1)).filter((e=>e>=0)).length)return(0,m.d)(Y);const o={x:Y},r={reps:d};return t.BV.runKernel(a.n9,o,r)}})},2200:(e,A,Y)=>{"use strict";function t(e,A){const Y=e.length,t=[];for(let a=0;a<Y;a++){const i=Y-1-a,m=e[i]||1;(A[A.length-1-a]||1)>1&&1===m&&t.unshift(i)}return t}function a(e,A){const Y=[];for(let t=0;t<A.length;t++){const a=e[e.length-t-1],i=A.length-t-1,m=A[i];(null==a||1===a&&m>1)&&Y.unshift(i)}return Y}function i(e,A){const Y=[],t=Math.max(e.length,A.length);for(let a=0;a<t;a++){let t=e[e.length-a-1];null==t&&(t=1);let i=A[A.length-a-1];if(null==i&&(i=1),1===t)Y.unshift(i);else if(1===i)Y.unshift(t);else{if(t!==i){throw Error(`Operands could not be broadcast together with shapes ${e} and ${A}.`)}Y.unshift(t)}}return Y}Y.d(A,{XF:()=>t,RR:()=>a,$N:()=>i})},2657:(e,A,Y)=>{"use strict";Y.d(A,{f:()=>i});var t=Y(4077),a=Y(569);function i(e,A="float32",Y){return A=A||"float32",a.Mu(e),new t.YD(e,A,Y)}},2271:(e,A,Y)=>{"use strict";Y.d(A,{p:()=>n});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569);const n=(0,Y(2668).op)({cast_:function(e,A){const Y=(0,i._1)(e,"x","cast");if(!m.LP(A))throw new Error(`Failed to cast to unknown dtype ${A}`);if("string"===A&&"string"!==Y.dtype||"string"!==A&&"string"===Y.dtype)throw new Error("Only strings can be casted to strings");const n={x:Y},l={dtype:A};return t.BV.runKernel(a.RF,n,l)}})},6825:(e,A,Y)=>{"use strict";Y.d(A,{m:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({ceil_:function(e){const A={x:(0,i._1)(e,"x","ceil")};return t.BV.runKernel(a.gJ,A)}})},2279:(e,A,Y)=>{"use strict";Y.d(A,{i:()=>n});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569);const n=(0,Y(2668).op)({clipByValue_:function(e,A,Y){const n=(0,i._1)(e,"x","clipByValue");m.hu(A<=Y,(()=>`Error in clip: min (${A}) must be less than or equal to max (${Y}).`));const l={x:n},p={clipValueMin:A,clipValueMax:Y};return t.BV.runKernel(a.xn,l,p)}})},8723:(e,A,Y)=>{"use strict";Y.d(A,{d:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({clone_:function(e){const A={x:(0,i._1)(e,"x","clone","string_or_numeric")};return t.BV.runKernel(a.iJ,A)}})},1661:(e,A,Y)=>{"use strict";Y.d(A,{P:()=>n});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569);const n=(0,Y(2668).op)({complex_:function(e,A){const Y=(0,i._1)(e,"real","complex"),n=(0,i._1)(A,"imag","complex");m.k5(Y.shape,n.shape,`real and imag shapes, ${Y.shape} and ${n.shape}, must match in call to tf.complex().`);const l={real:Y,imag:n};return t.BV.runKernel(a.Zz,l)}})},6884:(e,A,Y)=>{"use strict";Y.d(A,{z:()=>l});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569),n=Y(8723);const l=(0,Y(2668).op)({concat_:function(e,A=0){(0,m.hu)(e.length>=1,(()=>"Pass at least one tensor to concat"));const Y=(0,i.sI)(e,"tensors","concat","string_or_numeric");if("complex64"===Y[0].dtype&&Y.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===Y.length)return(0,n.d)(Y[0]);const l=Y,p={axis:A};return t.BV.runKernel(a.Eh,l,p)}})},1355:(e,A,Y)=>{"use strict";Y.d(A,{P:()=>p});var t=Y(3740),a=Y(569),i=Y(4794),m=Y(2582),n=Y(2668),l=Y(4968);const p=(0,n.op)({conv1d_:function(e,A,Y,n,p="NWC",d=1,o){const r=(0,t._1)(e,"x","conv1d"),s=(0,t._1)(A,"filter","conv1d");let Z=r,N=!1;2===r.rank&&(N=!0,Z=(0,l.X)(r,[1,r.shape[0],r.shape[1]])),a.hu(3===Z.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${Z.rank}.`)),a.hu(3===s.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${s.rank}.`)),null!=o&&a.hu(a.GN(n),(()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${n}.`)),a.hu(Z.shape[2]===s.shape[1],(()=>`Error in conv1d: depth of input (${Z.shape[2]}) must match input depth for filter ${s.shape[1]}.`)),a.hu(m.jT(Y,d),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${Y} and dilation '${d}'`)),a.hu("NWC"===p,(()=>`Error in conv1d: got dataFormat of ${p} but only NWC is currently supported.`));const j=(0,l.X)(s,[1,s.shape[0],s.shape[1],s.shape[2]]),h=(0,l.X)(Z,[Z.shape[0],1,Z.shape[1],Z.shape[2]]),W=[1,Y],u=[1,d],V=(0,i.T)(h,j,W,n,"NHWC",u,o);return N?(0,l.X)(V,[V.shape[2],V.shape[3]]):(0,l.X)(V,[V.shape[0],V.shape[2],V.shape[3]])}})},4794:(e,A,Y)=>{"use strict";Y.d(A,{T:()=>d});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569),n=Y(2582),l=Y(2668),p=Y(4968);const d=(0,l.op)({conv2d_:function(e,A,Y,l,d="NHWC",o=[1,1],r){const s=(0,i._1)(e,"x","conv2d"),Z=(0,i._1)(A,"filter","conv2d");let N=s,j=!1;3===s.rank&&(j=!0,N=(0,p.X)(s,[1,s.shape[0],s.shape[1],s.shape[2]])),m.hu(4===N.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${N.rank}.`)),m.hu(4===Z.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${Z.rank}.`)),null!=r&&m.hu(m.GN(l),(()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${l}.`));const h="NHWC"===d?N.shape[3]:N.shape[1];m.hu(h===Z.shape[2],(()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${Z.shape[2]}.`)),m.hu(n.jT(Y,o),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${Y} and dilations '${o}'`));const W={x:N,filter:Z},u={strides:Y,pad:l,dataFormat:d,dilations:o,dimRoundingMode:r},V=t.BV.runKernel(a.mh,W,u);return j?(0,p.X)(V,[V.shape[1],V.shape[2],V.shape[3]]):V}})},9832:(e,A,Y)=>{"use strict";Y.d(A,{_:()=>l});var t=Y(7097),a=Y(9121),i=Y(569),m=Y(2668),n=Y(4968);const l=(0,m.op)({conv2DBackpropInput_:function(e,A,Y,m,l,p="NHWC",d){i.hu(e.length===A.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${A.rank}) must match`));let o=e,r=A,s=!1;3===A.rank&&(s=!0,r=(0,n.X)(A,[1,A.shape[0],A.shape[1],A.shape[2]]),o=[1,e[0],e[1],e[2]]),i.hu(4===o.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`)),i.hu(4===r.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${r.rank}`)),i.hu(4===Y.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${Y.rank}`));const Z="NHWC"===p?o[3]:o[1],N="NHWC"===p?r.shape[3]:r.shape[1];i.hu(Z===Y.shape[2],(()=>`Error in conv2dDerInput: depth of input (${Z}) must match input depth for filter ${Y.shape[2]}.`)),i.hu(N===Y.shape[3],(()=>`Error in conv2dDerInput: depth of output (${N}) must match output depth for filter ${Y.shape[3]}.`)),null!=d&&i.hu(i.GN(l),(()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${d} but got pad ${l}.`));const j={dy:r,filter:Y},h={strides:m,pad:l,dataFormat:p,dimRoundingMode:d,inputShape:o},W=t.BV.runKernel(a.wm,j,h);return s?(0,n.X)(W,[W.shape[1],W.shape[2],W.shape[3]]):W}})},1405:(e,A,Y)=>{"use strict";Y.d(A,{b:()=>i});var t=Y(3740),a=Y(9832);const i=(0,Y(2668).op)({conv2dTranspose_:function(e,A,Y,i,m,n){const l=(0,t._1)(e,"x","conv2dTranspose"),p=(0,t._1)(A,"filter","conv2dTranspose");return(0,a._)(Y,l,p,i,m,"NHWC",n)}})},473:(e,A,Y)=>{"use strict";Y.d(A,{p:()=>d});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569),n=Y(2582),l=Y(2668),p=Y(4968);const d=(0,l.op)({conv3d_:function(e,A,Y,l,d="NDHWC",o=[1,1,1]){const r=(0,i._1)(e,"x","conv3d"),s=(0,i._1)(A,"filter","conv3d");let Z=r,N=!1;4===r.rank&&(N=!0,Z=(0,p.X)(r,[1,r.shape[0],r.shape[1],r.shape[2],r.shape[3]])),m.hu(5===Z.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${Z.rank}.`)),m.hu(5===s.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${s.rank}.`)),m.hu(Z.shape[4]===s.shape[3],(()=>`Error in conv3d: depth of input (${Z.shape[4]}) must match input depth for filter ${s.shape[3]}.`)),m.hu((0,n.jT)(Y,o),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${Y} and dilations '${o}'`)),m.hu("NDHWC"===d,(()=>`Error in conv3d: got dataFormat of ${d} but only NDHWC is currently supported.`));const j={x:Z,filter:s},h={strides:Y,pad:l,dataFormat:d,dilations:o},W=t.BV.runKernel(a.x1,j,h);return N?(0,p.X)(W,[W.shape[1],W.shape[2],W.shape[3],W.shape[4]]):W}})},2582:(e,A,Y)=>{"use strict";function t(e,A,Y,t,a="NHWC",i){return m(e,[...A,e[3]],Y,i,t,null,null,N(a))}function a(e,A,Y,t,a,i,n="channelsLast"){const[l,d]=p(A);let o;if("channelsLast"===n)o=[l,d,e[3],e[3]];else{if("channelsFirst"!==n)throw new Error(`Unknown dataFormat ${n}`);o=[l,d,e[1],e[1]]}return m(e,o,Y,t,a,i,!1,n)}function i(e,A,Y,t,a,i,m="NDHWC"){const[l,p,o]=d(A);let r,s;if("NDHWC"===m)s="channelsLast",r=[l,p,o,e[4],e[4]];else{if("NCDHW"!==m)throw new Error(`Unknown dataFormat ${m}`);s="channelsFirst",r=[l,p,o,e[1],e[1]]}return n(e,r,Y,t,a,!1,s,i)}function m(e,A,Y,t,a,i,m=!1,n="channelsLast"){let[d,s,Z,N]=[-1,-1,-1,-1];if("channelsLast"===n)[d,s,Z,N]=e;else{if("channelsFirst"!==n)throw new Error(`Unknown dataFormat ${n}`);[d,N,s,Z]=e}const[j,h,,W]=A,[u,V]=p(Y),[c,G]=p(t),F=o(j,c),X=o(h,G),{padInfo:J,outHeight:g,outWidth:k}=function(e,A,Y,t,a,i,m,n,p){let d,o,s;if("number"==typeof e){d={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const a=function(e,A,Y,t,a){null==t&&(t=l(e,A,Y));const i=e[0],m=e[1],n=r((i-A+2*t)/Y+1,a),p=r((m-A+2*t)/Y+1,a);return[n,p]}([A,Y],i,t,e,n);o=a[0],s=a[1]}else if("same"===e){o=Math.ceil(A/t),s=Math.ceil(Y/a);const e=Math.max(0,(o-1)*t+i-A),n=Math.max(0,(s-1)*a+m-Y),l=Math.floor(e/2),p=e-l,r=Math.floor(n/2);d={top:l,bottom:p,left:r,right:n-r,type:"SAME"}}else if("valid"===e)d={top:0,bottom:0,left:0,right:0,type:"VALID"},o=Math.ceil((A-i+1)/t),s=Math.ceil((Y-m+1)/a);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const l="channelsLast"===p?e[1][0]:e[2][0],Z="channelsLast"===p?e[1][1]:e[2][1],N="channelsLast"===p?e[2][0]:e[3][0],j="channelsLast"===p?e[2][1]:e[3][1];d={top:l,bottom:Z,left:N,right:j,type:0===l&&0===Z&&0===N&&0===j?"VALID":"EXPLICIT"},o=r((A-i+l+Z)/t+1,n),s=r((Y-m+N+j)/a+1,n)}}return{padInfo:d,outHeight:o,outWidth:s}}(a,s,Z,u,V,F,X,i,n),f=m?W*N:W;let R;return"channelsFirst"===n?R=[d,f,g,k]:"channelsLast"===n&&(R=[d,g,k,f]),{batchSize:d,dataFormat:n,inHeight:s,inWidth:Z,inChannels:N,outHeight:g,outWidth:k,outChannels:f,padInfo:J,strideHeight:u,strideWidth:V,filterHeight:j,filterWidth:h,effectiveFilterHeight:F,effectiveFilterWidth:X,dilationHeight:c,dilationWidth:G,inShape:e,outShape:R,filterShape:A}}function n(e,A,Y,t,a,i=!1,m="channelsLast",n){let[p,s,Z,N,j]=[-1,-1,-1,-1,-1];if("channelsLast"===m)[p,s,Z,N,j]=e;else{if("channelsFirst"!==m)throw new Error(`Unknown dataFormat ${m}`);[p,j,s,Z,N]=e}const[h,W,u,,V]=A,[c,G,F]=d(Y),[X,J,g]=d(t),k=o(h,X),f=o(W,J),R=o(u,g),{padInfo:b,outDepth:y,outHeight:B,outWidth:S}=function(e,A,Y,t,a,i,m,n,p,d,o){let s,Z,N,j;if("number"==typeof e){s={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const i=function(e,A,Y,t,a,i){null==a&&(a=l(e,A,t));const m=e[0],n=e[1],p=e[2],d=r((m-A+2*a)/t+1,i),o=r((n-A+2*a)/t+1,i),s=r((p-A+2*a)/t+1,i);return[d,o,s,Y]}([A,Y,t,1],n,1,a,e,o);Z=i[0],N=i[1],j=i[2]}else if("same"===e){Z=Math.ceil(A/a),N=Math.ceil(Y/i),j=Math.ceil(t/m);const e=(Z-1)*a+n-A,l=(N-1)*i+p-Y,o=(j-1)*m+d-t,r=Math.floor(e/2),h=e-r,W=Math.floor(l/2),u=l-W,V=Math.floor(o/2);s={top:W,bottom:u,left:V,right:o-V,front:r,back:h,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);s={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},Z=Math.ceil((A-n+1)/a),N=Math.ceil((Y-p+1)/i),j=Math.ceil((t-d+1)/m)}return{padInfo:s,outDepth:Z,outHeight:N,outWidth:j}}(a,s,Z,N,c,G,F,k,f,R,n),x=i?V*j:V;let T;return"channelsFirst"===m?T=[p,x,y,B,S]:"channelsLast"===m&&(T=[p,y,B,S,x]),{batchSize:p,dataFormat:m,inDepth:s,inHeight:Z,inWidth:N,inChannels:j,outDepth:y,outHeight:B,outWidth:S,outChannels:x,padInfo:b,strideDepth:c,strideHeight:G,strideWidth:F,filterDepth:h,filterHeight:W,filterWidth:u,effectiveFilterDepth:k,effectiveFilterHeight:f,effectiveFilterWidth:R,dilationDepth:X,dilationHeight:J,dilationWidth:g,inShape:e,outShape:T,filterShape:A}}function l(e,A,Y,t=1){const a=o(A,t);return Math.floor((e[0]*(Y-1)-Y+a)/2)}function p(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function d(e){return"number"==typeof e?[e,e,e]:e}function o(e,A){return A<=1?e:e+(e-1)*(A-1)}function r(e,A){if(!A)return Math.trunc(e);switch(A){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${A}`)}}function s(e){const[A,Y,t]=p(e);return 1===A&&1===Y&&1===t}function Z(e,A){return s(e)||s(A)}function N(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}Y.d(A,{Rf:()=>t,Xw:()=>a,pl:()=>i,Ix:()=>m,jw:()=>n,aO:()=>l,I0:()=>s,jT:()=>Z,sl:()=>N})},173:(e,A,Y)=>{"use strict";Y.d(A,{m:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({cos_:function(e){const A={x:(0,i._1)(e,"x","cos")};return t.BV.runKernel(a.mc,A)}})},2699:(e,A,Y)=>{"use strict";Y.d(A,{f:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({cosh_:function(e){const A={x:(0,i._1)(e,"x","cosh")};return t.BV.runKernel(a.TR,A)}})},7405:(e,A,Y)=>{"use strict";Y.d(A,{z:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({cumsum_:function(e,A=0,Y=!1,m=!1){const n={x:(0,i._1)(e,"x","cumsum")},l={axis:A,exclusive:Y,reverse:m};return t.BV.runKernel(a.iH,n,l)}})},5746:(e,A,Y)=>{"use strict";Y.d(A,{p:()=>n});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569);const n=(0,Y(2668).op)({denseBincount_:function(e,A,Y,n=!1){const l=(0,i._1)(e,"x","denseBincount"),p=(0,i._1)(A,"weights","denseBincount");m.hu("int32"===l.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${l.dtype}`)),m.hu(l.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${l.rank}.`)),m.hu(Y>=0,(()=>`size must be non-negative, but got ${Y}.`)),m.hu(p.size===l.size||0===p.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${l.shape}, weights shape: ${p.shape}.`));const d={x:l,weights:p},o={size:Y,binaryOutput:n};return t.BV.runKernel(a.QR,d,o)}})},9112:(e,A,Y)=>{"use strict";Y.d(A,{n:()=>n});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569);const n=(0,Y(2668).op)({depthToSpace_:function(e,A,Y="NHWC"){const n=(0,i._1)(e,"x","depthToSpace"),l="NHWC"===Y?n.shape[1]:n.shape[2],p="NHWC"===Y?n.shape[2]:n.shape[3],d="NHWC"===Y?n.shape[3]:n.shape[1];m.hu(l*A>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${l} and ${A}  for depthToSpace with input shape\n    ${n.shape}`)),m.hu(p*A>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${p} and ${A} for depthToSpace with input shape\n        ${n.shape}`)),m.hu(d%(A*A)==0,(()=>`Dimension size must be evenly divisible by ${A*A} but is ${d} for depthToSpace with input shape ${n.shape}`));const o={x:n},r={blockSize:A,dataFormat:Y};return t.BV.runKernel(a.T0,o,r)}})},4718:(e,A,Y)=>{"use strict";Y.d(A,{B:()=>p});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569),n=Y(2668),l=Y(4968);const p=(0,n.op)({depthwiseConv2d_:function(e,A,Y,n,p="NHWC",d=[1,1],o){const r=(0,i._1)(e,"x","depthwiseConv2d"),s=(0,i._1)(A,"filter","depthwiseConv2d");let Z=r,N=!1;3===r.rank&&(N=!0,Z=(0,l.X)(r,[1,r.shape[0],r.shape[1],r.shape[2]])),m.hu(4===Z.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${Z.rank}.`)),m.hu(4===s.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${s.rank}.`)),m.hu(Z.shape[3]===s.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${Z.shape[3]}) must match the inChannels dimension in filter ${s.shape[2]}.`)),null!=o&&m.hu(m.GN(n),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${n}.`));const j={x:Z,filter:s},h={strides:Y,pad:n,dataFormat:p,dilations:d,dimRoundingMode:o},W=t.BV.runKernel(a.ci,j,h);return N?(0,l.X)(W,[W.shape[1],W.shape[2],W.shape[3]]):W}})},557:(e,A,Y)=>{"use strict";Y.d(A,{W:()=>p});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569),n=Y(2668),l=Y(4968);const p=(0,n.op)({dilation2d_:function(e,A,Y,n,p=[1,1],d="NHWC"){const o=(0,i._1)(e,"x","dilation2d"),r=(0,i._1)(A,"filter","dilation2d");m.hu(3===o.rank||4===o.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`)),m.hu(3===r.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${r.rank}.`)),m.hu("NHWC"===d,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${d}`));let s=o,Z=!1;3===o.rank&&(s=(0,l.X)(o,[1,o.shape[0],o.shape[1],o.shape[2]]),Z=!0);const N={x:s,filter:r},j={strides:Y,pad:n,dilations:p},h=t.BV.runKernel(a.p4,N,j);return Z?(0,l.X)(h,[h.shape[1],h.shape[2],h.shape[3]]):h}})},1274:(e,A,Y)=>{"use strict";Y.d(A,{h:()=>l});var t=Y(7097),a=Y(9121),i=Y(747),m=Y(3740),n=Y(9165);const l=(0,Y(2668).op)({div_:function(e,A){let Y=(0,m._1)(e,"a","div"),l=(0,m._1)(A,"b","div");if([Y,l]=(0,i.makeTypesMatch)(Y,l),"int32"===Y.dtype&&"int32"===l.dtype)return(0,n.q)(Y,l);const p={a:Y,b:l};return t.BV.runKernel(a.oH,p,{})}})},9322:(e,A,Y)=>{"use strict";Y.d(A,{N:()=>d});var t=Y(747),a=Y(3740),i=Y(1274),m=Y(6477),n=Y(2668),l=Y(5912),p=Y(6577);const d=(0,n.op)({divNoNan_:function(e,A){let Y=(0,a._1)(e,"a","div"),n=(0,a._1)(A,"b","div");[Y,n]=(0,t.makeTypesMatch)(Y,n);const d=(0,i.h)(Y,n),o=(0,p.P)(d),r=(0,m.D)(n,o);return(0,l.a)(r,o,d)}})},4653:(e,A,Y)=>{"use strict";Y.d(A,{W:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({einsum_:function(e,...A){const Y=A.map(((e,A)=>(0,i._1)(e,`tensors${A}`,"einsum"))),m={equation:e};return t.BV.runKernel(a.$g,Y,m)}})},3233:(e,A,Y)=>{"use strict";Y.d(A,{p:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({elu_:function(e){const A={x:(0,i._1)(e,"x","elu")};return t.BV.runKernel(a.SX,A)}})},6477:(e,A,Y)=>{"use strict";Y.d(A,{D:()=>l});var t=Y(7097),a=Y(9121),i=Y(747),m=Y(3740),n=Y(2200);const l=(0,Y(2668).op)({equal_:function(e,A){let Y=(0,m._1)(e,"a","equal","string_or_numeric"),l=(0,m._1)(A,"b","equal","string_or_numeric");[Y,l]=(0,i.makeTypesMatch)(Y,l),(0,n.$N)(Y.shape,l.shape);const p={a:Y,b:l};return t.BV.runKernel(a.hd,p)}})},4650:(e,A,Y)=>{"use strict";Y.d(A,{q:()=>l});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569),n=Y(2271);const l=(0,Y(2668).op)({erf_:function(e){let A=(0,i._1)(e,"x","erf");m.hu("int32"===A.dtype||"float32"===A.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===A.dtype&&(A=(0,n.p)(A,"float32"));const Y={x:A};return t.BV.runKernel(a.Om,Y)}})},4842:(e,A,Y)=>{"use strict";Y.d(A,{Q:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({exp_:function(e){const A={x:(0,i._1)(e,"x","exp")};return t.BV.runKernel(a.NE,A)}})},1300:(e,A,Y)=>{"use strict";Y.d(A,{d:()=>n});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569);const n=(0,Y(2668).op)({expandDims_:function(e,A=0){const Y=(0,i._1)(e,"x","expandDims","string_or_numeric");m.hu(A<=Y.rank,(()=>"Axis must be <= rank of the tensor"));const n={input:Y},l={dim:A};return t.BV.runKernel(a.YF,n,l)}})},3426:(e,A,Y)=>{"use strict";Y.d(A,{t:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({expm1_:function(e){const A={x:(0,i._1)(e,"x","expm1")};return t.BV.runKernel(a.Y0,A)}})},4006:(e,A,Y)=>{"use strict";Y.d(A,{h:()=>i});var t=Y(7097),a=Y(9121);function i(e,A,Y){const i={shape:e,value:A,dtype:Y};return t.BV.runKernel(a.de,{},i)}},6943:(e,A,Y)=>{"use strict";Y.d(A,{G:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({floor_:function(e){const A={x:(0,i._1)(e,"x","floor")};return t.BV.runKernel(a.OR,A)}})},9165:(e,A,Y)=>{"use strict";Y.d(A,{q:()=>n});var t=Y(7097),a=Y(9121),i=Y(747),m=Y(3740);const n=(0,Y(2668).op)({floorDiv_:function(e,A){let Y=(0,m._1)(e,"a","floorDiv"),n=(0,m._1)(A,"b","floorDiv");[Y,n]=(0,i.makeTypesMatch)(Y,n);const l={a:Y,b:n};return t.BV.runKernel(a.je,l)}})},2277:(e,A,Y)=>{"use strict";Y.r(A),Y.d(A,{conv2d:()=>W,depthwiseConv2d:()=>G,matMul:()=>X});var t=Y(7097),a=Y(633),i=Y(9121),m=Y(747),n=Y(3740),l=Y(569),p=Y(6407),d=Y(2200),o=Y(4794),r=Y(2668),s=Y(4968);const Z=(0,r.op)({conv2DBackpropFilter_:function(e,A,Y,a,m,n="NHWC",p){let d=e;3===e.rank&&(d=(0,s.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let o=A;3===o.rank&&(o=(0,s.X)(A,[1,A.shape[0],A.shape[1],A.shape[2]])),l.hu(4===d.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${d.shape}.`)),l.hu(4===o.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${o.shape}.`)),l.hu(4===Y.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${Y}.`));const r="NHWC"===n?d.shape[3]:d.shape[1],Z="NHWC"===n?o.shape[3]:o.shape[1];l.hu(r===Y[2],(()=>`Error in conv2dDerFilter: depth of input ${r}) must match input depth in filter (${Y[2]}.`)),l.hu(Z===Y[3],(()=>`Error in conv2dDerFilter: depth of dy (${Z}) must match output depth for filter (${Y[3]}).`)),null!=p&&l.hu(l.GN(m),(()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${p} but got pad ${m}.`));const N={x:d,dy:o},j={strides:a,pad:m,dataFormat:n,dimRoundingMode:p,filterShape:Y};return t.BV.runKernel(i.wU,N,j)}});var N=Y(9832),j=Y(2582),h=Y(9323);const W=(0,r.op)({fusedConv2d_:function({x:e,filter:A,strides:Y,pad:r,dataFormat:W="NHWC",dilations:u=[1,1],dimRoundingMode:V,bias:c,activation:G="linear",preluActivationWeights:F,leakyreluAlpha:X}){if(G=G||"linear",!1===(0,h.uy)(t.BV.state.gradientDepth,G)){let t=(0,o.T)(e,A,Y,r,W,u,V);return null!=c&&(t=(0,p.I)(t,c)),(0,h.QH)(t,G,F,X)}const J=(0,n._1)(e,"x","conv2d"),g=(0,n._1)(A,"filter","conv2d");let k=J,f=!1;3===J.rank&&(f=!0,k=(0,s.X)(J,[1,J.shape[0],J.shape[1],J.shape[2]])),l.hu(4===k.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${k.rank}.`)),l.hu(4===g.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${g.rank}.`)),null!=V&&l.hu(l.GN(r),(()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${V} but got pad ${r}.`)),l.hu(k.shape[3]===g.shape[2],(()=>`Error in conv2d: depth of input (${k.shape[3]}) must match input depth for filter ${g.shape[2]}.`)),l.hu(j.jT(Y,u),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${Y} and dilations '${u}'`)),l.hu("NHWC"===W,(()=>`Error in conv2d: got dataFormat of ${W} but only NHWC is currently supported.`));const R=j.Ix(k.shape,g.shape,Y,u,r,V);let b,y;null!=c&&(b=(0,n._1)(c,"bias","fused conv2d"),[b]=(0,m.makeTypesMatch)(b,J),d.$N(R.outShape,b.shape)),null!=F&&(y=(0,n._1)(F,"prelu weights","fused conv2d"));const B=(e,A)=>{const[t,a,i,m]=A,n=(0,h.Fr)(e,i,G);l.hu(j.I0(u),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${u}'`));const p=[(0,N._)(a.shape,n,t,Y,r),Z(a,n,t.shape,Y,r)];if(null!=m){const e=(0,h.pf)(m,n);p.push(e)}return p},S={x:k,filter:g,bias:b,preluActivationWeights:y},x={strides:Y,pad:r,dataFormat:W,dilations:u,dimRoundingMode:V,activation:G,leakyreluAlpha:X};if(null==c){const e=(0,a.cb)(((e,A,Y)=>{let a=t.BV.runKernel(i._V,S,x);return Y([A,e,a]),f&&(a=(0,s.X)(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:B}}));return e(k,g)}{const e=(0,a.cb)(((e,A,Y,a)=>{let m=t.BV.runKernel(i._V,S,x);return a([A,e,m,Y]),f&&(m=(0,s.X)(m,[m.shape[1],m.shape[2],m.shape[3]])),{value:m,gradFunc:B}}));return e(k,g,b)}}});var u=Y(4718);const V=(0,r.op)({depthwiseConv2dNativeBackpropFilter_:function(e,A,Y,a,m,n=[1,1],l){let p=e;3===e.rank&&(p=(0,s.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let d=A;3===d.rank&&(d=(0,s.X)(A,[1,A.shape[0],A.shape[1],A.shape[2]]));const o={x:p,dy:d},r={strides:a,pad:m,dimRoundingMode:l,dilations:n,filterShape:Y};return t.BV.runKernel(i.sL,o,r)}});const c=(0,r.op)({depthwiseConv2dNativeBackpropInput_:function(e,A,Y,a,m,n=[1,1],l){let p=A,d=!1;3===A.rank&&(d=!0,p=(0,s.X)(A,[1,A.shape[0],A.shape[1],A.shape[2]]));const o={dy:p,filter:Y},r={strides:a,pad:m,dimRoundingMode:l,dilations:n,inputShape:e},Z=t.BV.runKernel(i.y7,o,r);return d?(0,s.X)(Z,[Z.shape[1],Z.shape[2],Z.shape[3]]):Z}});const G=(0,r.op)({fusedDepthwiseConv2d_:function({x:e,filter:A,strides:Y,pad:o,dataFormat:r="NHWC",dilations:Z=[1,1],dimRoundingMode:N,bias:W,activation:G="linear",preluActivationWeights:F,leakyreluAlpha:X}){if(!1===(0,h.uy)(t.BV.state.gradientDepth,G)){let t=(0,u.B)(e,A,Y,o,r,Z,N);return null!=W&&(t=(0,p.I)(t,W)),(0,h.QH)(t,G,F,X)}const J=(0,n._1)(e,"x","depthwiseConv2d"),g=(0,n._1)(A,"filter","depthwiseConv2d");let k=J,f=!1;3===J.rank&&(f=!0,k=(0,s.X)(J,[1,J.shape[0],J.shape[1],J.shape[2]])),l.hu(4===k.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${k.rank}.`)),l.hu(4===g.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${g.rank}.`)),l.hu(k.shape[3]===g.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${k.shape[3]}) must match the inChannels dimension in filter ${g.shape[2]}.`)),null==Z&&(Z=[1,1]),l.hu(j.jT(Y,Z),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${Y} and dilations '${Z}'`)),null!=N&&l.hu(l.GN(o),(()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${N} but got pad ${o}.`));const R=j.Ix(k.shape,g.shape,Y,Z,o,N,!0);let b,y;null!=W&&(b=(0,n._1)(W,"bias","fused conv2d"),[b]=(0,m.makeTypesMatch)(b,J),d.$N(R.outShape,b.shape)),null!=F&&(y=(0,n._1)(F,"prelu weights","fused depthwiseConv2d"));const B=(e,A)=>{l.hu(j.I0(Z),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${Z}'`));const[t,a,i,m]=A,n=(0,h.Fr)(e,i,G),p=c(a.shape,n,t,Y,o,Z,N),d=V(a,n,t.shape,Y,o,Z,N);if(null!=m){return[p,d,(0,h.pf)(b,n)]}return[p,d]},S={x:k,filter:g,bias:b,preluActivationWeights:y},x={strides:Y,pad:o,dataFormat:r,dilations:Z,dimRoundingMode:N,activation:G,leakyreluAlpha:X};if(null==W){const e=(0,a.cb)(((e,A,Y)=>{let a=t.BV.runKernel(i.lu,S,x);return Y([A,e,a]),f&&(a=(0,s.X)(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:B}}));return e(k,g)}{const e=(0,a.cb)(((e,A,Y,a)=>{let m=t.BV.runKernel(i.lu,S,x);return a([A,e,m,Y]),f&&(m=(0,s.X)(m,[m.shape[1],m.shape[2],m.shape[3]])),{value:m,gradFunc:B}}));return e(k,g,b)}}});var F=Y(8687);const X=(0,r.op)({fusedMatMul_:function({a:e,b:A,transposeA:Y=!1,transposeB:o=!1,bias:r,activation:Z="linear",preluActivationWeights:N,leakyreluAlpha:j}){if(!1===(0,h.uy)(t.BV.state.gradientDepth,Z)){let t=(0,F.O)(e,A,Y,o);return null!=r&&(t=(0,p.I)(t,r)),(0,h.QH)(t,Z,N,j)}let W=(0,n._1)(e,"a","fused matMul"),u=(0,n._1)(A,"b","fused matMul");[W,u]=(0,m.makeTypesMatch)(W,u);const V=Y?W.shape[W.rank-2]:W.shape[W.rank-1],c=o?u.shape[u.rank-1]:u.shape[u.rank-2],G=Y?W.shape[W.rank-1]:W.shape[W.rank-2],X=o?u.shape[u.rank-2]:u.shape[u.rank-1],J=W.shape.slice(0,-2),g=u.shape.slice(0,-2),k=l.NA(J),f=l.NA(g);l.hu(W.rank>=2&&u.rank>=2&&W.rank===u.rank,(()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${W.rank} and ${u.rank}.`)),l.hu(l.cO(J,g),(()=>`Error in fused matMul: outer dimensions (${J}) and (${g}) of Tensors with shapes ${W.shape} and ${u.shape} must match.`)),l.hu(V===c,(()=>`Error in fused matMul: inner shapes (${V}) and (${c}) of Tensors with shapes ${W.shape} and ${u.shape} and transposeA=${Y} and transposeB=${o} must match.`));const R=W.shape.slice(0,-2).concat([G,X]),b=Y?(0,s.X)(W,[k,V,G]):(0,s.X)(W,[k,G,V]),y=o?(0,s.X)(u,[f,X,c]):(0,s.X)(u,[f,c,X]);let B,S;null!=r&&(B=(0,n._1)(r,"bias","fused matMul"),[B]=(0,m.makeTypesMatch)(B,W),d.$N(R,B.shape)),null!=N&&(S=(0,n._1)(N,"prelu weights","fused matMul"));const x=(e,A)=>{const[t,a,i,m]=A,n=(0,h.Fr)((0,s.X)(e,i.shape),i,Z);let l,p;if(Y||o?!Y&&o?(l=(0,F.O)(n,a,!1,!1),p=(0,F.O)(n,t,!0,!1)):Y&&!o?(l=(0,F.O)(a,n,!1,!0),p=(0,F.O)(t,n,!1,!1)):(l=(0,F.O)(a,n,!0,!0),p=(0,F.O)(n,t,!0,!0)):(l=(0,F.O)(n,a,!1,!0),p=(0,F.O)(t,n,!0,!1)),null!=r){return[l,p,(0,h.pf)(m,n)]}return[l,p]},T={a:b,b:y,bias:B,preluActivationWeights:S},q={transposeA:Y,transposeB:o,activation:Z,leakyreluAlpha:j};if(null==r){const e=(0,a.cb)(((e,A,Y)=>{const a=t.BV.runKernel(i.us,T,q);return Y([e,A,a]),{value:(0,s.X)(a,R),gradFunc:x}}));return e(b,y)}{const e=(0,a.cb)(((e,A,Y,a)=>{const m=t.BV.runKernel(i.us,T,q);return a([e,A,m,Y]),{value:(0,s.X)(m,R),gradFunc:x}}));return e(b,y,B)}}})},9323:(e,A,Y)=>{"use strict";Y.d(A,{Fr:()=>Z,pf:()=>N,QH:()=>j,uy:()=>h});var t=Y(2200),a=Y(3233),i=Y(9133),m=Y(4841),n=Y(8151),l=Y(7409),p=Y(3582),d=Y(4968),o=Y(625),r=Y(1901),s=Y(5475);function Z(e,A,Y){if(null==Y||"linear"===Y)return e;if("relu"===Y)return(0,m.d)(e,(0,r.N)(A));throw new Error(`Cannot compute gradient for fused activation ${Y}.`)}function N(e,A){let Y=A;const a=t.RR(e.shape,A.shape);return a.length>0&&(Y=(0,s.S)(Y,a)),(0,d.X)(Y,e.shape)}function j(e,A,Y,t){if("linear"===A)return e;if("relu"===A)return(0,l.U)(e);if("elu"===A)return(0,a.p)(e);if("relu6"===A)return(0,p.b)(e);if("prelu"===A)return(0,n.A)(e,Y);if("leakyrelu"===A)return(0,i.h)(e,t);if("sigmoid"===A)return(0,o.X)(e);throw new Error(`Unknown fused activation ${A}.`)}const h=(e,A)=>!(e>0)||"linear"===A},4926:(e,A,Y)=>{"use strict";Y.d(A,{I:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({gather_:function(e,A,Y=0,m=0){const n={x:(0,i._1)(e,"x","gather"),indices:(0,i._1)(A,"indices","gather","int32")},l={axis:Y,batchDims:m};return t.BV.runKernel(a.qi,n,l)}})},7494:(e,A,Y)=>{"use strict";Y.d(A,{d:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({gatherND_:function(e,A){const Y=(0,i._1)(A,"indices","gatherND","int32"),m={params:(0,i._1)(e,"x","gatherND","string_or_numeric"),indices:Y};return t.BV.runKernel(a.q1,m)}})},636:(e,A,Y)=>{"use strict";Y.d(A,{p:()=>l});var t=Y(7097),a=Y(9121),i=Y(747),m=Y(3740),n=Y(2200);const l=(0,Y(2668).op)({greater_:function(e,A){let Y=(0,m._1)(e,"a","greater","string_or_numeric"),l=(0,m._1)(A,"b","greater","string_or_numeric");[Y,l]=(0,i.makeTypesMatch)(Y,l),(0,n.$N)(Y.shape,l.shape);const p={a:Y,b:l};return t.BV.runKernel(a.iZ,p)}})},7630:(e,A,Y)=>{"use strict";Y.d(A,{b:()=>l});var t=Y(7097),a=Y(9121),i=Y(747),m=Y(3740),n=Y(2200);const l=(0,Y(2668).op)({greaterEqual_:function(e,A){let Y=(0,m._1)(e,"a","greaterEqual","string_or_numeric"),l=(0,m._1)(A,"b","greaterEqual","string_or_numeric");[Y,l]=(0,i.makeTypesMatch)(Y,l),(0,n.$N)(Y.shape,l.shape);const p={a:Y,b:l};return t.BV.runKernel(a.Ac,p)}})},4386:(e,A,Y)=>{"use strict";Y.d(A,{a:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({imag_:function(e){const A={input:(0,i._1)(e,"input","imag")};return t.BV.runKernel(a.J_,A)}})},6230:(e,A,Y)=>{"use strict";Y.d(A,{i:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({isNaN_:function(e){const A={x:(0,i._1)(e,"x","isNaN")};return t.BV.runKernel(a.r7,A)}})},9133:(e,A,Y)=>{"use strict";Y.d(A,{h:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({leakyRelu_:function(e,A=.2){const Y={x:(0,i._1)(e,"x","leakyRelu")},m={alpha:A};return t.BV.runKernel(a.J$,Y,m)}})},6573:(e,A,Y)=>{"use strict";Y.d(A,{d:()=>l});var t=Y(7097),a=Y(9121),i=Y(747),m=Y(3740),n=Y(2200);const l=(0,Y(2668).op)({less_:function(e,A){let Y=(0,m._1)(e,"a","less","string_or_numeric"),l=(0,m._1)(A,"b","less","string_or_numeric");[Y,l]=(0,i.makeTypesMatch)(Y,l),(0,n.$N)(Y.shape,l.shape);const p={a:Y,b:l};return t.BV.runKernel(a.vt,p)}})},624:(e,A,Y)=>{"use strict";Y.d(A,{z:()=>l});var t=Y(7097),a=Y(9121),i=Y(747),m=Y(3740),n=Y(2200);const l=(0,Y(2668).op)({lessEqual_:function(e,A){let Y=(0,m._1)(e,"a","lessEqual","string_or_numeric"),l=(0,m._1)(A,"b","lessEqual","string_or_numeric");[Y,l]=(0,i.makeTypesMatch)(Y,l),(0,n.$N)(Y.shape,l.shape);const p={a:Y,b:l};return t.BV.runKernel(a.CA,p)}})},4135:(e,A,Y)=>{"use strict";Y.d(A,{S:()=>i});var t=Y(7097),a=Y(9121);function i(e,A,Y){if(Y<=0)throw new Error("The number of values should be positive.");const i={start:e,stop:A,num:Y};return t.BV.runKernel(a.e7,{},i)}},9648:(e,A,Y)=>{"use strict";Y.d(A,{G:()=>p});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569),n=Y(2668),l=Y(4968);const p=(0,n.op)({localResponseNormalization_:function(e,A=5,Y=1,n=1,p=.5){const d=(0,i._1)(e,"x","localResponseNormalization");m.hu(4===d.rank||3===d.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${d.rank}.`)),m.hu(m.GN(A),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${A}.`));let o=d,r=!1;3===d.rank&&(r=!0,o=(0,l.X)(d,[1,d.shape[0],d.shape[1],d.shape[2]]));const s={x:o},Z={depthRadius:A,bias:Y,alpha:n,beta:p},N=t.BV.runKernel(a.eZ,s,Z);return r?(0,l.X)(N,[N.shape[1],N.shape[2],N.shape[3]]):N}})},2597:(e,A,Y)=>{"use strict";Y.d(A,{c:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({log_:function(e){const A={x:(0,i._1)(e,"x","log")};return t.BV.runKernel(a.Zb,A)}})},7474:(e,A,Y)=>{"use strict";Y.d(A,{K:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({log1p_:function(e){const A={x:(0,i._1)(e,"x","log1p")};return t.BV.runKernel(a.kU,A)}})},1510:(e,A,Y)=>{"use strict";Y.d(A,{C:()=>s});var t=Y(633),a=Y(3740),i=Y(2271),m=Y(4842),n=Y(2597),l=Y(3307),p=Y(4841),d=Y(2668),o=Y(827),r=Y(5475);const s=(0,d.op)({logSoftmax_:function(e,A=-1){const Y=(0,a._1)(e,"logits","logSoftmax");if(-1===A&&(A=Y.rank-1),A!==Y.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${Y.rank} and axis was ${A}`);const d=(0,t.cb)(((e,Y)=>{const t=(0,l.F)(e,A,!0),a=(0,o.l)(e,t),d=(0,o.l)((0,i.p)(a,"float32"),(0,n.c)((0,r.S)((0,m.Q)(a),A,!0)));Y([d]);return{value:d,gradFunc:(e,Y)=>{const[t]=Y,a=(0,m.Q)(t);return(0,o.l)(e,(0,p.d)((0,r.S)(e,A,!0),a))}}}));return d(Y)}})},2856:(e,A,Y)=>{"use strict";Y.d(A,{H:()=>n});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(2200);const n=(0,Y(2668).op)({logicalAnd_:function(e,A){const Y=(0,i._1)(e,"a","logicalAnd","bool"),n=(0,i._1)(A,"b","logicalAnd","bool");(0,m.$N)(Y.shape,n.shape);const l={a:Y,b:n};return t.BV.runKernel(a.PY,l)}})},8651:(e,A,Y)=>{"use strict";Y.d(A,{h:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({logicalNot_:function(e){const A={x:(0,i._1)(e,"x","logicalNot","bool")};return t.BV.runKernel(a.Vf,A)}})},5750:(e,A,Y)=>{"use strict";Y.d(A,{K:()=>n});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(2200);const n=(0,Y(2668).op)({logicalOr_:function(e,A){const Y=(0,i._1)(e,"a","logicalOr","bool"),n=(0,i._1)(A,"b","logicalOr","bool");(0,m.$N)(Y.shape,n.shape);const l={a:Y,b:n};return t.BV.runKernel(a.MZ,l)}})},9876:(e,A,Y)=>{"use strict";var t;Y.d(A,{I:()=>t}),function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(t||(t={}))},8687:(e,A,Y)=>{"use strict";Y.d(A,{O:()=>n});var t=Y(7097),a=Y(9121),i=Y(747),m=Y(3740);const n=(0,Y(2668).op)({matMul_:function(e,A,Y=!1,n=!1){let l=(0,m._1)(e,"a","matMul"),p=(0,m._1)(A,"b","matMul");[l,p]=(0,i.makeTypesMatch)(l,p);const d={a:l,b:p},o={transposeA:Y,transposeB:n};return t.BV.runKernel(a.XL,d,o)}})},3307:(e,A,Y)=>{"use strict";Y.d(A,{F:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({max_:function(e,A=null,Y=!1){const m={x:(0,i._1)(e,"x","max")},n={reductionIndices:A,keepDims:Y};return t.BV.runKernel(a.Yo,m,n)}})},1174:(e,A,Y)=>{"use strict";Y.d(A,{_:()=>d});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569),n=Y(2582),l=Y(2668),p=Y(4968);const d=(0,l.op)({maxPool_:function(e,A,Y,l,d){const o=(0,i._1)(e,"x","maxPool");let r=o,s=!1;3===o.rank&&(s=!0,r=(0,p.X)(o,[1,o.shape[0],o.shape[1],o.shape[2]])),m.hu(4===r.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${r.rank}.`)),m.hu(n.jT(Y,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${Y} and dilations '1'`)),null!=d&&m.hu(m.GN(l),(()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${d} but got pad ${l}.`));const Z={x:r},N={filterSize:A,strides:Y,pad:l,dimRoundingMode:d},j=t.BV.runKernel(a.mT,Z,N);return s?(0,p.X)(j,[j.shape[1],j.shape[2],j.shape[3]]):j}})},5020:(e,A,Y)=>{"use strict";Y.d(A,{Y:()=>p});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569),n=Y(2668),l=Y(4968);const p=(0,n.op)({maxPool3d_:function(e,A=[1,1,1],Y,n,p,d="NDHWC"){const o=(0,i._1)(e,"x","maxPool3d");let r=o,s=!1;4===o.rank&&(s=!0,r=(0,l.X)(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),m.hu(5===r.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${r.rank}.`)),m.hu("NDHWC"===d,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${d}`)),null!=p&&m.hu(m.GN(n),(()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${p} but got pad ${n}.`));const Z={x:r},N={filterSize:A,strides:Y,pad:n,dimRoundingMode:p,dataFormat:d},j=t.BV.runKernel(a.OA,Z,N);return s?(0,l.X)(j,[j.shape[1],j.shape[2],j.shape[3],j.shape[4]]):j}})},6877:(e,A,Y)=>{"use strict";Y.d(A,{I:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({maxPoolWithArgmax_:function(e,A,Y,m,n=!1){const l={x:(0,i._1)(e,"x","maxPoolWithArgmax")},p={filterSize:A,strides:Y,pad:m,includeBatchInIndex:n},d=t.BV.runKernel(a.vF,l,p);return{result:d[0],indexes:d[1]}}})},632:(e,A,Y)=>{"use strict";Y.d(A,{g:()=>p});var t=Y(7097),a=Y(9121),i=Y(747),m=Y(3740),n=Y(2200),l=Y(2271);const p=(0,Y(2668).op)({maximum_:function(e,A){let Y=(0,m._1)(e,"a","maximum"),p=(0,m._1)(A,"b","maximum");[Y,p]=(0,i.makeTypesMatch)(Y,p),"bool"===Y.dtype&&(Y=(0,l.p)(Y,"int32"),p=(0,l.p)(p,"int32")),(0,n.$N)(Y.shape,p.shape);const d={a:Y,b:p};return t.BV.runKernel(a.BM,d)}})},5130:(e,A,Y)=>{"use strict";Y.d(A,{J:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({mean_:function(e,A=null,Y=!1){const m={x:(0,i._1)(e,"x","mean")},n={axis:A,keepDims:Y};return t.BV.runKernel(a.q2,m,n)}})},5735:(e,A,Y)=>{"use strict";Y.d(A,{V:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({min_:function(e,A=null,Y=!1){const m={x:(0,i._1)(e,"x","min")},n={axis:A,keepDims:Y};return t.BV.runKernel(a.c1,m,n)}})},4513:(e,A,Y)=>{"use strict";Y.d(A,{L:()=>p});var t=Y(7097),a=Y(9121),i=Y(747),m=Y(3740),n=Y(2200),l=Y(2271);const p=(0,Y(2668).op)({minimum_:function(e,A){let Y=(0,m._1)(e,"a","minimum"),p=(0,m._1)(A,"b","minimum");[Y,p]=(0,i.makeTypesMatch)(Y,p),"bool"===Y.dtype&&(Y=(0,l.p)(Y,"int32"),p=(0,l.p)(p,"int32")),(0,n.$N)(Y.shape,p.shape);const d={a:Y,b:p};return t.BV.runKernel(a.q8,d)}})},1483:(e,A,Y)=>{"use strict";Y.d(A,{V:()=>n});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569);const n=(0,Y(2668).op)({mirrorPad_:function(e,A,Y){m.hu("reflect"===Y||"symmetric"===Y,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${Y}.`));const n=(0,i._1)(e,"x","mirrorPad");if(0===n.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");m.hu(A.length===n.rank,(()=>`Padding doesn't match input. Must be ${n.rank}. Got ${A.length}.`));const l="reflect"===Y?1:0;for(let e=0;e<n.rank;e++)m.hu(2===A[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),m.hu(A[e][0]>=0&&A[e][0]<=n.shape[e]-l&&A[e][1]>=0&&A[e][1]<=n.shape[e]-l,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${n.shape[e]-l} or less than 0 for input of shape ${n.shape}`));const p={paddings:A,mode:Y},d={x:n};return t.BV.runKernel(a.jQ,d,p)}})},5228:(e,A,Y)=>{"use strict";Y.d(A,{w:()=>n});var t=Y(7097),a=Y(9121),i=Y(747),m=Y(3740);const n=(0,Y(2668).op)({mod_:function(e,A){let Y=(0,m._1)(e,"a","mod"),n=(0,m._1)(A,"b","mod");[Y,n]=(0,i.makeTypesMatch)(Y,n);const l={a:Y,b:n};return t.BV.runKernel(a.Vb,l)}})},4841:(e,A,Y)=>{"use strict";Y.d(A,{d:()=>n});var t=Y(7097),a=Y(9121),i=Y(747),m=Y(3740);const n=(0,Y(2668).op)({mul_:function(e,A){let Y=(0,m._1)(e,"a","mul"),n=(0,m._1)(A,"b","mul");[Y,n]=(0,i.makeTypesMatch)(Y,n);const l={a:Y,b:n};return t.BV.runKernel(a.wY,l)}})},686:(e,A,Y)=>{"use strict";Y.d(A,{S:()=>l});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(2668),n=Y(4968);const l=(0,m.op)({multinomial_:function(e,A,Y,m=!1){const l=(0,i._1)(e,"logits","multinomial"),p=l.size,d=l.rank;if(p<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${p}.`);if(d>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${d}`);Y=Y||Math.random();const o={logits:1===d?(0,n.X)(l,[1,-1]):l},r={numSamples:A,seed:Y,normalized:m},s=t.BV.runKernel(a.NZ,o,r);return 1===d?(0,n.X)(s,[s.size]):s}})},7370:(e,A,Y)=>{"use strict";Y.d(A,{W:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({neg_:function(e){const A={x:(0,i._1)(e,"x","neg")};return t.BV.runKernel(a.ku,A)}})},6500:(e,A,Y)=>{"use strict";Y.d(A,{Q:()=>l});var t=Y(7097),a=Y(9121),i=Y(747),m=Y(3740),n=Y(2200);const l=(0,Y(2668).op)({notEqual_:function(e,A){let Y=(0,m._1)(e,"a","notEqual","string_or_numeric"),l=(0,m._1)(A,"b","notEqual","string_or_numeric");[Y,l]=(0,i.makeTypesMatch)(Y,l),(0,n.$N)(Y.shape,l.shape);const p={a:Y,b:l};return t.BV.runKernel(a.yQ,p)}})},6708:(e,A,Y)=>{"use strict";Y.d(A,{l:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({oneHot_:function(e,A,Y=1,m=0){if(A<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${A}`);const n={indices:(0,i._1)(e,"indices","oneHot","int32")},l={depth:A,onValue:Y,offValue:m};return t.BV.runKernel(a.we,n,l)}})},4917:(e,A,Y)=>{"use strict";Y.d(A,{i:()=>n});var t=Y(7097),a=Y(569),i=Y(1661),m=Y(9640);function n(e,A="float32"){if("complex64"===A){const A=n(e,"float32"),Y=(0,m.l)(e,"float32");return(0,i.P)(A,Y)}const Y=(0,a.p8)((0,a.NA)(e),A);return t.BV.makeTensor(Y,e,A)}},7846:(e,A,Y)=>{"use strict";Y.d(A,{J:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({onesLike_:function(e){const A={x:(0,i._1)(e,"x","onesLike")};return t.BV.runKernel(a.qW,A)}})},2668:(e,A,Y)=>{"use strict";Y.d(A,{z:()=>i,op:()=>m});var t=Y(7097),a=Y(569);const i="__op";function m(e){const A=Object.keys(e);if(1!==A.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${A.length} keys.`);let Y=A[0];const m=e[Y];Y.endsWith("_")&&(Y=Y.substring(0,Y.length-1)),Y+=i;const n=(...e)=>{t.BV.startScope(Y);try{const A=m(...e);return(0,a.tI)(A)&&console.error("Cannot return a Promise inside of tidy."),t.BV.endScope(A),A}catch(e){throw t.BV.endScope(null),e}};return Object.defineProperty(n,"name",{value:Y,configurable:!0}),n}},4885:(e,A,Y)=>{"use strict";Y.d(A,{zvA:()=>F.z,WnP:()=>t.W,Khb:()=>a.K,__u:()=>i._,IHx:()=>m.I,QBD:()=>n.Q,$6P:()=>l.$,YjB:()=>p.Y,NqF:()=>d.N,vHJ:()=>o.v,ZRM:()=>r.Z,VfV:()=>s.V,z4N:()=>Z.z,fvJ:()=>N.f,C80:()=>j.C,wS1:()=>h.w,uR5:()=>W.u,zEQ:()=>k,tgs:()=>R.t,Dxk:()=>y,JY5:()=>B,p3b:()=>S,E4h:()=>f.E,yE8:()=>x.y,anm:()=>IY,XsQ:()=>T.X,UFq:()=>q.U,f3b:()=>I.f,pju:()=>v.p,mDi:()=>w.m,iUl:()=>U.i,d9v:()=>K.d,PYB:()=>O.P,zoF:()=>V.z,gME:()=>D,Izb:()=>C,MNy:()=>z,ZaL:()=>H,PAt:()=>E.P,Tek:()=>_.T,bc:()=>M.b,pdZ:()=>L.p,$QV:()=>Ae,mCk:()=>Ye.m,f9Y:()=>te.f,mew:()=>_Y,zbp:()=>ae.z,ppE:()=>ie.p,nTT:()=>me.n,B10:()=>ne.B,Ka3:()=>le,WmZ:()=>pe.W,hiC:()=>de.h,NTj:()=>oe.N,AKD:()=>re,rvX:()=>HY,WYO:()=>se.W,pyx:()=>Ze.p,GRh:()=>EY,DgJ:()=>Ne.D,qNN:()=>je.q,Qqt:()=>he.Q,dt4:()=>We.d,t$B:()=>ue.t,iyy:()=>ce,kp_:()=>nY.k,hlL:()=>Ge.h,GWj:()=>Fe.G,qPi:()=>Xe.q,imm:()=>LY,Iqj:()=>Je.I,dbB:()=>zY.d,pjt:()=>ge.p,brS:()=>ke.b,Sxn:()=>lY.S,asL:()=>fe.a,BHj:()=>Kt,V3u:()=>MY,wx0:()=>pY.w,xVT:()=>Re,UWc:()=>be,i2d:()=>ye.i,hi7:()=>Be.h,d9m:()=>Se.d,zN1:()=>xe.z,$r2:()=>Ot,SX3:()=>Te.S,G9k:()=>qe.G,cM7:()=>Ie.c,Krr:()=>ve.K,e_t:()=>Oe,CmS:()=>De.C,l_t:()=>_e,HvI:()=>Me.H,hJK:()=>Le.h,K5V:()=>Pe.K,egP:()=>$e,MB5:()=>Dt,OI3:()=>c.O,Fp7:()=>ze.F,_sB:()=>eA._,YQQ:()=>AA.Y,Ip$:()=>YA.I,gWQ:()=>tA.g,J69:()=>aA.J,ry_:()=>nA,VV$:()=>lA.V,LTh:()=>pA.L,VdP:()=>dA.V,wQq:()=>oA.w,Gi7:()=>sA,p_:()=>OY,dC7:()=>G.d,rq4:()=>ZA,SJ_:()=>NA.S,W76:()=>Ue.W,KOy:()=>UY,Quu:()=>jA.Q,lfX:()=>hA.l,iUs:()=>iA.i,JpU:()=>WA.J,op:()=>F.op,N2O:()=>uA,vku:()=>VA.v,pNR:()=>cA,koy:()=>GA,t1L:()=>FA,lGY:()=>XA,d_R:()=>kA,sQ3:()=>fA.s,AL3:()=>RA.A,S0v:()=>bA.S,WVs:()=>yA.W,TN_:()=>BA,wzB:()=>xA,nGf:()=>TA,LGj:()=>qA.L,w6H:()=>IA.w,kwC:()=>vA.k,M25:()=>wA.M,UYe:()=>UA.U,btT:()=>KA.b,XLQ:()=>$.X,GYS:()=>OA.G,SDf:()=>DA,diP:()=>CA,sx7:()=>zA,mG2:()=>HA,QEs:()=>dY.Q,NMM:()=>EA.N,bp0:()=>_A.b,iD$:()=>MA.i,snQ:()=>DY.s,U8D:()=>LA.U,U_I:()=>PA,ODp:()=>QA.O,XD2:()=>X.X,Xxe:()=>$A.X,tdS:()=>Ut,O$l:()=>eY.O,R_K:()=>AY.R,tPi:()=>J.t,jZU:()=>YY,SmN:()=>tY,CnO:()=>aY,p0P:()=>iY,XAC:()=>mY.X,Wvh:()=>Ke.W,fBT:()=>gA.f,rVs:()=>Ct,ers:()=>CY.e,uN7:()=>wt,Vl2:()=>oY.V,_b3:()=>rY._,h62:()=>rA.h,$i:()=>sY.$,L9e:()=>ZY.L,knu:()=>NY.k,Nbs:()=>jY.N,NXj:()=>hY.N,Z_8:()=>zt,luU:()=>He.l,Smz:()=>Ee.S,ORZ:()=>WY.O,AEp:()=>g.A,XeE:()=>uY.X,RRF:()=>VY.R,odF:()=>GY,wOQ:()=>FY.w,yXz:()=>XY,Bfx:()=>JY,xZs:()=>gY,Gg6:()=>Ve.G,hg7:()=>kY.h,p4s:()=>vY.p,Xu6:()=>fY.X,Two:()=>RY.T,pUJ:()=>bY,HHK:()=>yY.H,VD$:()=>BY,arb:()=>SY.a,itS:()=>xY.i,lls:()=>TY.l,P84:()=>qY.P});var t=Y(6235),a=Y(7839),i=Y(1470),m=Y(6407),n=Y(3135),l=Y(781),p=Y(2998),d=Y(47),o=Y(7394),r=Y(2421),s=Y(1891),Z=Y(7037),N=Y(9812),j=Y(369),h=Y(5176),W=Y(1749),u=Y(3740),V=Y(6884),c=Y(8687),G=Y(4841),F=Y(2668),X=Y(625),J=Y(2676),g=Y(1869);const k=(0,F.op)({basicLSTMCell_:function(e,A,Y,t,a,i){const n=(0,u._1)(e,"forgetBias","basicLSTMCell"),l=(0,u._1)(A,"lstmKernel","basicLSTMCell"),p=(0,u._1)(Y,"lstmBias","basicLSTMCell"),d=(0,u._1)(t,"data","basicLSTMCell"),o=(0,u._1)(a,"c","basicLSTMCell"),r=(0,u._1)(i,"h","basicLSTMCell"),s=(0,V.z)([d,r],1),Z=(0,c.O)(s,l),N=(0,m.I)(Z,p),j=N.shape[0],h=N.shape[1]/4,W=[j,h],F=(0,J.t)(N,[0,0],W),k=(0,J.t)(N,[0,h],W),f=(0,J.t)(N,[0,2*h],W),R=(0,J.t)(N,[0,3*h],W),b=(0,m.I)((0,G.d)((0,X.X)(F),(0,g.A)(k)),(0,G.d)(o,(0,X.X)((0,m.I)(n,f))));return[b,(0,G.d)((0,g.A)(b),(0,X.X)(R))]}});var f=Y(8441),R=Y(7505),b=Y(569);const y=(0,F.op)({batchNorm2d_:function(e,A,Y,t,a,i){const m=(0,u._1)(e,"x","batchNorm"),n=(0,u._1)(A,"mean","batchNorm"),l=(0,u._1)(Y,"variance","batchNorm");let p,d;return null!=a&&(p=(0,u._1)(a,"scale","batchNorm")),null!=t&&(d=(0,u._1)(t,"offset","batchNorm")),b.hu(2===m.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${m.rank}.`)),b.hu(2===n.rank||1===n.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${n.rank}.`)),b.hu(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=p&&b.hu(2===p.rank||1===p.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${p.rank}.`)),null!=d&&b.hu(2===d.rank||1===d.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${d.rank}.`)),(0,R.t)(m,n,l,d,p,i)}});const B=(0,F.op)({batchNorm3d_:function(e,A,Y,t,a,i){const m=(0,u._1)(e,"x","batchNorm"),n=(0,u._1)(A,"mean","batchNorm"),l=(0,u._1)(Y,"variance","batchNorm");let p,d;return null!=a&&(p=(0,u._1)(a,"scale","batchNorm")),null!=t&&(d=(0,u._1)(t,"offset","batchNorm")),b.hu(3===m.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${m.rank}.`)),b.hu(3===n.rank||1===n.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${n.rank}.`)),b.hu(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=p&&b.hu(3===p.rank||1===p.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${p.rank}.`)),null!=d&&b.hu(3===d.rank||1===d.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${d.rank}.`)),(0,R.t)(m,n,l,d,p,i)}});const S=(0,F.op)({batchNorm4d_:function(e,A,Y,t,a,i){const m=(0,u._1)(e,"x","batchNorm"),n=(0,u._1)(A,"mean","batchNorm"),l=(0,u._1)(Y,"variance","batchNorm");let p,d;return null!=a&&(p=(0,u._1)(a,"scale","batchNorm")),null!=t&&(d=(0,u._1)(t,"offset","batchNorm")),b.hu(4===m.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${m.rank}.`)),b.hu(4===n.rank||1===n.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${n.rank}.`)),b.hu(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=p&&b.hu(4===p.rank||1===p.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${p.rank}.`)),null!=d&&b.hu(4===d.rank||1===d.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${d.rank}.`)),(0,R.t)(m,n,l,d,p,i)}});var x=Y(3865),T=Y(8194),q=Y(8247),I=Y(2657),v=Y(2271),w=Y(6825),U=Y(2279),K=Y(8723),O=Y(1661);const D=(0,F.op)({concat1d_:function(e){return(0,V.z)(e,0)}});const C=(0,F.op)({concat2d_:function(e,A){return(0,V.z)(e,A)}});const z=(0,F.op)({concat3d_:function(e,A){return(0,V.z)(e,A)}});const H=(0,F.op)({concat4d_:function(e,A){return(0,V.z)(e,A)}});var E=Y(1355),_=Y(4794),M=Y(1405),L=Y(473),P=Y(7097),Q=Y(9121),$=Y(4968);const ee=(0,F.op)({conv3DBackpropInput_:function(e,A,Y,t,a){b.hu(e.length===A.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${A.rank}) must match`));let i=e,m=A,n=!1;4===A.rank&&(n=!0,m=(0,$.X)(A,[1,A.shape[0],A.shape[1],A.shape[2],A.shape[3]]),i=[1,e[0],e[1],e[2],e[3]]);const l=i[4],p=m.shape[4];b.hu(5===i.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${i.length}.`)),b.hu(5===m.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${m.rank}`)),b.hu(5===Y.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${Y.rank}`)),b.hu(l===Y.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${Y.shape[3]}.`)),b.hu(p===Y.shape[4],(()=>`Error in conv3dDerInput: depth of output (${p}) must match output depth for filter ${Y.shape[4]}.`));const d={dy:m,filter:Y},o={pad:a,strides:t,inputShape:i},r=P.BV.runKernel(Q.ik,d,o);return n?(0,$.X)(r,[r.shape[1],r.shape[2],r.shape[3],r.shape[4]]):r}});const Ae=(0,F.op)({conv3dTranspose_:function(e,A,Y,t,a){const i=(0,u._1)(e,"x","conv3dTranspose"),m=(0,u._1)(A,"filter","conv3dTranspose");return ee(Y,i,m,t,a)}});var Ye=Y(173),te=Y(2699),ae=Y(7405),ie=Y(5746),me=Y(9112),ne=Y(4718);const le=(0,F.op)({diag_:function(e){const A={x:(0,u._1)(e,"x","diag")};return P.BV.runKernel(Q.$w,A)}});var pe=Y(557),de=Y(1274),oe=Y(9322);const re=(0,F.op)({dot_:function(e,A){const Y=(0,u._1)(e,"t1","dot"),t=(0,u._1)(A,"t2","dot");b.hu(!(1!==Y.rank&&2!==Y.rank||1!==t.rank&&2!==t.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${Y.rank} and ${t.rank}.`));const a=1===Y.rank?Y.size:Y.shape[1],i=1===t.rank?t.size:t.shape[0];if(b.hu(a===i,(()=>`Error in dot: inner dimensions of inputs must match, but got ${a} and ${i}.`)),1===Y.rank&&1===t.rank){const e=(0,$.X)(Y,[1,-1]),A=(0,$.X)(t,[-1,1]),a=(0,c.O)(e,A);return(0,$.X)(a,[])}if(1===Y.rank&&2===t.rank){const e=(0,$.X)(Y,[1,-1]),A=(0,$.X)(t,[t.shape[0],t.shape[1]]),a=(0,c.O)(e,A);return(0,$.X)(a,[a.size])}if(2===Y.rank&&1===t.rank){const e=(0,$.X)(t,[-1,1]),A=(0,c.O)(Y,e);return(0,$.X)(A,[A.size])}{const e=(0,$.X)(t,[t.shape[0],t.shape[1]]);return(0,c.O)(Y,e)}}});var se=Y(4653),Ze=Y(3233),Ne=Y(6477),je=Y(4650),he=Y(4842),We=Y(1300),ue=Y(3426),Ve=Y(7501);const ce=(0,F.op)({eye_:function(e,A,Y,t="float32"){null==A&&(A=e);const a=(0,I.f)([e,A],t),i=e<=A?e:A;for(let e=0;e<i;++e)a.set(1,e,e);const m=(0,$.X)(a.toTensor(),[e,A]);if(null==Y)return m;if(1===Y.length)return(0,Ve.G)((0,We.d)(m,0),[Y[0],1,1]);if(2===Y.length)return(0,Ve.G)((0,We.d)((0,We.d)(m,0),0),[Y[0],Y[1],1,1]);if(3===Y.length)return(0,Ve.G)((0,We.d)((0,We.d)((0,We.d)(m,0),0),0),[Y[0],Y[1],Y[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${Y.length}D.`)}});var Ge=Y(4006),Fe=Y(6943),Xe=Y(9165),Je=Y(4926),ge=Y(636),ke=Y(7630),fe=Y(4386);const Re=(0,F.op)({isFinite_:function(e){const A={x:(0,u._1)(e,"x","isFinite")};return P.BV.runKernel(Q.av,A)}});const be=(0,F.op)({isInf_:function(e){const A={x:(0,u._1)(e,"x","isInf")};return P.BV.runKernel(Q.iW,A)}});var ye=Y(6230),Be=Y(9133),Se=Y(6573),xe=Y(624),Te=Y(4135),qe=Y(9648),Ie=Y(2597),ve=Y(7474),we=Y(633),Ue=Y(7370),Ke=Y(3694);const Oe=(0,F.op)({logSigmoid_:function(e){const A=(0,u._1)(e,"x","logSigmoid"),Y=(0,we.cb)((e=>({value:(0,Ue.W)((0,Ke.W)((0,Ue.W)(e))),gradFunc:A=>(0,G.d)(A,(0,X.X)((0,Ue.W)(e)))})));return Y(A)}});var De=Y(1510),Ce=Y(3591),ze=Y(3307),He=Y(827),Ee=Y(5475);const _e=(0,F.op)({logSumExp_:function(e,A=null,Y=!1){const t=(0,u._1)(e,"x","logSumExp"),a=(0,b.EC)(A,t.shape),i=(0,ze.F)(t,a,!0),n=(0,He.l)(t,i),l=(0,he.Q)(n),p=(0,Ee.S)(l,a),d=(0,Ie.c)(p),o=(0,m.I)((0,$.X)(i,d.shape),d);if(Y){const e=(0,Ce.rv)(o.shape,a);return(0,$.X)(o,e)}return o}});var Me=Y(2856),Le=Y(8651),Pe=Y(5750),Qe=Y(2200);const $e=(0,F.op)({logicalXor_:function(e,A){const Y=(0,u._1)(e,"a","logicalXor","bool"),t=(0,u._1)(A,"b","logicalXor","bool");return(0,Qe.$N)(Y.shape,t.shape),(0,Me.H)((0,Pe.K)(e,A),(0,Le.h)((0,Me.H)(e,A)))}});var eA=Y(1174),AA=Y(5020),YA=Y(6877),tA=Y(632),aA=Y(5130),iA=Y(4917),mA=Y(4077);function nA(e,A,{indexing:Y="xy"}={}){if("xy"!==Y&&"ij"!==Y)throw new TypeError(`${Y} is not a valid third argument to meshgrid`);if(void 0===e)return[];let t=(0,u._1)(e,"x","meshgrid",e instanceof mA.es?e.dtype:"float32");if(void 0===A)return[t];let a=(0,u._1)(A,"y","meshgrid",A instanceof mA.es?A.dtype:"float32");const i=(0,b.NA)(t.shape),m=(0,b.NA)(a.shape);return"xy"===Y?(t=(0,$.X)(t,[1,-1]),a=(0,$.X)(a,[-1,1]),[(0,c.O)((0,iA.i)([m,1],t.dtype),t),(0,c.O)(a,(0,iA.i)([1,i],a.dtype))]):(t=(0,$.X)(t,[-1,1]),a=(0,$.X)(a,[1,-1]),[(0,c.O)(t,(0,iA.i)([1,m],t.dtype)),(0,c.O)((0,iA.i)([i,1],a.dtype),a)])}var lA=Y(5735),pA=Y(4513),dA=Y(1483),oA=Y(5228),rA=Y(248);const sA=(0,F.op)({moments_:function(e,A=null,Y=!1){e=(0,u._1)(e,"x","moments");const t=(0,b.EC)(A,e.shape),a=(0,aA.J)(e,t,Y);let i=a.shape;Y||(i=(0,Ce.rv)(a.shape,t));const m=(0,rA.h)((0,He.l)((0,v.p)(e,"float32"),(0,$.X)(a,i)));return{mean:a,variance:(0,aA.J)(m,t,Y)}}});const ZA=(0,F.op)({multiRNNCell_:function(e,A,Y,t){const a=(0,u._1)(A,"data","multiRNNCell"),i=(0,u.sI)(Y,"c","multiRNNCell"),m=(0,u.sI)(t,"h","multiRNNCell");let n=a;const l=[];for(let A=0;A<e.length;A++){const Y=e[A](n,i[A],m[A]);l.push(Y[0]),l.push(Y[1]),n=Y[1]}const p=[],d=[];for(let e=0;e<l.length;e+=2)p.push(l[e]),d.push(l[e+1]);return[p,d]}});var NA=Y(686),jA=Y(6500),hA=Y(6708),WA=Y(7846);const uA=(0,F.op)({outerProduct_:function(e,A){const Y=(0,u._1)(e,"v1","outerProduct"),t=(0,u._1)(A,"v2","outerProduct");b.hu(1===Y.rank&&1===t.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${Y.rank} and ${t.rank}.`));const a=(0,$.X)(Y,[-1,1]),i=(0,$.X)(t,[1,-1]);return(0,c.O)(a,i)}});var VA=Y(9682);const cA=(0,F.op)({pad1d_:function(e,A,Y=0){return(0,b.hu)(2===A.length,(()=>"Invalid number of paddings. Must be length of 2.")),(0,VA.v)(e,[A],Y)}});const GA=(0,F.op)({pad2d_:function(e,A,Y=0){return(0,b.hu)(2===A.length&&2===A[0].length&&2===A[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),(0,VA.v)(e,A,Y)}});const FA=(0,F.op)({pad3d_:function(e,A,Y=0){return(0,b.hu)(3===A.length&&2===A[0].length&&2===A[1].length&&2===A[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),(0,VA.v)(e,A,Y)}});const XA=(0,F.op)({pad4d_:function(e,A,Y=0){return(0,b.hu)(4===A.length&&2===A[0].length&&2===A[1].length&&2===A[2].length&&2===A[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),(0,VA.v)(e,A,Y)}});var JA=Y(2582),gA=Y(7918);const kA=(0,F.op)({pool_:function(e,A,Y,t,a,i){null==a&&(a=[1,1]),null==i&&(i=1),0===t&&(t="valid");const m=(0,u._1)(e,"x","maxPool");let n=m,l=!1;3===m.rank&&(l=!0,n=(0,$.X)(m,[1,m.shape[0],m.shape[1],m.shape[2]])),b.hu(JA.jT(i,a),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${i} and dilations '${a}'`));const p=JA.Xw(n.shape,A,i,a,t),d=[p.dilationHeight,p.dilationWidth];let o;o="same"===t?function(e,A){const Y=e.map(((e,Y)=>e+(e-1)*(A[Y]-1))).map((e=>e-1)),t=Y.map((e=>Math.floor(e/2))),a=Y.map(((e,A)=>e-t[A]));return Y.map(((e,A)=>[t[A],a[A]]))}([p.filterHeight,p.filterWidth],d):[[0,0],[0,0]];const r=1===d[0]&&1===d[1],[s,Z]=function(e,A,Y){const t=Y.map((e=>e[0])),a=Y.map((e=>e[1])),i=e.concat(t,a),m=A.map(((e,A)=>(e-i[A]%e)%e)),n=a.map(((e,A)=>e+m[A])),l=A.map(((e,A)=>[t[A],n[A]])),p=A.map(((e,A)=>[0,m[A]]));return[l,p]}([p.inHeight,p.inWidth],d,o),N=r?t:"valid",j=r?n:(0,gA.f)(n,d,s),W=("avg"===Y?()=>(0,h.w)(j,A,i,N):()=>(0,eA._)(j,A,i,N))(),V=r?W:(0,f.E)(W,d,Z);return l?(0,$.X)(V,[V.shape[1],V.shape[2],V.shape[3]]):V}});var fA=Y(3453),RA=Y(8151),bA=Y(9798),yA=Y(9451);const BA=(0,F.op)({rand_:function(e,A,Y){const t=(0,b.NA)(e);let a=null;if(null==Y||"float32"===Y)a=new Float32Array(t);else if("int32"===Y)a=new Int32Array(t);else{if("bool"!==Y)throw new Error(`Unknown data type ${Y}`);a=new Uint8Array(t)}for(let e=0;e<t;e++)a[e]=A();return P.BV.makeTensor(a,e,Y)}});var SA=Y(6845);const xA=(0,F.op)({randomGamma_:function(e,A,Y=1,t="float32",a){if(null==Y&&(Y=1),null==t&&(t="float32"),"float32"!==t&&"int32"!==t)throw new Error(`Unsupported data type ${t}`);const i=new SA.T9(A,Y,t,a),m=(0,I.f)(e,t);for(let e=0;e<m.values.length;e++)m.values[e]=i.nextValue();return m.toTensor()}});const TA=(0,F.op)({randomNormal_:function(e,A=0,Y=1,t,a){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);const i=new SA.Yi(A,Y,t,!1,a),m=(0,I.f)(e,t);for(let e=0;e<m.values.length;e++)m.values[e]=i.nextValue();return m.toTensor()}});var qA=Y(5002),IA=Y(7245),vA=Y(766),wA=Y(9036),UA=Y(7409),KA=Y(3582),OA=Y(7486);const DA=(0,F.op)({reverse1d_:function(e){const A=(0,u._1)(e,"x","reverse");return b.hu(1===A.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${A.rank}.`)),(0,OA.G)(A,0)}});const CA=(0,F.op)({reverse2d_:function(e,A){const Y=(0,u._1)(e,"x","reverse");return b.hu(2===Y.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${Y.rank}.`)),(0,OA.G)(Y,A)}});const zA=(0,F.op)({reverse3d_:function(e,A){const Y=(0,u._1)(e,"x","reverse");return b.hu(3===Y.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${Y.rank}.`)),(0,OA.G)(Y,A)}});const HA=(0,F.op)({reverse4d_:function(e,A){const Y=(0,u._1)(e,"x","reverse");return b.hu(4===Y.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${Y.rank}.`)),(0,OA.G)(Y,A)}});var EA=Y(7809),_A=Y(2634),MA=Y(9494),LA=Y(5503);const PA=(0,F.op)({separableConv2d_:function(e,A,Y,t,a,i=[1,1],m="NHWC"){const n=(0,u._1)(e,"x","separableConv2d"),l=(0,u._1)(A,"depthwiseFilter","separableConv2d"),p=(0,u._1)(Y,"pointwiseFilter","separableConv2d");let d=n,o=!1;if(3===n.rank&&(o=!0,d=(0,$.X)(n,[1,n.shape[0],n.shape[1],n.shape[2]])),"NCHW"===m)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");b.hu(4===d.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${d.rank}.`)),b.hu(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),b.hu(4===p.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),b.hu(1===p.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${p.shape[0]}.`)),b.hu(1===p.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${p.shape[1]}.`));const r=l.shape[2],s=l.shape[3];b.hu(p.shape[2]===r*s,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${r*s}, but got ${p.shape[2]}.`));const Z=(0,ne.B)(d,l,t,a,m,i),N=(0,_.T)(Z,p,1,"valid",m);return o?(0,$.X)(N,[N.shape[1],N.shape[2],N.shape[3]]):N}});var QA=Y(6567),$A=Y(4434),eY=Y(9331),AY=Y(3254);const YY=(0,F.op)({slice1d_:function(e,A,Y){const t=(0,u._1)(e,"x","slice1d");return b.hu(1===t.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${t.rank} tensor`)),(0,J.t)(t,[A],[Y])}});const tY=(0,F.op)({slice2d_:function(e,A,Y){const t=(0,u._1)(e,"x","slice2d");return b.hu(2===t.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${t.rank} tensor`)),(0,J.t)(t,A,Y)}});const aY=(0,F.op)({slice3d_:function(e,A,Y){const t=(0,u._1)(e,"x","slice3d");return b.hu(3===t.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${t.rank} tensor`)),(0,J.t)(t,A,Y)}});const iY=(0,F.op)({slice4d_:function(e,A,Y){const t=(0,u._1)(e,"x","slice4d");return b.hu(4===t.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${t.rank} tensor`)),(0,J.t)(t,A,Y)}});var mY=Y(682),nY=Y(7020),lY=Y(8447),pY=Y(4415),dY=Y(3710),oY=Y(8644),rY=Y(3261),sY=Y(5265),ZY=Y(9590),NY=Y(2991),jY=Y(1901),hY=Y(5158),WY=Y(1173),uY=Y(701),VY=Y(6092),cY=Y(7852);function GY(e,A,Y){if((0,b.Cq)(e),null!=A&&2!==A.length)throw new Error("tensor2d() requires shape to have two numbers");const t=(0,u.C)(e,Y);if(2!==t.length&&1!==t.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===t.length&&null==A)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return(0,cY.H)(e,A,t,Y)}var FY=Y(9906);function XY(e,A,Y){if((0,b.Cq)(e),null!=A&&4!==A.length)throw new Error("tensor4d() requires shape to have four numbers");const t=(0,u.C)(e,Y);if(4!==t.length&&1!==t.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===t.length&&null==A)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return(0,cY.H)(e,A,t,Y)}function JY(e,A,Y){if((0,b.Cq)(e),null!=A&&5!==A.length)throw new Error("tensor5d() requires shape to have five numbers");const t=(0,u.C)(e,Y);if(5!==t.length&&1!==t.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===t.length&&null==A)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return(0,cY.H)(e,A,t,Y)}function gY(e,A,Y){if((0,b.Cq)(e),null!=A&&6!==A.length)throw new Error("tensor6d() requires shape to have six numbers");const t=(0,u.C)(e,Y);if(6!==t.length&&1!==t.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===t.length&&null==A)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return A=A||t,(0,cY.H)(e,A,t,Y)}var kY=Y(3243),fY=Y(3596),RY=Y(9608);const bY=(0,F.op)({unsortedSegmentSum_:function(e,A,Y){const t=(0,u._1)(e,"x","unsortedSegmentSum"),a=(0,u._1)(A,"segmentIds","unsortedSegmentSum","int32");(0,b.hu)((0,b.GN)(Y),(()=>"numSegments must be of dtype int"));const i={x:t,segmentIds:a},m={numSegments:Y};return P.BV.runKernel(Q.Qv,i,m)}});var yY=Y(4136);function BY(e,A=!0,Y,t){return P.BV.makeVariable(e,A,Y,t)}var SY=Y(5912),xY=Y(6380),TY=Y(9640),qY=Y(6577);const IY=async function(e,A,Y){const t=(0,u._1)(e,"tensor","boolMask"),a=(0,u._1)(A,"mask","boolMask","bool"),i=null==Y?0:Y,m=a.rank,n=t.shape;b.hu(m>0,(()=>"mask cannot be scalar")),b.k5(n.slice(i,i+m),a.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let e=i;e<i+m;e++)l*=n[e];const p=n.slice(0,i).concat([l],n.slice(i+m)),d=(0,$.X)(t,p),o=(0,$.X)(a,[-1]),r=await(0,xY.i)(o),s=(0,ZY.L)(r,[1]),Z=(0,Je.I)(d,s,i);return e!==t&&t.dispose(),A!==a&&a.dispose(),s.dispose(),d.dispose(),o.dispose(),r.dispose(),Z};var vY=Y(9065);function wY(e,A,Y=null){if(0===e.rank)return(0,t.W)(e);if(1!==e.rank&&null===Y)return wY((0,$.X)(e,[-1]),A,Y);if(1===e.rank||"number"==typeof Y||Array.isArray(Y)&&1===Y.length){if(1===A)return(0,Ee.S)((0,t.W)(e),Y);if(A===1/0)return(0,ze.F)((0,t.W)(e),Y);if(A===-1/0)return(0,lA.V)((0,t.W)(e),Y);if("euclidean"===A||2===A)return(0,rY._)((0,Ee.S)((0,fA.s)((0,t.W)(e),(0,MA.i)(2,"int32")),Y));throw new Error(`Error in norm: invalid ord value: ${A}`)}if(Array.isArray(Y)&&2===Y.length){if(1===A)return(0,ze.F)((0,Ee.S)((0,t.W)(e),Y[0]),Y[1]-1);if(A===1/0)return(0,ze.F)((0,Ee.S)((0,t.W)(e),Y[1]),Y[0]);if(A===-1/0)return(0,lA.V)((0,Ee.S)((0,t.W)(e),Y[1]),Y[0]);if("fro"===A||"euclidean"===A)return(0,rY._)((0,Ee.S)((0,rA.h)(e),Y));throw new Error(`Error in norm: invalid ord value: ${A}`)}throw new Error(`Error in norm: invalid axis: ${Y}`)}const UY=(0,F.op)({norm_:function(e,A="euclidean",Y=null,t=!1){const a=wY(e=(0,u._1)(e,"x","norm"),A,Y);let i=a.shape;if(t){const A=(0,b.EC)(Y,e.shape);i=Ce.rv(a.shape,A)}return(0,$.X)(a,i)}});var KY=Y(747);const OY=(0,F.op)({movingAverage_:function(e,A,Y,t,a=!0){const i=(0,u._1)(e,"v","movingAverage"),n=(0,u._1)(A,"x","movingAverage"),l=(0,u._1)(Y,"decay","movingAverage");(0,KY.assertTypesMatch)(i,n),b.hu(b.cO(i.shape,n.shape),(()=>"Shape mismatch in v and x"));const p=(0,MA.i)(1),d=(0,He.l)(p,l);let o=(0,G.d)((0,He.l)(n,i),d);if(a){b.hu(null!=t,(()=>"When using zeroDebias: true, step is required."));const e=(0,u._1)(t,"step","movingAverage");o=(0,de.h)(o,(0,He.l)(p,(0,fA.s)(l,e)))}return(0,m.I)(i,o)}});var DY=Y(3100),CY=Y(9758),zY=Y(7494);const HY=(0,F.op)({dropout_:function(e,A,Y,t){const a=(0,u._1)(e,"x","dropout");if(b.hu("float32"===a.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${a.dtype} tensor instead.`)),b.hu(A>=0&&A<1,(()=>`rate must be a float in the range [0, 1), but got ${A}.`)),0===A)return e instanceof mA.es?a.clone():a;const i=function(e,A){if(null==A)return e.shape.slice();if(b.cO(e.shape,A))return A;if(e.shape.length===A.length){const Y=[];for(let t=0;t<e.shape.length;t++)null==A[t]&&null!=e.shape[t]?Y.push(e.shape[t]):Y.push(A[t]);return Y}return A}(a,Y),n=1-A,l=(0,de.h)((0,Fe.G)((0,m.I)((0,qA.L)(i,0,1,"float32",t),n)),n);return(0,G.d)(a,l)}});function EY(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function _Y(e,A,Y){const t=1-e%2,a=new Float32Array(e);for(let i=0;i<e;++i){const m=2*Math.PI*i/(e+t-1);a[i]=A-Y*Math.cos(m)}return(0,VY.R)(a,"float32")}const MY=async function(e,A,Y=1){const t=(0,u._1)(e,"predictions","inTopK"),a=(0,u._1)(A,"targets","inTopK");(0,b.hu)(t.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${t.rank}`)),(0,b.hu)(t.rank-1===a.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${t.rank} and targets rank ${a.rank}`)),(0,b.k5)(t.shape.slice(0,t.shape.length-1),a.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const i=t.shape[t.shape.length-1];(0,b.hu)(Y>0&&Y<=i,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${i}), but got ${Y}`));const m=await t.data(),n=await a.data(),[l,p]=[m.length/i,i],d=(0,b.WP)("bool",l);for(let e=0;e<l;e++){const A=e*p,t=m.subarray(A,A+p),a=[];for(let e=0;e<t.length;e++)a.push({value:t[e],index:e});a.sort(((e,A)=>A.value-e.value)),d[e]=0;for(let A=0;A<Y;A++)if(a[A].index===n[e]){d[e]=1;break}}return e!==t&&t.dispose(),A!==a&&a.dispose(),(0,uY.X)(d,a.shape,"bool")};var LY=Y(2277);const PY=(0,F.op)({hammingWindow_:function(e){return _Y(e,.54,.46)}});const QY=(0,F.op)({hannWindow_:function(e){return _Y(e,.5,.5)}});const $Y=(0,F.op)({frame_:function(e,A,Y,t=!1,a=0){let i=0;const m=[];for(;i+A<=e.size;)m.push((0,J.t)(e,i,A)),i+=Y;if(t)for(;i<e.size;){const t=i+A-e.size,n=(0,V.z)([(0,J.t)(e,i,A-t),(0,Ge.h)([t],a)]);m.push(n),i+=Y}return 0===m.length?GY([],[0,A]):(0,$.X)((0,V.z)(m),[m.length,A])}});const et=(0,F.op)({stft_:function(e,A,Y,t,a=QY){null==t&&(t=EY(A));const i=$Y(e,A,Y),m=(0,G.d)(i,a(A));return(0,dY.Q)(m,t)}});const At=(0,F.op)({cropAndResize_:function(e,A,Y,t,a="bilinear",i=0){const m=(0,u._1)(e,"image","cropAndResize"),n=(0,u._1)(A,"boxes","cropAndResize","float32"),l=(0,u._1)(Y,"boxInd","cropAndResize","int32"),p=n.shape[0];b.hu(4===m.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${m.rank}.`)),b.hu(2===n.rank&&4===n.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${p},4] but had shape ${n.shape}.`)),b.hu(1===l.rank&&l.shape[0]===p,(()=>`Error in cropAndResize: boxInd must be have size [${p}] but had shape ${n.shape}.`)),b.hu(2===t.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${t.length}.`)),b.hu(t[0]>=1&&t[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${t}`)),b.hu("bilinear"===a||"nearest"===a,(()=>`method must be bilinear or nearest, but was ${a}`));const d={image:m,boxes:n,boxInd:l},o={method:a,extrapolationValue:i,cropSize:t};return P.BV.runKernel(Q.Vc,d,o)}});const Yt=(0,F.op)({flipLeftRight_:function(e){const A=(0,u._1)(e,"image","flipLeftRight","float32");b.hu(4===A.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${A.rank}.`));const Y={image:A};return P.BV.runKernel(Q.Uy,Y,{})}});const tt=(0,F.op)({grayscaleToRGB_:function(e){const A=(0,u._1)(e,"image","grayscaleToRGB"),Y=A.rank-1,t=A.shape[Y];b.hu(A.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${A.rank}.`)),b.hu(1===t,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${t}.`));const a=new Array(A.rank);return a.fill(1,0,Y),a[Y]=3,(0,Ve.G)(A,a)}});const at=(0,F.op)({rotateWithOffset_:function(e,A,Y=0,t=.5){const a=(0,u._1)(e,"image","rotateWithOffset","float32");b.hu(4===a.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${a.rank}.`));const i={image:a},m={radians:A,fillValue:Y,center:t};return P.BV.runKernel(Q.b9,i,m)}});function it(e,A,Y,t,a,i){null==t&&(t=.5),null==a&&(a=Number.NEGATIVE_INFINITY),null==i&&(i=0);const m=e.shape[0];return Y=Math.min(Y,m),b.hu(0<=t&&t<=1,(()=>`iouThreshold must be in [0, 1], but was '${t}'`)),b.hu(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),b.hu(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),b.hu(1===A.rank,(()=>"scores must be a 1D tensor")),b.hu(A.shape[0]===m,(()=>`scores has incompatible shape with boxes. Expected ${m}, but was ${A.shape[0]}`)),b.hu(0<=i&&i<=1,(()=>`softNmsSigma must be in [0, 1], but was '${i}'`)),{maxOutputSize:Y,iouThreshold:t,scoreThreshold:a,softNmsSigma:i}}const mt=(0,F.op)({nonMaxSuppression_:function(e,A,Y,t=.5,a=Number.NEGATIVE_INFINITY){const i=(0,u._1)(e,"boxes","nonMaxSuppression"),m=(0,u._1)(A,"scores","nonMaxSuppression"),n=it(i,m,Y,t,a),l={maxOutputSize:Y=n.maxOutputSize,iouThreshold:t=n.iouThreshold,scoreThreshold:a=n.scoreThreshold};return P.BV.runKernel(Q.uv,{boxes:i,scores:m},l)}});var nt=Y(3337);const lt=async function(e,A,Y,t=.5,a=Number.NEGATIVE_INFINITY){const i=(0,u._1)(e,"boxes","nonMaxSuppressionAsync"),m=(0,u._1)(A,"scores","nonMaxSuppressionAsync"),n=it(i,m,Y,t,a);Y=n.maxOutputSize,t=n.iouThreshold,a=n.scoreThreshold;const l=await Promise.all([i.data(),m.data()]),p=l[0],d=l[1],{selectedIndices:o}=(0,nt.GP)(p,d,Y,t,a);return i!==e&&i.dispose(),m!==A&&m.dispose(),(0,VY.R)(o,"int32")};const pt=(0,F.op)({nonMaxSuppressionWithScore_:function(e,A,Y,t=.5,a=Number.NEGATIVE_INFINITY,i=0){const m=(0,u._1)(e,"boxes","nonMaxSuppression"),n=(0,u._1)(A,"scores","nonMaxSuppression"),l=it(m,n,Y,t,a,i),p={boxes:m,scores:n},d={maxOutputSize:Y=l.maxOutputSize,iouThreshold:t=l.iouThreshold,scoreThreshold:a=l.scoreThreshold,softNmsSigma:i=l.softNmsSigma},o=P.BV.runKernel(Q.W0,p,d);return{selectedIndices:o[0],selectedScores:o[1]}}});const dt=async function(e,A,Y,t=.5,a=Number.NEGATIVE_INFINITY,i=0){const m=(0,u._1)(e,"boxes","nonMaxSuppressionAsync"),n=(0,u._1)(A,"scores","nonMaxSuppressionAsync"),l=it(m,n,Y,t,a,i);Y=l.maxOutputSize,t=l.iouThreshold,a=l.scoreThreshold,i=l.softNmsSigma;const p=await Promise.all([m.data(),n.data()]),d=p[0],o=p[1],{selectedIndices:r,selectedScores:s}=(0,nt.pA)(d,o,Y,t,a,i);return m!==e&&m.dispose(),n!==A&&n.dispose(),{selectedIndices:(0,VY.R)(r,"int32"),selectedScores:(0,VY.R)(s)}};const ot=(0,F.op)({nonMaxSuppressionPadded_:function(e,A,Y,t=.5,a=Number.NEGATIVE_INFINITY,i=!1){const m=(0,u._1)(e,"boxes","nonMaxSuppression"),n=(0,u._1)(A,"scores","nonMaxSuppression"),l=it(m,n,Y,t,a,null),p={boxes:m,scores:n},d={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:i},o=P.BV.runKernel(Q.cy,p,d);return{selectedIndices:o[0],validOutputs:o[1]}}});const rt=async function(e,A,Y,t=.5,a=Number.NEGATIVE_INFINITY,i=!1){const m=(0,u._1)(e,"boxes","nonMaxSuppressionAsync"),n=(0,u._1)(A,"scores","nonMaxSuppressionAsync"),l=it(m,n,Y,t,a,null),p=l.maxOutputSize,d=l.iouThreshold,o=l.scoreThreshold,[r,s]=await Promise.all([m.data(),n.data()]),{selectedIndices:Z,validOutputs:N}=(0,nt.qP)(r,s,p,d,o,i);return m!==e&&m.dispose(),n!==A&&n.dispose(),{selectedIndices:(0,VY.R)(Z,"int32"),validOutputs:(0,MA.i)(N,"int32")}};const st=(0,F.op)({resizeBilinear_:function(e,A,Y=!1,t=!1){const a=(0,u._1)(e,"images","resizeBilinear");b.hu(3===a.rank||4===a.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${a.rank}.`)),b.hu(2===A.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${A}.`)),b.hu(!1===t||!1===Y,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let i=a,m=!1;3===a.rank&&(m=!0,i=(0,$.X)(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const[]=A,n={images:i},l={alignCorners:Y,halfPixelCenters:t,size:A},p=P.BV.runKernel(Q._Y,n,l);return m?(0,$.X)(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const Zt=(0,F.op)({resizeNearestNeighbor_:function(e,A,Y=!1,t=!1){const a=(0,u._1)(e,"images","resizeNearestNeighbor");b.hu(3===a.rank||4===a.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${a.rank}.`)),b.hu(2===A.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${A}.`)),b.hu("float32"===a.dtype||"int32"===a.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),b.hu(!1===t||!1===Y,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let i=a,m=!1;3===a.rank&&(m=!0,i=(0,$.X)(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const[]=A,n={images:i},l={alignCorners:Y,halfPixelCenters:t,size:A},p=P.BV.runKernel(Q.dp,n,l);return m?(0,$.X)(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const Nt=(0,F.op)({threshold_:function(e,A="binary",Y=!1,t=.5){const a=(0,u._1)(e,"image","threshold"),i=a.shape[0]*a.shape[1];let n,l,p,d,o=(0,G.d)((0,VY.R)([t]),255);if(b.hu(3===a.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${a.rank}.`)),b.hu(3===a.shape[2]||1===a.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${a.shape[2]}.`)),b.hu("int32"===a.dtype||"float32"===a.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${a.dtype}.`)),b.hu("otsu"===A||"binary"===A,(()=>`Method must be binary or otsu, but was ${A}`)),3===a.shape[2]){[n,l,p]=(0,oY.V)(a,[1,1,1],-1);const e=(0,G.d)(n,.2989),A=(0,G.d)(l,.587),Y=(0,G.d)(p,.114);d=(0,m.I)((0,m.I)(e,A),Y)}else d=e;if("otsu"===A){o=function(e,A){let Y,t,a,i,n,l,p=(0,VY.R)([-1]),d=(0,VY.R)([0]),o=(0,VY.R)([0]);for(let r=0;r<e.size-1;r++){Y=(0,J.t)(e,0,r+1),t=(0,J.t)(e,r+1),n=(0,de.h)((0,Ee.S)(Y),A),l=(0,de.h)((0,Ee.S)(t),A);const s=(0,Ee.S)((0,G.d)(Y,(0,IA.w)(0,Y.size)));a=(0,de.h)(s,(0,Ee.S)(Y));const Z=(0,Ge.h)(t.shape,Y.size),N=(0,m.I)((0,IA.w)(0,t.size),Z),j=(0,G.d)(t,N);i=(0,de.h)((0,Ee.S)(j),(0,Ee.S)(t));const h=(0,He.l)(a,i),W=(0,He.l)(a,i),u=(0,G.d)(n,l);o=(0,G.d)((0,G.d)(u,h),W);const V=(0,ge.p)(o,d);d=(0,SY.a)(V,o,d),p=(0,SY.a)(V,(0,VY.R)([r]),p)}return p}((0,x.y)((0,v.p)((0,EA.N)(d),"int32"),(0,uY.X)([]),256),i)}const r=Y?(0,xe.z)(d,o):(0,ge.p)(d,o);return(0,v.p)((0,G.d)(r,255),"int32")}});const jt=(0,F.op)({transform_:function(e,A,Y="nearest",t="constant",a=0,i){const m=(0,u._1)(e,"image","transform","float32"),n=(0,u._1)(A,"transforms","transform","float32");b.hu(4===m.rank,(()=>`Error in transform: image must be rank 4,but got rank ${m.rank}.`)),b.hu(2===n.rank&&(n.shape[0]===m.shape[0]||1===n.shape[0])&&8===n.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),b.hu(null==i||2===i.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${i}.`));const l={image:m,transforms:n},p={interpolation:Y,fillMode:t,fillValue:a,outputShape:i};return P.BV.runKernel(Q.wx,l,p)}});const ht=(0,F.op)({bandPart_:function(e,A,Y){(0,b.hu)(A%1==0,(()=>`bandPart(): numLower must be an integer, got ${A}.`)),(0,b.hu)(Y%1==0,(()=>`bandPart(): numUpper must be an integer, got ${Y}.`));const t=(0,u._1)(e,"a","bandPart");(0,b.hu)(t.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${t.rank}.`));const a=t.shape,[i,m]=t.shape.slice(-2);if(!(A<=i))throw new Error(`bandPart(): numLower (${A}) must not be greater than the number of rows (${i}).`);if(!(Y<=m))throw new Error(`bandPart(): numUpper (${Y}) must not be greater than the number of columns (${m}).`);A<0&&(A=i),Y<0&&(Y=m);const n=(0,$.X)((0,IA.w)(0,i,1,"int32"),[-1,1]),l=(0,IA.w)(0,m,1,"int32"),p=(0,He.l)(n,l),d=(0,Me.H)((0,xe.z)(p,(0,MA.i)(+A,"int32")),(0,ke.b)(p,(0,MA.i)(-Y,"int32"))),o=(0,TY.l)([i,m],t.dtype);return(0,$.X)((0,NY.k)((0,yY.H)((0,$.X)(t,[-1,i,m])).map((e=>(0,SY.a)(d,e,o)))),a)}});const Wt=(0,F.op)({gramSchmidt_:function(e){let A;if(Array.isArray(e)){A=!1,(0,b.hu)(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const Y=e[0].shape[0];for(let A=1;A<e.length;++A)(0,b.hu)(e[A].shape[0]===Y,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[A].shape[0]} vs. ${Y})`))}else A=!0,e=(0,oY.V)(e,e.shape[0],0).map((e=>(0,ZY.L)(e,[0])));(0,b.hu)(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const Y=[],t=e;for(let A=0;A<e.length;++A)Y.push(P.BV.tidy((()=>{let e=t[A];if(A>0)for(let t=0;t<A;++t){const A=(0,G.d)((0,Ee.S)((0,G.d)(Y[t],e)),Y[t]);e=(0,He.l)(e,A)}return(0,de.h)(e,UY(e,"euclidean"))})));return A?(0,NY.k)(Y,0):Y}});var ut=Y(4368);function Vt(e,A=!1){return P.BV.tidy((()=>{(0,b.hu)(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const Y=e.shape[0],t=e.shape[1];let a=ce(Y),i=(0,K.d)(e);const m=GY([[1]],[1,1]);let n=(0,K.d)(m);const l=Y>=t?t:Y;for(let e=0;e<l;++e){const A=i,l=n,p=a;[n,i,a]=P.BV.tidy((()=>{const A=(0,J.t)(i,[e,e],[Y-e,1]),l=UY(A),p=(0,J.t)(i,[e,e],[1,1]),d=(0,SY.a)((0,ge.p)(p,0),GY([[-1]]),GY([[1]])),o=(0,He.l)(p,(0,G.d)(d,l)),r=(0,de.h)(A,o);n=1===r.shape[0]?(0,K.d)(m):(0,V.z)([m,(0,J.t)(r,[1,0],[r.shape[0]-1,r.shape[1]])],0);const s=(0,Ue.W)((0,de.h)((0,c.O)(d,o),l)),Z=(0,J.t)(i,[e,0],[Y-e,t]),N=(0,G.d)(s,n),j=(0,vY.p)(n);if(0===e)i=(0,He.l)(Z,(0,c.O)(N,(0,c.O)(j,Z)));else{const A=(0,He.l)(Z,(0,c.O)(N,(0,c.O)(j,Z)));i=(0,V.z)([(0,J.t)(i,[0,0],[e,t]),A],0)}const h=(0,vY.p)(N),W=(0,J.t)(a,[0,e],[Y,a.shape[1]-e]);if(0===e)a=(0,He.l)(W,(0,c.O)((0,c.O)(W,n),h));else{const A=(0,He.l)(W,(0,c.O)((0,c.O)(W,n),h));a=(0,V.z)([(0,J.t)(a,[0,0],[Y,e]),A],1)}return[n,i,a]})),(0,ut.B9)([A,l,p])}return!A&&Y>t&&(a=(0,J.t)(a,[0,0],[Y,t]),i=(0,J.t)(i,[0,0],[t,t])),[a,i]}))}const ct=(0,F.op)({qr_:function(e,A=!1){if((0,b.hu)(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return Vt(e,A);{const Y=e.shape.slice(0,e.shape.length-2).reduce(((e,A)=>e*A)),t=(0,yY.H)((0,$.X)(e,[Y,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),a=[],i=[];t.forEach((e=>{const[Y,t]=Vt(e,A);a.push(Y),i.push(t)}));return[(0,$.X)((0,NY.k)(a,0),e.shape),(0,$.X)((0,NY.k)(i,0),e.shape)]}}});var Gt=Y(9876);const Ft=(0,F.op)({computeWeightedLoss_:function(e,A,Y=Gt.I.SUM_BY_NONZERO_WEIGHTS){const t=(0,u._1)(e,"losses","computeWeightedLoss");let a=null;null!=A&&(a=(0,u._1)(A,"weights","computeWeightedLoss"));const i=null==a?t:(0,G.d)(t,a);if(Y===Gt.I.NONE)return i;if(Y===Gt.I.SUM)return(0,Ee.S)(i);if(Y===Gt.I.MEAN){if(null==a)return(0,aA.J)(i);{const e=t.size/a.size,A=(0,de.h)((0,Ee.S)(i),(0,Ee.S)(a));return e>1?(0,de.h)(A,(0,MA.i)(e)):A}}if(Y===Gt.I.SUM_BY_NONZERO_WEIGHTS){if(null==a)return(0,de.h)((0,Ee.S)(i),(0,MA.i)(t.size));{const e=(0,G.d)(a,(0,iA.i)(t.shape)),A=(0,v.p)((0,Ee.S)((0,jA.Q)(e,(0,MA.i)(0))),"float32");return(0,de.h)((0,Ee.S)(i),A)}}throw Error(`Unknown reduction: ${Y}`)}});const Xt=(0,F.op)({absoluteDifference_:function(e,A,Y,a=Gt.I.SUM_BY_NONZERO_WEIGHTS){const i=(0,u._1)(e,"labels","absoluteDifference"),m=(0,u._1)(A,"predictions","absoluteDifference");let n=null;null!=Y&&(n=(0,u._1)(Y,"weights","absoluteDifference")),(0,b.k5)(i.shape,m.shape,"Error in absoluteDifference: ");const l=(0,t.W)((0,He.l)(i,m));return Ft(l,n,a)}});const Jt=(0,F.op)({cosineDistance_:function(e,A,Y,t,a=Gt.I.SUM_BY_NONZERO_WEIGHTS){const i=(0,u._1)(e,"labels","cosineDistance"),m=(0,u._1)(A,"predictions","cosineDistance");let n=null;null!=t&&(n=(0,u._1)(t,"weights","cosineDistance")),(0,b.k5)(i.shape,m.shape,"Error in cosineDistance: ");const l=(0,MA.i)(1),p=(0,He.l)(l,(0,Ee.S)((0,G.d)(i,m),Y,!0));return Ft(p,n,a)}});const gt=(0,F.op)({hingeLoss_:function(e,A,Y,t=Gt.I.SUM_BY_NONZERO_WEIGHTS){let a=(0,u._1)(e,"labels","hingeLoss");const i=(0,u._1)(A,"predictions","hingeLoss");let m=null;null!=Y&&(m=(0,u._1)(Y,"weights","hingeLoss")),(0,b.k5)(a.shape,i.shape,"Error in hingeLoss: ");const n=(0,MA.i)(1);a=(0,He.l)((0,G.d)((0,MA.i)(2),a),n);const l=(0,UA.U)((0,He.l)(n,(0,G.d)(a,i)));return Ft(l,m,t)}});const kt=(0,F.op)({huberLoss_:function(e,A,Y,a=1,i=Gt.I.SUM_BY_NONZERO_WEIGHTS){const n=(0,u._1)(e,"labels","huberLoss"),l=(0,u._1)(A,"predictions","huberLoss");let p=null;null!=Y&&(p=(0,u._1)(Y,"weights","huberLoss")),(0,b.k5)(n.shape,l.shape,"Error in huberLoss: ");const d=(0,MA.i)(a),o=(0,t.W)((0,He.l)(l,n)),r=(0,pA.L)(o,d),s=(0,He.l)(o,r),Z=(0,m.I)((0,G.d)((0,MA.i)(.5),(0,rA.h)(r)),(0,G.d)(d,s));return Ft(Z,p,i)}});const ft=(0,F.op)({logLoss_:function(e,A,Y,t=1e-7,a=Gt.I.SUM_BY_NONZERO_WEIGHTS){const i=(0,u._1)(e,"labels","logLoss"),n=(0,u._1)(A,"predictions","logLoss");let l=null;null!=Y&&(l=(0,u._1)(Y,"weights","logLoss")),(0,b.k5)(i.shape,n.shape,"Error in logLoss: ");const p=(0,MA.i)(1),d=(0,MA.i)(t),o=(0,Ue.W)((0,G.d)(i,(0,Ie.c)((0,m.I)(n,d)))),r=(0,G.d)((0,He.l)(p,i),(0,Ie.c)((0,m.I)((0,He.l)(p,n),d))),s=(0,He.l)(o,r);return Ft(s,l,a)}});const Rt=(0,F.op)({meanSquaredError_:function(e,A,Y,t=Gt.I.SUM_BY_NONZERO_WEIGHTS){const a=(0,u._1)(e,"labels","meanSquaredError"),i=(0,u._1)(A,"predictions","meanSquaredError");let m=null;null!=Y&&(m=(0,u._1)(Y,"weights","meanSquaredError")),(0,b.k5)(a.shape,i.shape,"Error in meanSquaredError: ");const n=(0,sY.$)(a,i);return Ft(n,m,t)}});const bt=(0,F.op)({sigmoidCrossEntropy_:function(e,A,Y,a=0,i=Gt.I.SUM_BY_NONZERO_WEIGHTS){let n=(0,u._1)(e,"multiClassLabels","sigmoidCrossEntropy");const l=(0,u._1)(A,"logits","sigmoidCrossEntropy");let p=null;if(null!=Y&&(p=(0,u._1)(Y,"weights","sigmoidCrossEntropy")),(0,b.k5)(n.shape,l.shape,"Error in sigmoidCrossEntropy: "),a>0){const e=(0,MA.i)(a),A=(0,MA.i)(1),Y=(0,MA.i)(.5);n=(0,m.I)((0,G.d)(n,(0,He.l)(A,e)),(0,G.d)(Y,e))}const d=function(e,A){const Y=(0,u._1)(e,"labels","sigmoidCrossEntropyWithLogits"),a=(0,u._1)(A,"logits","sigmoidCrossEntropyWithLogits");(0,b.k5)(Y.shape,a.shape,"Error in sigmoidCrossEntropyWithLogits: ");const i=(0,UA.U)(a),n=(0,G.d)(a,Y),l=(0,ve.K)((0,he.Q)((0,Ue.W)((0,t.W)(a))));return(0,m.I)((0,He.l)(i,n),l)}(n,l);return Ft(d,p,i)}});const yt=(0,F.op)({softmaxCrossEntropy_:function(e,A,Y,t=0,a=Gt.I.SUM_BY_NONZERO_WEIGHTS){let i=(0,u._1)(e,"onehotLabels","softmaxCrossEntropy");const n=(0,u._1)(A,"logits","softmaxCrossEntropy");let l=null;if(null!=Y&&(l=(0,u._1)(Y,"weights","softmaxCrossEntropy")),(0,b.k5)(i.shape,n.shape,"Error in softmaxCrossEntropy: "),t>0){const e=(0,MA.i)(t),A=(0,MA.i)(1),Y=(0,MA.i)(i.shape[1]);i=(0,m.I)((0,G.d)(i,(0,He.l)(A,e)),(0,de.h)(e,Y))}const p=function(e,A,Y=-1){if(-1===Y&&(Y=A.rank-1),Y!==A.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${A.rank} and dim was ${Y}`);const t=(0,we.cb)(((e,A,t)=>{const a=_e(A,[Y],!0),i=(0,He.l)((0,v.p)(A,"float32"),a);t([e,i]);const m=(0,Ue.W)((0,G.d)(i,e));return{value:(0,Ee.S)(m,[Y]),gradFunc:(e,A)=>{const[t,a]=A,i=(0,Ce.rv)(e.shape,[Y]);return[(0,G.d)((0,$.X)(e,i),(0,He.l)((0,v.p)(t,"float32"),(0,he.Q)(a))),(0,G.d)((0,$.X)(e,i),(0,He.l)((0,he.Q)(a),(0,v.p)(t,"float32")))]}}}));return t(e,A)}(i,n);return Ft(p,l,a)}});const Bt=(0,F.op)({sparseFillEmptyRows_:function(e,A,Y,t){const a=(0,u._1)(e,"indices","sparseFillEmptyRows"),i=(0,u._1)(A,"values","sparseFillEmptyRows"),m=(0,u._1)(Y,"denseShape","sparseFillEmptyRows"),n=(0,u._1)(t,"defaultValue","sparseFillEmptyRows",i.dtype);if(2!==a.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${a.shape}`);if(1!==i.rank)throw new Error(`Values should be Tensor1D but received shape ${i.shape}`);if(1!==m.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${m.shape}`);if(0!==n.rank)throw new Error(`Default value should be a scalar but received shape ${n.shape}`);const l={indices:a,values:i,denseShape:m,defaultValue:n},p=P.BV.runKernel(Q.O3,l);return{outputIndices:p[0],outputValues:p[1],emptyRowIndicator:p[2],reverseIndexMap:p[3]}}});const St=(0,F.op)({sparseReshape_:function(e,A,Y){const t=(0,u._1)(e,"inputIndices","sparseReshape"),a=(0,u._1)(A,"inputShape","sparseReshape"),i=(0,u._1)(Y,"newShape","sparseReshape");if(2!==t.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${t.shape}`);if(1!==a.rank)throw new Error(`Input shape should be Tensor1D but received shape ${a.shape}`);if(1!==i.rank)throw new Error(`New shape should be Tensor1D but received shape ${i.shape}`);const m={inputIndices:t,inputShape:a,newShape:i},n=P.BV.runKernel(Q.nh,m);return{outputIndices:n[0],outputShape:n[1]}}});const xt=(0,F.op)({sparseSegmentMean_:function(e,A,Y){const t=(0,u._1)(e,"data","sparseSegmentMean"),a=(0,u._1)(A,"indices","sparseSegmentMean"),i=(0,u._1)(Y,"segmentIds","sparseSegmentMean");if(t.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${a.shape}`);if(1!==i.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${i.shape}`);const m={data:t,indices:a,segmentIds:i};return P.BV.runKernel(Q.YW,m)}});const Tt=(0,F.op)({sparseSegmentSum_:function(e,A,Y){const t=(0,u._1)(e,"data","sparseSegmentSum"),a=(0,u._1)(A,"indices","sparseSegmentSum"),i=(0,u._1)(Y,"segmentIds","sparseSegmentSum");if(t.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${a.shape}`);if(1!==i.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${i.shape}`);const m={data:t,indices:a,segmentIds:i};return P.BV.runKernel(Q.Zj,m)}});const qt=(0,F.op)({stringNGrams_:function(e,A,Y,t,a,i,m,n){const l=(0,u._1)(e,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const p=(0,u._1)(A,"dataSplits","stringNGrams");if("int32"!==p.dtype)throw new Error("Data splits must be of datatype int32");const d={separator:Y,nGramWidths:t,leftPad:a,rightPad:i,padWidth:m,preserveShortSequences:n},o={data:l,dataSplits:p},r=P.BV.runKernel(Q._J,o,d);return{nGrams:r[0],nGramsSplits:r[1]}}});const It=(0,F.op)({stringSplit_:function(e,A,Y=!0){const t=(0,u._1)(e,"input","stringSplit","string"),a=(0,u._1)(A,"delimiter","stringSplit","string");if(1!==t.rank)throw new Error(`Input should be Tensor1D but received shape ${t.shape}`);if(0!==a.rank)throw new Error(`Delimiter should be a scalar but received shape ${a.shape}`);const i={skipEmpty:Y},m={input:t,delimiter:a},n=P.BV.runKernel(Q.s1,m,i);return{indices:n[0],values:n[1],shape:n[2]}}});const vt=(0,F.op)({stringToHashBucketFast_:function(e,A){const Y=(0,u._1)(e,"input","stringToHashBucketFast","string"),t={numBuckets:A};if(A<=0)throw new Error("Number of buckets must be at least 1");const a={input:Y};return P.BV.runKernel(Q.Xk,a,t)}}),wt={fft:nY.k,ifft:lY.S,rfft:dY.Q,irfft:pY.w},Ut={hammingWindow:PY,hannWindow:QY,frame:$Y,stft:et},Kt={flipLeftRight:Yt,grayscaleToRGB:tt,resizeNearestNeighbor:Zt,resizeBilinear:st,rotateWithOffset:at,cropAndResize:At,nonMaxSuppression:mt,nonMaxSuppressionAsync:lt,nonMaxSuppressionWithScore:pt,nonMaxSuppressionWithScoreAsync:dt,nonMaxSuppressionPadded:ot,nonMaxSuppressionPaddedAsync:rt,threshold:Nt,transform:jt},Ot={bandPart:ht,gramSchmidt:Wt,qr:ct},Dt={absoluteDifference:Xt,computeWeightedLoss:Ft,cosineDistance:Jt,hingeLoss:gt,huberLoss:kt,logLoss:ft,meanSquaredError:Rt,sigmoidCrossEntropy:bt,softmaxCrossEntropy:yt},Ct={sparseFillEmptyRows:Bt,sparseReshape:St,sparseSegmentMean:xt,sparseSegmentSum:Tt},zt={stringNGrams:qt,stringSplit:It,stringToHashBucketFast:vt}},9682:(e,A,Y)=>{"use strict";Y.d(A,{v:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({pad_:function(e,A,Y=0){const m=(0,i._1)(e,"x","pad");if(0===m.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const n={paddings:A,constantValue:Y},l={x:m};return t.BV.runKernel(a.ly,l,n)}})},3453:(e,A,Y)=>{"use strict";Y.d(A,{s:()=>n});var t=Y(7097),a=Y(9121),i=Y(747),m=Y(3740);const n=(0,Y(2668).op)({pow_:function(e,A){let Y=(0,m._1)(e,"base","pow"),n=(0,m._1)(A,"exp","pow");[Y,n]=(0,i.makeTypesMatch)(Y,n);const l={a:Y,b:n};return t.BV.runKernel(a.pe,l)}})},8151:(e,A,Y)=>{"use strict";Y.d(A,{A:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({prelu_:function(e,A){const Y={x:(0,i._1)(e,"x","prelu"),alpha:(0,i._1)(A,"alpha","prelu")};return t.BV.runKernel(a.o0,Y)}})},9798:(e,A,Y)=>{"use strict";function t(e,A=!1){console.log(e.toString(A))}Y.d(A,{S:()=>t})},9451:(e,A,Y)=>{"use strict";Y.d(A,{W:()=>n});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(2271);const n=(0,Y(2668).op)({prod_:function(e,A=null,Y=!1){let n=(0,i._1)(e,"x","prod");"bool"===n.dtype&&(n=(0,m.p)(n,"int32"));const l={x:n},p={axis:A,keepDims:Y};return t.BV.runKernel(a.Dl,l,p)}})},6845:(e,A,Y)=>{"use strict";Y.d(A,{Yi:()=>a,T9:()=>i,wv:()=>m});var t=Y(6377);class a{constructor(e,A,Y,a,i){this.mean=e,this.stdDev=A,this.dtype=Y,this.nextVal=NaN,this.truncated=a,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const m=i||Math.random();this.random=t.alea(m.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,A,Y=!1;for(;!Y;){let t,a,i;do{t=2*this.random()-1,a=2*this.random()-1,i=t*t+a*a}while(i>=1||0===i);const m=Math.sqrt(-2*Math.log(i)/i);e=this.mean+this.stdDev*t*m,A=this.mean+this.stdDev*a*m,this.truncated&&!this.isValidTruncated(e)||(Y=!0)}return this.truncated&&!this.isValidTruncated(A)||(this.nextVal=this.convertValue(A)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class i{constructor(e,A,Y,i){this.alpha=e,this.beta=1/A,this.dtype=Y;const m=i||Math.random();this.randu=t.alea(m.toString()),this.randn=new a(0,1,Y,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,A,Y,t,a,i;for(;;){do{t=this.randn.nextValue(),i=1+this.c*t}while(i<=0);if(i*=i*i,e=t*t,A=1-.331*e*e,Y=.5*e+this.d*(1-i+Math.log(i)),a=this.randu(),a<A||Math.log(a)<Y)break}return i=1/this.beta*this.d*i,this.alpha<1&&(i*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(i)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class m{constructor(e=0,A=1,Y,a){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=A-e,this.dtype=Y,null==a&&(a=Math.random()),"number"==typeof a&&(a=a.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${A} <= 1 and dtype is not float`);this.random=t.alea(a)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}},5002:(e,A,Y)=>{"use strict";Y.d(A,{L:()=>m});var t=Y(2657),a=Y(2668),i=Y(6845);const m=(0,a.op)({randomUniform_:function(e,A=0,Y=1,a="float32",m){const n=(0,t.f)(e,a),l=new i.wv(A,Y,null,m);for(let e=0;e<n.values.length;e++)n.values[e]=l.nextValue();return n.toTensor()}})},7245:(e,A,Y)=>{"use strict";Y.d(A,{w:()=>i});var t=Y(7097),a=Y(9121);function i(e,A,Y=1,i="float32"){if(0===Y)throw new Error("Cannot have a step of zero");const m={start:e,stop:A,step:Y,dtype:i};return t.BV.runKernel(a.e6,{},m)}},766:(e,A,Y)=>{"use strict";Y.d(A,{k:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({real_:function(e){const A={input:(0,i._1)(e,"input","real")};return t.BV.runKernel(a.xJ,A)}})},9036:(e,A,Y)=>{"use strict";Y.d(A,{M:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({reciprocal_:function(e){const A={x:(0,i._1)(e,"x","reciprocal")};return t.BV.runKernel(a.$H,A)}})},7409:(e,A,Y)=>{"use strict";Y.d(A,{U:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({relu_:function(e){const A={x:(0,i._1)(e,"x","relu")};return t.BV.runKernel(a.qk,A)}})},3582:(e,A,Y)=>{"use strict";Y.d(A,{b:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({relu6_:function(e){const A={x:(0,i._1)(e,"x","relu6")};return t.BV.runKernel(a.Sb,A)}})},4968:(e,A,Y)=>{"use strict";Y.d(A,{X:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({reshape_:function(e,A){const Y={x:(0,i._1)(e,"x","reshape","string_or_numeric")},m={shape:A};return t.BV.runKernel(a.HZ,Y,m)}})},7486:(e,A,Y)=>{"use strict";Y.d(A,{G:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({reverse_:function(e,A){const Y={x:(0,i._1)(e,"x","reverse")},m={dims:A};return t.BV.runKernel(a.mK,Y,m)}})},7809:(e,A,Y)=>{"use strict";Y.d(A,{N:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({round_:function(e){const A={x:(0,i._1)(e,"x","round")};return t.BV.runKernel(a.e0,A)}})},2634:(e,A,Y)=>{"use strict";Y.d(A,{b:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({rsqrt_:function(e){const A={x:(0,i._1)(e,"x","rsqrt")};return t.BV.runKernel(a.bV,A)}})},9494:(e,A,Y)=>{"use strict";Y.d(A,{i:()=>i});var t=Y(569),a=Y(7852);function i(e,A){if(((0,t.fU)(e)&&"string"!==A||Array.isArray(e))&&"complex64"!==A)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===A&&(0,t.fU)(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return(0,a.H)(e,[],[],A)}},3100:(e,A,Y)=>{"use strict";Y.d(A,{s:()=>l});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(2668),n=Y(3028);const l=(0,m.op)({scatterND_:function(e,A,Y){const m=(0,i._1)(e,"indices","scatterND","int32"),l=(0,i._1)(A,"updates","scatterND");n.validateInput(l,m,Y);const p={indices:m,updates:l},d={shape:Y};return t.BV.runKernel(a.xQ,p,d)}})},3028:(e,A,Y)=>{"use strict";Y.r(A),Y.d(A,{validateUpdateShape:()=>a,validateInput:()=>i,calculateShapes:()=>m});var t=Y(569);function a(e,A,Y){const t=A.rank>1?A.shape[A.rank-1]:1,a=A.rank>1?A.rank-1:1,i=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${Y.shape}, indices.shape: ${A.shape}, shape: ${e}, sliceDim: ${t}, and batchDim: ${a}.`;if(Y.rank<a)throw new Error(i+` update.rank < ${a}. `);if(e.length<t+(Y.rank-a))throw new Error(i+` Output shape length < ${t+(Y.rank-a)}`);if(Y.rank!==a+e.length-t)throw new Error(i+" update.rank != "+(a+e.length-t));for(let e=0;e<a;++e)if(Y.shape[e]!==A.shape[e])throw new Error(i+` updates.shape[${e}] (${Y.shape[e]}) != indices.shape[${e}] (${A.shape[e]}).`);for(let A=0;A<Y.rank-a;++A)if(Y.shape[A+a]!==e[A+t])throw new Error(i+` updates.shape[${A+a}] (${Y.shape[A+a]}) != shape[${A+a}] (${e[A+a]})`)}function i(e,A,Y){if(A.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${A.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==A.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${A.dtype}`);if(Y.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${Y}`);if(0===Y.length){if(0===A.size)throw new Error(`Indices specified for empty output. indices shape: ${A.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}a(Y,A,e)}function m(e,A,Y){const a=A.shape.length,i=a>1?A.shape[a-1]:1,m=Y.length;let n=1;for(let e=i;e<m;++e)n*=Y[e];const l=i<1?1:i;return{sliceRank:i,numUpdates:(0,t.NA)(A.shape)/l,sliceSize:n,strides:[...(0,t.e3)(Y.slice(0,i)),1],outputSize:(0,t.NA)(Y)}}},5503:(e,A,Y)=>{"use strict";Y.d(A,{U:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({selu_:function(e){const A={x:(0,i._1)(e,"x","selu")};return t.BV.runKernel(a.oF,A)}})},6567:(e,A,Y)=>{"use strict";Y.d(A,{O:()=>m});var t=Y(4077),a=Y(3740),i=Y(569);const m=async function(e,A){const Y=(0,a._1)(e,"x","setdiff1d"),m=(0,a._1)(A,"y","setdiff1d");i.hu(Y.dtype===m.dtype,(()=>`x and y should have the same dtype, but got x (${Y.dtype}) and y (${m.dtype}).`)),i.hu(1===Y.rank,(()=>`x should be 1D tensor, but got x (${Y.shape}).`)),i.hu(1===m.rank,(()=>`y should be 1D tensor, but got y (${m.shape}).`));const n=await Y.data(),l=await m.data(),p=new Set(l);let d=0;for(let e=0;e<n.length;e++)p.has(n[e])||d++;const o=new t.YD([d],Y.dtype),r=new t.YD([d],"int32");for(let e=0,A=0;e<n.length;e++)p.has(n[e])||(o.values[A]=n[e],r.values[A]=e,A++);return[o.toTensor(),r.toTensor()]}},625:(e,A,Y)=>{"use strict";Y.d(A,{X:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({sigmoid_:function(e){const A={x:(0,i._1)(e,"x","sigmoid")};return t.BV.runKernel(a.a5,A)}})},4434:(e,A,Y)=>{"use strict";Y.d(A,{X:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({sign_:function(e){const A={x:(0,i._1)(e,"x","sign")};return t.BV.runKernel(a.i5,A)}})},9331:(e,A,Y)=>{"use strict";Y.d(A,{O:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({sin_:function(e){const A={x:(0,i._1)(e,"x","sin")};return t.BV.runKernel(a.RQ,A)}})},3254:(e,A,Y)=>{"use strict";Y.d(A,{R:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({sinh_:function(e){const A={x:(0,i._1)(e,"x","sinh")};return t.BV.runKernel(a.w3,A)}})},2676:(e,A,Y)=>{"use strict";Y.d(A,{t:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({slice_:function(e,A,Y){const m=(0,i._1)(e,"x","slice","string_or_numeric");if(0===m.rank)throw new Error("Slicing scalar is not possible");const n={x:m},l={begin:A,size:Y};return t.BV.runKernel(a.p2,n,l)}})},682:(e,A,Y)=>{"use strict";Y.d(A,{X:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({softmax_:function(e,A=-1){const Y=(0,i._1)(e,"logits","softmax","float32");if(-1===A&&(A=Y.rank-1),A!==Y.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${Y.rank} and dim was ${A}`);const m={logits:Y},n={dim:A};return t.BV.runKernel(a.Gc,m,n)}})},3694:(e,A,Y)=>{"use strict";Y.d(A,{W:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({softplus_:function(e){const A={x:(0,i._1)(e,"x","softplus")};return t.BV.runKernel(a.MR,A)}})},7918:(e,A,Y)=>{"use strict";Y.d(A,{f:()=>n});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569);const n=(0,Y(2668).op)({spaceToBatchND_:function(e,A,Y){const n=(0,i._1)(e,"x","spaceToBatchND");m.hu(n.rank>=1+A.length,(()=>`input rank ${n.rank} should be > than [blockShape] ${A.length}`)),m.hu(Y.length===A.length,(()=>`paddings.shape[0] ${Y.length} must be equal to [blockShape] ${A.length}`)),m.hu(n.shape.reduce(((e,t,a)=>a>0&&a<=A.length?e&&(t+Y[a-1][0]+Y[a-1][1])%A[a-1]==0:e),!0),(()=>`input spatial dimensions ${n.shape.slice(1)} with paddings ${Y.toString()} must be divisible by blockShapes ${A.toString()}`));const l={x:n},p={blockShape:A,paddings:Y};return t.BV.runKernel(a.TQ,l,p)}})},9758:(e,A,Y)=>{"use strict";Y.d(A,{e:()=>m});var t=Y(7097),a=Y(9121);var i=Y(3740);const m=(0,Y(2668).op)({sparseToDense_:function(e,A,Y,m=0){const n=(0,i._1)(e,"sparseIndices","sparseToDense","int32"),l=(0,i._1)(A,"sparseValues","sparseToDense"),p=(0,i._1)(m,"defaultValue","sparseToDense",l.dtype);!function(e,A,Y,t){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const a=e.rank>0?e.shape[0]:1,i=e.rank>1?e.shape[1]:1;if(Y.length!==i)throw new Error(`outputShape has incorrect number of elements:, ${Y.length}, should be: ${i}.`);const m=A.size;if(0!==A.rank&&(1!==A.rank||m!==a))throw new Error(`sparseValues has incorrect shape ${A.shape}, should be [] or [${a}]`);if(A.dtype!==t.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(n,l,Y,p);const d={sparseIndices:n,sparseValues:l,defaultValue:p},o={outputShape:Y};return t.BV.runKernel(a.D2,d,o)}})},7020:(e,A,Y)=>{"use strict";Y.d(A,{k:()=>m});var t=Y(7097),a=Y(9121),i=Y(569);const m=(0,Y(2668).op)({fft_:function(e){(0,i.hu)("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const A={input:e};return t.BV.runKernel(a.vw,A)}})},8447:(e,A,Y)=>{"use strict";Y.d(A,{S:()=>m});var t=Y(7097),a=Y(9121),i=Y(569);const m=(0,Y(2668).op)({ifft_:function(e){(0,i.hu)("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const A={input:e};return t.BV.runKernel(a.Qg,A)}})},4415:(e,A,Y)=>{"use strict";Y.d(A,{w:()=>Z});var t=Y(1661),a=Y(6884),i=Y(4386),m=Y(4841),n=Y(2668),l=Y(766),p=Y(4968),d=Y(7486),o=Y(9494),r=Y(2676),s=Y(8447);const Z=(0,n.op)({irfft_:function(e){const A=e.shape[e.shape.length-1],Y=e.size/A;let n;if(A<=2){const t=(0,p.X)(e,[Y,A]);n=(0,s.S)(t)}else{const Z=[Y,2*(A-1)],N=(0,p.X)((0,l.k)(e),[Y,A]),j=(0,p.X)((0,i.a)(e),[Y,A]),h=(0,d.G)((0,r.t)(N,[0,1],[Y,A-2]),1),W=(0,m.d)((0,d.G)((0,r.t)(j,[0,1],[Y,A-2]),1),(0,o.i)(-1)),u=(0,a.z)([N,h],1),V=(0,a.z)([j,W],1),c=(0,p.X)((0,t.P)(u,V),[Z[0],Z[1]]);n=(0,s.S)(c)}if(n=(0,l.k)(n),3===e.rank&&0!==e.shape[0]){const A=n,Y=e.shape[0];n=(0,p.X)(n,[Y,n.shape[0]/Y,n.shape[1]]),A.dispose()}return n}})},3710:(e,A,Y)=>{"use strict";Y.d(A,{Q:()=>N});var t=Y(569),a=Y(1661),i=Y(6884),m=Y(4386),n=Y(2668),l=Y(766),p=Y(4968),d=Y(2676),o=Y(8644),r=Y(9640),s=Y(6577),Z=Y(7020);const N=(0,n.op)({rfft_:function(e,A){(0,t.hu)("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let Y=e.shape[e.shape.length-1];const n=e.size/Y;let N;if(null!=A&&A<Y){const t=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=A,N=(0,d.t)(e,t,a),Y=A}else if(null!=A&&A>Y){const t=e.shape.map((e=>e));t[e.shape.length-1]=A-Y,N=(0,i.z)([e,(0,r.l)(t)],e.shape.length-1),Y=A}else N=e;const j=(0,s.P)(N),h=(0,p.X)((0,a.P)(N,j),[n,Y]),W=(0,Z.k)(h),u=Math.floor(Y/2)+1,V=(0,l.k)(W),c=(0,m.a)(W),G=(0,o.V)(V,[u,Y-u],V.shape.length-1),F=(0,o.V)(c,[u,Y-u],c.shape.length-1),X=N.shape.slice();return X[N.shape.length-1]=u,(0,p.X)((0,a.P)(G[0],F[0]),X)}})},8644:(e,A,Y)=>{"use strict";Y.d(A,{V:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({split_:function(e,A,Y=0){const m={x:(0,i._1)(e,"x","split")},n={numOrSizeSplits:A,axis:Y};return t.BV.runKernel(a.L8,m,n)}})},3261:(e,A,Y)=>{"use strict";Y.d(A,{_:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({sqrt_:function(e){const A={x:(0,i._1)(e,"x","sqrt")};return t.BV.runKernel(a.FK,A)}})},248:(e,A,Y)=>{"use strict";Y.d(A,{h:()=>i});var t=Y(7097),a=Y(3740);const i=(0,Y(2668).op)({square_:function(e){const A=(0,a._1)(e,"x","square");return t.BV.runKernel("Square",{x:A},{})}})},5265:(e,A,Y)=>{"use strict";Y.d(A,{$:()=>l});var t=Y(7097),a=Y(9121),i=Y(747),m=Y(3740),n=Y(2200);const l=(0,Y(2668).op)({squaredDifference_:function(e,A){let Y=(0,m._1)(e,"a","squaredDifference"),l=(0,m._1)(A,"b","squaredDifference");[Y,l]=(0,i.makeTypesMatch)(Y,l),(0,n.$N)(Y.shape,l.shape);const p={a:Y,b:l};return t.BV.runKernel(a._t,p,{})}})},9590:(e,A,Y)=>{"use strict";Y.d(A,{L:()=>n});var t=Y(3740),a=Y(569),i=Y(2668),m=Y(4968);const n=(0,i.op)({squeeze_:function(e,A){const Y=(0,t._1)(e,"x","squeeze");return(0,m.X)(Y,(0,a.bp)(Y.shape,A).newShape)}})},2991:(e,A,Y)=>{"use strict";Y.d(A,{k:()=>n});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569);const n=(0,Y(2668).op)({stack_:function(e,A=0){const Y=(0,i.sI)(e,"tensors","stack","string_or_numeric");m.hu(Y.length>=1,(()=>"Pass at least one tensor to tf.stack")),Y.length>0&&m.hu(A<=Y[0].rank,(()=>"Axis must be <= rank of the tensor"));const n=Y,l={axis:A};return t.BV.runKernel(a.Qi,n,l)}})},1901:(e,A,Y)=>{"use strict";Y.d(A,{N:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({step_:function(e,A=0){const Y={x:(0,i._1)(e,"x","step")},m={alpha:A};return t.BV.runKernel(a.h8,Y,m)}})},5158:(e,A,Y)=>{"use strict";Y.d(A,{N:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({stridedSlice_:function(e,A,Y,m,n=0,l=0,p=0,d=0,o=0){const r={x:(0,i._1)(e,"x","stridedSlice","string_or_numeric")},s={begin:A,end:Y,strides:m,beginMask:n,endMask:l,ellipsisMask:p,newAxisMask:d,shrinkAxisMask:o};return t.BV.runKernel(a.m2,r,s)}})},827:(e,A,Y)=>{"use strict";Y.d(A,{l:()=>n});var t=Y(7097),a=Y(9121),i=Y(747),m=Y(3740);const n=(0,Y(2668).op)({sub_:function(e,A){let Y=(0,m._1)(e,"a","sub"),n=(0,m._1)(A,"b","sub");[Y,n]=(0,i.makeTypesMatch)(Y,n);const l={a:Y,b:n};return t.BV.runKernel(a.Tr,l)}})},5475:(e,A,Y)=>{"use strict";Y.d(A,{S:()=>n});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(2271);const n=(0,Y(2668).op)({sum_:function(e,A=null,Y=!1){let n=(0,i._1)(e,"x","sum");"bool"===n.dtype&&(n=(0,m.p)(n,"int32"));const l={x:n},p={axis:A,keepDims:Y};return t.BV.runKernel(a.GB,l,p)}})},1173:(e,A,Y)=>{"use strict";Y.d(A,{O:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({tan_:function(e){const A={x:(0,i._1)(e,"x","tan")};return t.BV.runKernel(a.sE,A)}})},1869:(e,A,Y)=>{"use strict";Y.d(A,{A:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({tanh_:function(e){const A={x:(0,i._1)(e,"x","tanh")};return t.BV.runKernel(a.MI,A)}})},701:(e,A,Y)=>{"use strict";Y.d(A,{X:()=>i});var t=Y(3740),a=Y(7852);function i(e,A,Y){const i=(0,t.C)(e,Y);return(0,a.H)(e,A,i,Y)}},6092:(e,A,Y)=>{"use strict";Y.d(A,{R:()=>m});var t=Y(3740),a=Y(569),i=Y(7852);function m(e,A){(0,a.Cq)(e);const Y=(0,t.C)(e,A);if(1!==Y.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return(0,i.H)(e,null,Y,A)}},9906:(e,A,Y)=>{"use strict";Y.d(A,{w:()=>m});var t=Y(3740),a=Y(569),i=Y(7852);function m(e,A,Y){if((0,a.Cq)(e),null!=A&&3!==A.length)throw new Error("tensor3d() requires shape to have three numbers");const m=(0,t.C)(e,Y);if(3!==m.length&&1!==m.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===m.length&&null==A)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return(0,i.H)(e,A,m,Y)}},7852:(e,A,Y)=>{"use strict";Y.d(A,{H:()=>m});var t=Y(7097),a=Y(569),i=Y(9122);function m(e,A,Y,m){if(null==m&&(m=(0,a.D2)(e)),"complex64"===m)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!(0,a.fU)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=A){(0,a.Mu)(A);const e=(0,a.NA)(A),t=(0,a.NA)(Y);(0,a.hu)(e===t,(()=>`Based on the provided shape, [${A}], the tensor should have ${e} values but has ${t}`));for(let e=0;e<Y.length;++e){const t=Y[e],i=e!==Y.length-1||t!==(0,a.NA)(A.slice(e));(0,a.hu)(Y[e]===A[e]||!i,(()=>`Error creating a new Tensor. Inferred shape (${Y}) does not match the provided shape (${A}). `))}}return(0,a.fU)(e)||Array.isArray(e)||(e=[e]),A=A||Y,e="string"!==m?(0,i.toTypedArray)(e,m):(0,a.xH)(e,[],!0),t.BV.makeTensor(e,A,m)}},7501:(e,A,Y)=>{"use strict";Y.d(A,{G:()=>n});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569);const n=(0,Y(2668).op)({tile_:function(e,A){const Y=(0,i._1)(e,"x","tile","string_or_numeric");m.hu(Y.rank===A.length,(()=>`Error in transpose: rank of input ${Y.rank} must match length of reps ${A}.`));const n={x:Y},l={reps:A};return t.BV.runKernel(a.n9,n,l)}})},3243:(e,A,Y)=>{"use strict";Y.d(A,{h:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({topk_:function(e,A=1,Y=!0){const m=(0,i._1)(e,"x","topk");if(0===m.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const n=m.shape[m.shape.length-1];if(A<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${A}`);if(A>n)throw new Error(`'k' passed to topk() must be <= the last dimension (${n}) but got ${A}`);const l={x:m},p={k:A,sorted:Y},[d,o]=t.BV.runKernel(a.cW,l,p);return{values:d,indices:o}}})},9065:(e,A,Y)=>{"use strict";Y.d(A,{p:()=>n});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569);const n=(0,Y(2668).op)({transpose_:function(e,A){const Y=(0,i._1)(e,"x","transpose");if(null==A&&(A=Y.shape.map(((e,A)=>A)).reverse()),m.hu(Y.rank===A.length,(()=>`Error in transpose: rank of input ${Y.rank} must match length of perm ${A}.`)),A.forEach((e=>{m.hu(e>=0&&e<Y.rank,(()=>"All entries in 'perm' must be between 0 and "+(Y.rank-1)+` but got ${A}`))})),Y.rank<=1)return Y.clone();const n={x:Y},l={perm:A};return t.BV.runKernel(a.G3,n,l)}})},3596:(e,A,Y)=>{"use strict";Y.d(A,{X:()=>m});var t=Y(2657),a=Y(2668),i=Y(6845);const m=(0,a.op)({truncatedNormal_:function(e,A=0,Y=1,a,m){if(null!=a&&"bool"===a)throw new Error("Unsupported data type $ { dtype }");const n=new i.Yi(A,Y,a,!0,m),l=(0,t.f)(e,a);for(let e=0;e<l.values.length;e++)l.values[e]=n.nextValue();return l.toTensor()}})},9608:(e,A,Y)=>{"use strict";Y.d(A,{T:()=>n});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569);const n=(0,Y(2668).op)({unique_:function(e,A=0){const Y=(0,i._1)(e,"x","unique","string_or_numeric");(0,m.hu)(Y.rank>0,(()=>"The input tensor must be at least 1D"));const n={x:Y},l={axis:A},[p,d]=t.BV.runKernel(a.kp,n,l);return{values:p,indices:d}}})},4136:(e,A,Y)=>{"use strict";Y.d(A,{H:()=>n});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(569);const n=(0,Y(2668).op)({unstack_:function(e,A=0){const Y=(0,i._1)(e,"x","unstack","string_or_numeric");m.hu(A>=-Y.shape.length&&A<Y.shape.length,(()=>`Axis = ${A} is not in [-${Y.shape.length}, ${Y.shape.length})`));const n={value:Y},l={axis:A};return t.BV.runKernel(a.To,n,l)}})},5912:(e,A,Y)=>{"use strict";Y.d(A,{a:()=>l});var t=Y(7097),a=Y(9121),i=Y(3740),m=Y(8247),n=Y(2200);const l=(0,Y(2668).op)({where_:function(e,A,Y){const l=(0,i._1)(A,"a","where"),p=(0,i._1)(Y,"b","where"),d=(0,i._1)(e,"condition","where","bool"),o=(0,n.$N)((0,n.$N)(d.shape,l.shape),p.shape),r={condition:(0,m.U)(d,o),t:(0,m.U)(l,o),e:(0,m.U)(p,o)};return t.BV.runKernel(a.Ph,r)}})},6380:(e,A,Y)=>{"use strict";Y.d(A,{i:()=>i});var t=Y(8333),a=Y(3740);const i=async function(e){const A=(0,a._1)(e,"condition","whereAsync","bool"),Y=await A.data(),i=(0,t.Z)(A.shape,Y);return e!==A&&A.dispose(),i}},9640:(e,A,Y)=>{"use strict";Y.d(A,{l:()=>m});var t=Y(7097),a=Y(569),i=Y(1661);function m(e,A="float32"){if("complex64"===A){const A=m(e,"float32"),Y=m(e,"float32");return(0,i.P)(A,Y)}const Y=(0,a.wT)((0,a.NA)(e),A);return t.BV.makeTensor(Y,e,A)}},6577:(e,A,Y)=>{"use strict";Y.d(A,{P:()=>m});var t=Y(7097),a=Y(9121),i=Y(3740);const m=(0,Y(2668).op)({zerosLike_:function(e){const A={x:(0,i._1)(e,"x","zerosLike")};return t.BV.runKernel(a.Ru,A)}})},4077:(e,A,Y)=>{"use strict";Y.d(A,{es:()=>W,YD:()=>o,_w:()=>u,FZ:()=>h,Vp:()=>j,Vi:()=>N});var t=Y(5938),a=Y(569);function i(e,A,Y,t){const i=(0,a.e3)(A),n=function(e,A,Y,t){const i=(0,a.NA)(A),n=t[t.length-1],l=new Array(n).fill(0),d=A.length,o="complex64"===Y?p(e):e;if(d>1)for(let e=0;e<i/n;e++){const A=e*n;for(let e=0;e<n;e++)l[e]=Math.max(l[e],m(o[A+e],0,Y).length)}return l}(e,A,Y,i),d=A.length,o=l(e,A,Y,i,n),r=["Tensor"];return t&&(r.push(`  dtype: ${Y}`),r.push(`  rank: ${d}`),r.push(`  shape: [${A}]`),r.push("  values:")),r.push(o.map((e=>"    "+e)).join("\n")),r.join("\n")}function m(e,A,Y){let t;return t=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:(0,a.HD)(e)?`'${e}'`:"bool"===Y?n(e):parseFloat(e.toFixed(7)).toString(),(0,a.oj)(t,A)}function n(e){return 0===e?"false":"true"}function l(e,A,Y,t,a,i=!0){const d="complex64"===Y?2:1,o=A[0],r=A.length;if(0===r){if("complex64"===Y){return[m(p(e)[0],0,Y)]}return"bool"===Y?[n(e[0])]:[e[0].toString()]}if(1===r){if(o>20){const A=3*d;let t=Array.from(e.slice(0,A)),i=Array.from(e.slice((o-3)*d,o*d));return"complex64"===Y&&(t=p(t),i=p(i)),["["+t.map(((e,A)=>m(e,a[A],Y))).join(", ")+", ..., "+i.map(((e,A)=>m(e,a[o-3+A],Y))).join(", ")+"]"]}return["["+("complex64"===Y?p(e):Array.from(e)).map(((e,A)=>m(e,a[A],Y))).join(", ")+"]"]}const s=A.slice(1),Z=t.slice(1),N=t[0]*d,j=[];if(o>20){for(let A=0;A<3;A++){const t=A*N,i=t+N;j.push(...l(e.slice(t,i),s,Y,Z,a,!1))}j.push("...");for(let A=o-3;A<o;A++){const t=A*N,i=t+N;j.push(...l(e.slice(t,i),s,Y,Z,a,A===o-1))}}else for(let A=0;A<o;A++){const t=A*N,i=t+N;j.push(...l(e.slice(t,i),s,Y,Z,a,A===o-1))}const h=2===r?",":"";j[0]="["+j[0]+h;for(let e=1;e<j.length-1;e++)j[e]=" "+j[e]+h;let W=",\n";for(let e=2;e<r;e++)W+="\n";return j[j.length-1]=" "+j[j.length-1]+"]"+(i?"":W),j}function p(e){const A=[];for(let Y=0;Y<e.length;Y+=2)A.push([e[Y],e[Y+1]]);return A}var d=Y(9122);class o{constructor(e,A,Y){if(this.dtype=A,this.shape=e.slice(),this.size=a.NA(e),null!=Y){const e=Y.length;a.hu(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===A)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=Y||a.rQ(A,this.size),this.strides=(0,a.e3)(e)}set(e,...A){0===A.length&&(A=[0]),a.hu(A.length===this.rank,(()=>`The number of provided coordinates (${A.length}) must match the rank (${this.rank})`));const Y=this.locToIndex(A);this.values[Y]=e}get(...e){0===e.length&&(e=[0]);let A=0;for(const Y of e){if(Y<0||Y>=this.shape[A]){const A=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(A)}A++}let Y=e[e.length-1];for(let A=0;A<e.length-1;++A)Y+=this.strides[A]*e[A];return this.values[Y]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let A=e[e.length-1];for(let Y=0;Y<e.length-1;++Y)A+=this.strides[Y]*e[Y];return A}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const A=new Array(this.shape.length);for(let Y=0;Y<A.length-1;++Y)A[Y]=Math.floor(e/this.strides[Y]),e-=A[Y]*this.strides[Y];return A[A.length-1]=e,A}get rank(){return this.shape.length}toTensor(){return r().makeTensor(this.values,this.shape,this.dtype)}}let r=null,s=null,Z=null;function N(e){r=e}function j(e){s=e}function h(e){Z=e}class W{constructor(e,A,Y,t){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=A||"float32",this.size=a.NA(e),this.strides=(0,a.e3)(e),this.dataId=Y,this.id=t,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return s.buffer(this.shape,this.dtype,e)}bufferSync(){return s.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return(0,a.GX)(this.shape,e,"complex64"===this.dtype)}arraySync(){return(0,a.GX)(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=r().read(this.dataId);if("string"===this.dtype){const A=await e;try{return A.map((e=>d.decodeString(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=r().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>d.decodeString(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await r().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(r().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return s.print(this,e)}clone(){return this.throwIfDisposed(),s.clone(this)}toString(e=!1){return i(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),s.cast(this,e)}variable(e=!0,A,Y){return this.throwIfDisposed(),r().makeVariable(this,e,A,Y)}}Object.defineProperty(W,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),(0,t.R)("Tensor",(()=>W));class u extends W{constructor(e,A,Y,t){super(e.shape,e.dtype,e.dataId,t),this.trainable=A,this.name=Y}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!a.cO(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);r().disposeTensor(this),this.dataId=e.dataId,r().incRef(this,null)}dispose(){r().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(u,Symbol.hasInstance,{value:e=>e instanceof W&&null!=e.assign&&e.assign instanceof Function})},747:(e,A,Y)=>{"use strict";Y.r(A),Y.d(A,{makeTypesMatch:()=>m,assertTypesMatch:()=>n,isTensorInList:()=>l,getTensorsInContainer:()=>p});var t=Y(4077),a=Y(1221),i=Y(569);function m(e,A){if(e.dtype===A.dtype)return[e,A];const Y=(0,a.x8)(e.dtype,A.dtype);return[e.cast(Y),A.cast(Y)]}function n(e,A){(0,i.hu)(e.dtype===A.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${A.dtype}) input must match`))}function l(e,A){return A.some((A=>A.id===e.id))}function p(e){const A=[];return d(e,A,new Set),A}function d(e,A,Y){if(null==e)return;if(e instanceof t.es)return void A.push(e);if(a=e,!Array.isArray(a)&&"object"!=typeof a)return;var a;const i=e;for(const e in i){const t=i[e];Y.has(t)||(Y.add(t),d(t,A,Y))}}},3740:(e,A,Y)=>{"use strict";Y.d(A,{C:()=>l,_1:()=>o,sI:()=>r});var t=Y(7097),a=Y(2885),i=Y(4077),m=Y(569),n=Y(9122);function l(e,A){let Y=e;if((0,m.fU)(e))return"string"===A?[]:[e.length];if(!Array.isArray(e))return[];const t=[];for(;Array.isArray(Y)||(0,m.fU)(Y)&&"string"!==A;)t.push(Y.length),Y=Y[0];return Array.isArray(e)&&(0,a.OB)().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&p(e,t,[]),t}function p(e,A,Y){if(Y=Y||[],!Array.isArray(e)&&!(0,m.fU)(e))return void(0,m.hu)(0===A.length,(()=>`Element arr[${Y.join("][")}] is a primitive, but should be an array/TypedArray of ${A[0]} elements`));(0,m.hu)(A.length>0,(()=>`Element arr[${Y.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),(0,m.hu)(e.length===A[0],(()=>`Element arr[${Y.join("][")}] should have ${A[0]} elements, but has ${e.length} elements`));const t=A.slice(1);for(let A=0;A<e.length;++A)p(e[A],t,Y.concat(A))}function d(e,A,Y,t){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==A||"numeric"===e&&"string"===A)throw new Error(`Argument '${Y}' passed to '${t}' must be ${e} tensor, but got ${A} tensor`)}}function o(e,A,Y,a="numeric"){if(e instanceof i.es)return d(a,e.dtype,A,Y),e;let p=(0,m.D2)(e);if("string"!==p&&["bool","int32","float32"].indexOf(a)>=0&&(p=a),d(a,p,A,Y),null==e||!(0,m.fU)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const t=null==e?"null":e.constructor.name;throw new Error(`Argument '${A}' passed to '${Y}' must be a Tensor or TensorLike, but got '${t}'`)}const o=l(e,p);(0,m.fU)(e)||Array.isArray(e)||(e=[e]);const r="string"!==p?(0,n.toTypedArray)(e,p):(0,m.xH)(e,[],!0);return t.BV.makeTensor(r,o,p)}function r(e,A,Y,t="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${A} passed to ${Y} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,a)=>o(e,`${A}[${a}]`,Y,t)))}},1221:(e,A,Y)=>{"use strict";var t,a,i,m,n;Y.d(A,{yw:()=>t,x8:()=>p,z4:()=>d}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(t||(t={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(a||(a={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(i||(i={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(m||(m={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(n||(n={}));const l={float32:m,int32:a,bool:i,complex64:n};function p(e,A){if("string"===e||"string"===A){if("string"===e&&"string"===A)return"string";throw new Error(`Can not upcast ${e} with ${A}`)}return l[e][A]}function d(e){return p(e,"int32")}},9122:(e,A,Y)=>{"use strict";Y.r(A),Y.d(A,{arraysEqual:()=>a.cO,assert:()=>a.hu,assertNonNegativeIntegerDimensions:()=>a.Mu,assertNonNull:()=>a.Cq,assertShapesMatch:()=>a.k5,bytesFromStringArray:()=>a.Ub,bytesPerElement:()=>a.bT,checkConversionForErrors:()=>a.D5,clamp:()=>a.uZ,computeStrides:()=>a.e3,createScalarValue:()=>u,createShuffledIndices:()=>a.U$,decodeString:()=>X,distSquared:()=>a.E7,encodeString:()=>F,fetch:()=>G,fingerPrint64:()=>W,flatten:()=>a.xH,getArrayFromDType:()=>a.rQ,getTypedArrayFromDType:()=>a.WP,hasEncodingLoss:()=>a.QB,hexToLong:()=>n,indexToLoc:()=>a.NE,inferDtype:()=>a.D2,inferFromImplicitShape:()=>a.JZ,isBoolean:()=>a.jn,isFunction:()=>a.mf,isInt:()=>a.GN,isNumber:()=>a.hj,isPromise:()=>a.tI,isScalarShape:()=>a.N9,isString:()=>a.HD,isTypedArray:()=>a.fU,isValidDtype:()=>a.LP,locToIndex:()=>a.qy,makeOnesTypedArray:()=>a.p8,makeZerosNestedTypedArray:()=>a.l6,makeZerosTypedArray:()=>a.wT,nearestDivisor:()=>a.jP,nearestLargerEven:()=>a.nY,now:()=>c,parseAxisParam:()=>a.EC,randUniform:()=>a.bj,repeatedTry:()=>a.WD,rightPad:()=>a.oj,shuffle:()=>a.TV,shuffleCombo:()=>a.d7,sizeFromShape:()=>a.NA,sizeToSquarishShape:()=>a.YP,squeezeShape:()=>a.bp,sum:()=>a.Sm,swap:()=>a.LF,tanh:()=>a.AE,toNestedArray:()=>a.GX,toTypedArray:()=>V});var t=Y(2885),a=Y(569),i=Y(3720);const m=Y.n(i)()||i;function n(e){return m.fromString(e,!0,16)}const l=n("c3a5c85c97cb3127"),p=n("b492b66fbe98f273"),d=n("9ae16a3b2f90404f");function o(e){return e.xor(e.shru(47))}function r(e,A,Y){const t=e.slice(A,A+Y);return m.fromBytes(Array.from(t),!0,!0)}function s(e,A){return r(e,A,8)}function Z(e,A){return r(e,A,4)}function N(e,A){return 0===A?e:e.shru(A).or(e.shl(64-A))}function j(e,A,Y=n("9ddfea08eb382d69")){let t=e.xor(A).mul(Y);t=t.xor(t.shru(47));let a=A.xor(t).mul(Y);return a=a.xor(a.shru(47)),a=a.mul(Y),a}function h(e,A,Y,t){return function(e,A,Y,t,a,i){a=a.add(e),i=N(i.add(a).add(t),21);const m=a;return a=(a=a.add(A)).add(Y),i=i.add(N(a,44)),[a.add(t),i.add(m)]}(s(e,A),s(e,A+8),s(e,A+16),s(e,A+24),Y,t)}function W(e,A=e.length){const Y=m.fromNumber(81,!0);if(A<=32)return A<=16?function(e,A=e.length){if(A>=8){const Y=d.add(2*A),t=s(e,0).add(d),a=s(e,A-8);return j(N(a,37).mul(Y).add(t),N(t,25).add(a).mul(Y),Y)}if(A>=4){const Y=d.add(2*A);return j(Z(e,0).shl(3).add(A),Z(e,A-4),Y)}if(A>0){const Y=e[0]+(e[A>>1]<<8),t=A+(e[A-1]<<2);return o(d.mul(Y).xor(l.mul(t))).mul(d)}return d}(e,A):function(e,A=e.length){const Y=d.add(2*A),t=s(e,0).mul(p),a=s(e,8),i=s(e,A-8).mul(Y),m=s(e,A-16).mul(d);return j(N(t.add(a),43).add(N(i,30)).add(m),t.add(N(a.add(d),18)).add(i),Y)}(e,A);if(A<=64)return function(e,A=e.length){const Y=d.add(2*A),t=s(e,0).mul(d),a=s(e,8),i=s(e,A-8).mul(Y),m=s(e,A-16).mul(d),n=N(t.add(a),43).add(N(i,30)).add(m),l=j(n,t.add(N(a.add(d),18)).add(i),Y),p=s(e,16).mul(Y),o=s(e,24),r=n.add(s(e,A-32)).mul(Y),Z=l.add(s(e,A-24)).mul(Y);return j(N(p.add(o),43).add(N(r,30)).add(Z),p.add(N(o.add(t),18)).add(r),Y)}(e,A);let t=Y,a=Y.mul(p).add(113),i=o(a.mul(d).add(113)).mul(d),n=[m.UZERO,m.UZERO],r=[m.UZERO,m.UZERO];t=t.mul(d).add(s(e,0));let W=0;const u=64*(A-1>>6),V=u+(A-1&63)-63;do{t=N(t.add(a).add(n[0]).add(s(e,W+8)),37).mul(p),a=N(a.add(n[1]).add(s(e,W+48)),42).mul(p),t=t.xor(r[1]),a=a.add(n[0]).add(s(e,W+40)),i=N(i.add(r[0]),33).mul(p),n=h(e,W,n[1].mul(p),t.add(r[0])),r=h(e,W+32,i.add(r[1]),a.add(s(e,W+16))),[i,t]=[t,i],W+=64}while(W!==u);const c=p.add(i.and(255).shl(1));return W=V,r[0]=r[0].add(A-1&63),n[0]=n[0].add(r[0]),r[0]=r[0].add(n[0]),t=N(t.add(a).add(n[0]).add(s(e,W+8)),37).mul(c),a=N(a.add(n[1]).add(s(e,W+48)),42).mul(c),t=t.xor(r[1].mul(9)),a=a.add(n[0].mul(9).add(s(e,W+40))),i=N(i.add(r[0]),33).mul(c),n=h(e,W,n[1].mul(c),t.add(r[0])),r=h(e,W+32,i.add(r[1]),a.add(s(e,W+16))),[i,t]=[t,i],j(j(n[0],r[0],c).add(o(a).mul(l)).add(i),j(n[1],r[1],c).add(t),c)}function u(e,A){return"string"===A?F(e):V([e],A)}function V(e,A){if("string"===A)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=a.xH(e)),(0,t.OB)().getBool("DEBUG")&&a.D5(e,A),function(e,A){return e instanceof Float32Array&&"float32"===A||e instanceof Int32Array&&"int32"===A||e instanceof Uint8Array&&"bool"===A}(e,A))return e;if(null==A||"float32"===A||"complex64"===A)return new Float32Array(e);if("int32"===A)return new Int32Array(e);if("bool"===A){const A=new Uint8Array(e.length);for(let Y=0;Y<A.length;++Y)0!==Math.round(e[Y])&&(A[Y]=1);return A}throw new Error(`Unknown data type ${A}`)}function c(){return(0,t.OB)().platform.now()}function G(e,A){return(0,t.OB)().platform.fetch(e,A)}function F(e,A="utf-8"){return A=A||"utf-8",(0,t.OB)().platform.encode(e,A)}function X(e,A="utf-8"){return A=A||"utf-8",(0,t.OB)().platform.decode(e,A)}},569:(e,A,Y)=>{"use strict";function t(e){let A=e.length,Y=0;for(;A>0;)Y=Math.random()*A|0,A--,n(e,A,Y)}function a(e,A){if(e.length!==A.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${A.length}`);let Y=e.length,t=0;for(;Y>0;)t=Math.random()*Y|0,Y--,n(e,Y,t),n(A,Y,t)}function i(e,A,Y){return Math.max(e,Math.min(A,Y))}function m(e){return e%2==0?e:e+1}function n(e,A,Y){const t=e[A];e[A]=e[Y],e[Y]=t}function l(e){let A=0;for(let Y=0;Y<e.length;Y++)A+=e[Y];return A}function p(e,A){const Y=Math.random();return A*Y+(1-Y)*e}function d(e,A){let Y=0;for(let t=0;t<e.length;t++){const a=Number(e[t])-Number(A[t]);Y+=a*a}return Y}function o(e,A){if(!e)throw new Error("string"==typeof A?A:A())}function r(e,A,Y=""){o(h(e,A),(()=>Y+` Shapes ${e} and ${A} must match`))}function s(e){o(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function Z(e,A=[],Y=!1){if(null==A&&(A=[]),Array.isArray(e)||B(e)&&!Y)for(let t=0;t<e.length;++t)Z(e[t],A,Y);else A.push(e);return A}function N(e){if(0===e.length)return 1;let A=e[0];for(let Y=1;Y<e.length;Y++)A*=e[Y];return A}function j(e){return 0===e.length}function h(e,A){if(e===A)return!0;if(null==e||null==A)return!1;if(e.length!==A.length)return!1;for(let Y=0;Y<e.length;Y++)if(e[Y]!==A[Y])return!1;return!0}function W(e){return e%1==0}function u(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const A=Math.exp(2*e);return(A-1)/(A+1)}}function V(e){const A=Math.ceil(Math.sqrt(e));return[A,Math.ceil(e/A)]}function c(e){const A=new Uint32Array(e);for(let Y=0;Y<e;++Y)A[Y]=Y;return t(A),A}function G(e,A){return A<=e.length?e:e+" ".repeat(A-e.length)}function F(e,A=(e=>0),Y){return new Promise(((t,a)=>{let i=0;const m=()=>{if(e())return void t();i++;const n=A(i);null!=Y&&i>=Y?a():setTimeout(m,n)};m()}))}function X(e,A){let Y=1,t=-1;for(let A=0;A<e.length;++A)if(e[A]>=0)Y*=e[A];else if(-1===e[A]){if(-1!==t)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${t} and dim ${A}`);t=A}else if(e[A]<0)throw Error(`Shapes can not be < 0. Found ${e[A]} at dim ${A}`);if(-1===t){if(A>0&&A!==Y)throw Error(`Size(${A}) must match the product of shape ${e}`);return e}if(0===Y)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(A%Y!=0)throw Error(`The implicit shape can't be a fractional number. Got ${A} / ${Y}`);const a=e.slice();return a[t]=A/Y,a}function J(e,A){const Y=A.length;return o((e=null==e?A.map(((e,A)=>A)):[].concat(e)).every((e=>e>=-Y&&e<Y)),(()=>`All values in axis param must be in range [-${Y}, ${Y}) but got axis ${e}`)),o(e.every((e=>W(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?Y+e:e))}function g(e,A){const Y=[],t=[],a=null!=A&&Array.isArray(A)&&0===A.length,i=null==A||a?null:J(A,e).sort();let m=0;for(let A=0;A<e.length;++A){if(null!=i){if(i[m]===A&&1!==e[A])throw new Error(`Can't squeeze axis ${A} since its dim '${e[A]}' is not 1`);(null==i[m]||i[m]>A)&&1===e[A]&&(Y.push(e[A]),t.push(A)),i[m]<=A&&m++}1!==e[A]&&(Y.push(e[A]),t.push(A))}return{newShape:Y,keptDims:t}}function k(e,A){let Y=null;if(null==e||"float32"===e)Y=new Float32Array(A);else if("int32"===e)Y=new Int32Array(A);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);Y=new Uint8Array(A)}return Y}function f(e,A){let Y=null;if(null==e||"float32"===e)Y=new Float32Array(A);else if("int32"===e)Y=new Int32Array(A);else if("bool"===e)Y=new Uint8Array(A);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);Y=new Array(A)}return Y}function R(e,A){for(let Y=0;Y<e.length;Y++){const t=e[Y];if(isNaN(t)||!isFinite(t))throw Error(`A tensor of type ${A} being uploaded contains ${t}.`)}}function b(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function y(e,A){return"complex64"!==A&&(("float32"!==A||"complex64"===e)&&(("int32"!==A||"float32"===e||"complex64"===e)&&("bool"!==A||"bool"!==e)))}function B(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function S(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function x(e){if(null==e)return 0;let A=0;return e.forEach((e=>A+=e.length)),A}function T(e){return"string"==typeof e||e instanceof String}function q(e){return"boolean"==typeof e}function I(e){return"number"==typeof e}function v(e){return Array.isArray(e)?v(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":I(e)?"float32":T(e)?"string":q(e)?"bool":"float32"}function w(e){return!!(e&&e.constructor&&e.call&&e.apply)}function U(e,A){for(let Y=A;Y<e;++Y)if(e%Y==0)return Y;return e}function K(e){const A=e.length;if(A<2)return[];const Y=new Array(A-1);Y[A-2]=e[A-1];for(let t=A-3;t>=0;--t)Y[t]=Y[t+1]*e[t+1];return Y}function O(e,A,Y,t=!1){const a=new Array;if(1===A.length){const i=A[0]*(t?2:1);for(let A=0;A<i;A++)a[A]=Y[e+A]}else{const i=A[0],m=A.slice(1),n=m.reduce(((e,A)=>e*A))*(t?2:1);for(let A=0;A<i;A++)a[A]=O(e+A*n,m,Y,t)}return a}function D(e,A,Y=!1){if(0===e.length)return A[0];const t=e.reduce(((e,A)=>e*A))*(Y?2:1);if(0===t)return[];if(t!==A.length)throw new Error(`[${e}] does not match the input size ${A.length}${Y?" for a complex tensor":""}.`);return O(0,e,A,Y)}function C(e,A){const Y=z(e,A);for(let e=0;e<Y.length;e++)Y[e]=1;return Y}function z(e,A){if(null==A||"float32"===A||"complex64"===A)return new Float32Array(e);if("int32"===A)return new Int32Array(e);if("bool"===A)return new Uint8Array(e);throw new Error(`Unknown data type ${A}`)}function H(e,A){const Y=e.reduce(((e,A)=>e*A),1);if(null==A||"float32"===A)return D(e,new Float32Array(Y));if("int32"===A)return D(e,new Int32Array(Y));if("bool"===A)return D(e,new Uint8Array(Y));throw new Error(`Unknown data type ${A}`)}function E(e){e.forEach((A=>{o(Number.isInteger(A)&&A>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function _(e,A,Y){if(0===A)return 0;if(1===A)return e[0];let t=e[e.length-1];for(let A=0;A<e.length-1;++A)t+=Y[A]*e[A];return t}function M(e,A,Y){if(0===A)return[];if(1===A)return[e];const t=new Array(A);for(let A=0;A<t.length-1;++A)t[A]=Math.floor(e/Y[A]),e-=t[A]*Y[A];return t[t.length-1]=e,t}function L(e){return e&&e.then&&"function"==typeof e.then}Y.d(A,{TV:()=>t,d7:()=>a,uZ:()=>i,nY:()=>m,LF:()=>n,Sm:()=>l,bj:()=>p,E7:()=>d,hu:()=>o,k5:()=>r,Cq:()=>s,xH:()=>Z,NA:()=>N,N9:()=>j,cO:()=>h,GN:()=>W,AE:()=>u,YP:()=>V,U$:()=>c,oj:()=>G,WD:()=>F,JZ:()=>X,EC:()=>J,bp:()=>g,WP:()=>k,rQ:()=>f,D5:()=>R,LP:()=>b,QB:()=>y,fU:()=>B,bT:()=>S,Ub:()=>x,HD:()=>T,jn:()=>q,hj:()=>I,D2:()=>v,mf:()=>w,jP:()=>U,e3:()=>K,GX:()=>D,p8:()=>C,wT:()=>z,l6:()=>H,Mu:()=>E,qy:()=>_,NE:()=>M,tI:()=>L})},3720:e=>{e.exports=Y;var A=null;try{A=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function Y(e,A,Y){this.low=0|e,this.high=0|A,this.unsigned=!!Y}function t(e){return!0===(e&&e.__isLong__)}Y.prototype.__isLong__,Object.defineProperty(Y.prototype,"__isLong__",{value:!0}),Y.isLong=t;var a={},i={};function m(e,A){var Y,t,m;return A?(m=0<=(e>>>=0)&&e<256)&&(t=i[e])?t:(Y=l(e,(0|e)<0?-1:0,!0),m&&(i[e]=Y),Y):(m=-128<=(e|=0)&&e<128)&&(t=a[e])?t:(Y=l(e,e<0?-1:0,!1),m&&(a[e]=Y),Y)}function n(e,A){if(isNaN(e))return A?h:j;if(A){if(e<0)return h;if(e>=s)return G}else{if(e<=-Z)return F;if(e+1>=Z)return c}return e<0?n(-e,A).neg():l(e%r|0,e/r|0,A)}function l(e,A,t){return new Y(e,A,t)}Y.fromInt=m,Y.fromNumber=n,Y.fromBits=l;var p=Math.pow;function d(e,A,Y){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return j;if("number"==typeof A?(Y=A,A=!1):A=!!A,(Y=Y||10)<2||36<Y)throw RangeError("radix");var t;if((t=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===t)return d(e.substring(1),A,Y).neg();for(var a=n(p(Y,8)),i=j,m=0;m<e.length;m+=8){var l=Math.min(8,e.length-m),o=parseInt(e.substring(m,m+l),Y);if(l<8){var r=n(p(Y,l));i=i.mul(r).add(n(o))}else i=(i=i.mul(a)).add(n(o))}return i.unsigned=A,i}function o(e,A){return"number"==typeof e?n(e,A):"string"==typeof e?d(e,A):l(e.low,e.high,"boolean"==typeof A?A:e.unsigned)}Y.fromString=d,Y.fromValue=o;var r=4294967296,s=r*r,Z=s/2,N=m(1<<24),j=m(0);Y.ZERO=j;var h=m(0,!0);Y.UZERO=h;var W=m(1);Y.ONE=W;var u=m(1,!0);Y.UONE=u;var V=m(-1);Y.NEG_ONE=V;var c=l(-1,2147483647,!1);Y.MAX_VALUE=c;var G=l(-1,-1,!0);Y.MAX_UNSIGNED_VALUE=G;var F=l(0,-2147483648,!1);Y.MIN_VALUE=F;var X=Y.prototype;X.toInt=function(){return this.unsigned?this.low>>>0:this.low},X.toNumber=function(){return this.unsigned?(this.high>>>0)*r+(this.low>>>0):this.high*r+(this.low>>>0)},X.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(F)){var A=n(e),Y=this.div(A),t=Y.mul(A).sub(this);return Y.toString(e)+t.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var a=n(p(e,6),this.unsigned),i=this,m="";;){var l=i.div(a),d=(i.sub(l.mul(a)).toInt()>>>0).toString(e);if((i=l).isZero())return d+m;for(;d.length<6;)d="0"+d;m=""+d+m}},X.getHighBits=function(){return this.high},X.getHighBitsUnsigned=function(){return this.high>>>0},X.getLowBits=function(){return this.low},X.getLowBitsUnsigned=function(){return this.low>>>0},X.getNumBitsAbs=function(){if(this.isNegative())return this.eq(F)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,A=31;A>0&&0==(e&1<<A);A--);return 0!=this.high?A+33:A+1},X.isZero=function(){return 0===this.high&&0===this.low},X.eqz=X.isZero,X.isNegative=function(){return!this.unsigned&&this.high<0},X.isPositive=function(){return this.unsigned||this.high>=0},X.isOdd=function(){return 1==(1&this.low)},X.isEven=function(){return 0==(1&this.low)},X.equals=function(e){return t(e)||(e=o(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},X.eq=X.equals,X.notEquals=function(e){return!this.eq(e)},X.neq=X.notEquals,X.ne=X.notEquals,X.lessThan=function(e){return this.comp(e)<0},X.lt=X.lessThan,X.lessThanOrEqual=function(e){return this.comp(e)<=0},X.lte=X.lessThanOrEqual,X.le=X.lessThanOrEqual,X.greaterThan=function(e){return this.comp(e)>0},X.gt=X.greaterThan,X.greaterThanOrEqual=function(e){return this.comp(e)>=0},X.gte=X.greaterThanOrEqual,X.ge=X.greaterThanOrEqual,X.compare=function(e){if(t(e)||(e=o(e)),this.eq(e))return 0;var A=this.isNegative(),Y=e.isNegative();return A&&!Y?-1:!A&&Y?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},X.comp=X.compare,X.negate=function(){return!this.unsigned&&this.eq(F)?F:this.not().add(W)},X.neg=X.negate,X.add=function(e){t(e)||(e=o(e));var A=this.high>>>16,Y=65535&this.high,a=this.low>>>16,i=65535&this.low,m=e.high>>>16,n=65535&e.high,p=e.low>>>16,d=0,r=0,s=0,Z=0;return s+=(Z+=i+(65535&e.low))>>>16,r+=(s+=a+p)>>>16,d+=(r+=Y+n)>>>16,d+=A+m,l((s&=65535)<<16|(Z&=65535),(d&=65535)<<16|(r&=65535),this.unsigned)},X.subtract=function(e){return t(e)||(e=o(e)),this.add(e.neg())},X.sub=X.subtract,X.multiply=function(e){if(this.isZero())return j;if(t(e)||(e=o(e)),A)return l(A.mul(this.low,this.high,e.low,e.high),A.get_high(),this.unsigned);if(e.isZero())return j;if(this.eq(F))return e.isOdd()?F:j;if(e.eq(F))return this.isOdd()?F:j;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(N)&&e.lt(N))return n(this.toNumber()*e.toNumber(),this.unsigned);var Y=this.high>>>16,a=65535&this.high,i=this.low>>>16,m=65535&this.low,p=e.high>>>16,d=65535&e.high,r=e.low>>>16,s=65535&e.low,Z=0,h=0,W=0,u=0;return W+=(u+=m*s)>>>16,h+=(W+=i*s)>>>16,W&=65535,h+=(W+=m*r)>>>16,Z+=(h+=a*s)>>>16,h&=65535,Z+=(h+=i*r)>>>16,h&=65535,Z+=(h+=m*d)>>>16,Z+=Y*s+a*r+i*d+m*p,l((W&=65535)<<16|(u&=65535),(Z&=65535)<<16|(h&=65535),this.unsigned)},X.mul=X.multiply,X.divide=function(e){if(t(e)||(e=o(e)),e.isZero())throw Error("division by zero");var Y,a,i;if(A)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?l((this.unsigned?A.div_u:A.div_s)(this.low,this.high,e.low,e.high),A.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?h:j;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return h;if(e.gt(this.shru(1)))return u;i=h}else{if(this.eq(F))return e.eq(W)||e.eq(V)?F:e.eq(F)?W:(Y=this.shr(1).div(e).shl(1)).eq(j)?e.isNegative()?W:V:(a=this.sub(e.mul(Y)),i=Y.add(a.div(e)));if(e.eq(F))return this.unsigned?h:j;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();i=j}for(a=this;a.gte(e);){Y=Math.max(1,Math.floor(a.toNumber()/e.toNumber()));for(var m=Math.ceil(Math.log(Y)/Math.LN2),d=m<=48?1:p(2,m-48),r=n(Y),s=r.mul(e);s.isNegative()||s.gt(a);)s=(r=n(Y-=d,this.unsigned)).mul(e);r.isZero()&&(r=W),i=i.add(r),a=a.sub(s)}return i},X.div=X.divide,X.modulo=function(e){return t(e)||(e=o(e)),A?l((this.unsigned?A.rem_u:A.rem_s)(this.low,this.high,e.low,e.high),A.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},X.mod=X.modulo,X.rem=X.modulo,X.not=function(){return l(~this.low,~this.high,this.unsigned)},X.and=function(e){return t(e)||(e=o(e)),l(this.low&e.low,this.high&e.high,this.unsigned)},X.or=function(e){return t(e)||(e=o(e)),l(this.low|e.low,this.high|e.high,this.unsigned)},X.xor=function(e){return t(e)||(e=o(e)),l(this.low^e.low,this.high^e.high,this.unsigned)},X.shiftLeft=function(e){return t(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?l(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):l(0,this.low<<e-32,this.unsigned)},X.shl=X.shiftLeft,X.shiftRight=function(e){return t(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?l(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):l(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},X.shr=X.shiftRight,X.shiftRightUnsigned=function(e){if(t(e)&&(e=e.toInt()),0===(e&=63))return this;var A=this.high;return e<32?l(this.low>>>e|A<<32-e,A>>>e,this.unsigned):l(32===e?A:A>>>e-32,0,this.unsigned)},X.shru=X.shiftRightUnsigned,X.shr_u=X.shiftRightUnsigned,X.toSigned=function(){return this.unsigned?l(this.low,this.high,!1):this},X.toUnsigned=function(){return this.unsigned?this:l(this.low,this.high,!0)},X.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},X.toBytesLE=function(){var e=this.high,A=this.low;return[255&A,A>>>8&255,A>>>16&255,A>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},X.toBytesBE=function(){var e=this.high,A=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,A>>>24,A>>>16&255,A>>>8&255,255&A]},Y.fromBytes=function(e,A,t){return t?Y.fromBytesLE(e,A):Y.fromBytesBE(e,A)},Y.fromBytesLE=function(e,A){return new Y(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,A)},Y.fromBytesBE=function(e,A){return new Y(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],A)}},6377:(e,A,Y)=>{var t=Y(4832),a=Y(8652),i=Y(801),m=Y(2030),n=Y(3618),l=Y(9049),p=Y(1971);p.alea=t,p.xor128=a,p.xorwow=i,p.xorshift7=m,p.xor4096=n,p.tychei=l,e.exports=p},4832:function(e,A,Y){var t;!function(e,a,i){function m(e){var A,Y=this,t=(A=4022871197,function(e){e=e.toString();for(var Y=0;Y<e.length;Y++){var t=.02519603282416938*(A+=e.charCodeAt(Y));t-=A=t>>>0,A=(t*=A)>>>0,A+=4294967296*(t-=A)}return 2.3283064365386963e-10*(A>>>0)});Y.next=function(){var e=2091639*Y.s0+2.3283064365386963e-10*Y.c;return Y.s0=Y.s1,Y.s1=Y.s2,Y.s2=e-(Y.c=0|e)},Y.c=1,Y.s0=t(" "),Y.s1=t(" "),Y.s2=t(" "),Y.s0-=t(e),Y.s0<0&&(Y.s0+=1),Y.s1-=t(e),Y.s1<0&&(Y.s1+=1),Y.s2-=t(e),Y.s2<0&&(Y.s2+=1),t=null}function n(e,A){return A.c=e.c,A.s0=e.s0,A.s1=e.s1,A.s2=e.s2,A}function l(e,A){var Y=new m(e),t=A&&A.state,a=Y.next;return a.int32=function(){return 4294967296*Y.next()|0},a.double=function(){return a()+11102230246251565e-32*(2097152*a()|0)},a.quick=a,t&&("object"==typeof t&&n(t,Y),a.state=function(){return n(Y,{})}),a}a&&a.exports?a.exports=l:Y.amdD&&Y.amdO?void 0===(t=function(){return l}.call(A,Y,A,a))||(a.exports=t):this.alea=l}(0,e=Y.nmd(e),Y.amdD)},9049:function(e,A,Y){var t;!function(e,a,i){function m(e){var A=this,Y="";A.next=function(){var e=A.b,Y=A.c,t=A.d,a=A.a;return e=e<<25^e>>>7^Y,Y=Y-t|0,t=t<<24^t>>>8^a,a=a-e|0,A.b=e=e<<20^e>>>12^Y,A.c=Y=Y-t|0,A.d=t<<16^Y>>>16^a,A.a=a-e|0},A.a=0,A.b=0,A.c=-1640531527,A.d=1367130551,e===Math.floor(e)?(A.a=e/4294967296|0,A.b=0|e):Y+=e;for(var t=0;t<Y.length+20;t++)A.b^=0|Y.charCodeAt(t),A.next()}function n(e,A){return A.a=e.a,A.b=e.b,A.c=e.c,A.d=e.d,A}function l(e,A){var Y=new m(e),t=A&&A.state,a=function(){return(Y.next()>>>0)/4294967296};return a.double=function(){do{var e=((Y.next()>>>11)+(Y.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=Y.next,a.quick=a,t&&("object"==typeof t&&n(t,Y),a.state=function(){return n(Y,{})}),a}a&&a.exports?a.exports=l:Y.amdD&&Y.amdO?void 0===(t=function(){return l}.call(A,Y,A,a))||(a.exports=t):this.tychei=l}(0,e=Y.nmd(e),Y.amdD)},8652:function(e,A,Y){var t;!function(e,a,i){function m(e){var A=this,Y="";A.x=0,A.y=0,A.z=0,A.w=0,A.next=function(){var e=A.x^A.x<<11;return A.x=A.y,A.y=A.z,A.z=A.w,A.w^=A.w>>>19^e^e>>>8},e===(0|e)?A.x=e:Y+=e;for(var t=0;t<Y.length+64;t++)A.x^=0|Y.charCodeAt(t),A.next()}function n(e,A){return A.x=e.x,A.y=e.y,A.z=e.z,A.w=e.w,A}function l(e,A){var Y=new m(e),t=A&&A.state,a=function(){return(Y.next()>>>0)/4294967296};return a.double=function(){do{var e=((Y.next()>>>11)+(Y.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=Y.next,a.quick=a,t&&("object"==typeof t&&n(t,Y),a.state=function(){return n(Y,{})}),a}a&&a.exports?a.exports=l:Y.amdD&&Y.amdO?void 0===(t=function(){return l}.call(A,Y,A,a))||(a.exports=t):this.xor128=l}(0,e=Y.nmd(e),Y.amdD)},3618:function(e,A,Y){var t;!function(e,a,i){function m(e){var A=this;A.next=function(){var e,Y,t=A.w,a=A.X,i=A.i;return A.w=t=t+1640531527|0,Y=a[i+34&127],e=a[i=i+1&127],Y^=Y<<13,e^=e<<17,Y^=Y>>>15,e^=e>>>12,Y=a[i]=Y^e,A.i=i,Y+(t^t>>>16)|0},function(e,A){var Y,t,a,i,m,n=[],l=128;for(A===(0|A)?(t=A,A=null):(A+="\0",t=0,l=Math.max(l,A.length)),a=0,i=-32;i<l;++i)A&&(t^=A.charCodeAt((i+32)%A.length)),0===i&&(m=t),t^=t<<10,t^=t>>>15,t^=t<<4,t^=t>>>13,i>=0&&(m=m+1640531527|0,a=0==(Y=n[127&i]^=t+m)?a+1:0);for(a>=128&&(n[127&(A&&A.length||0)]=-1),a=127,i=512;i>0;--i)t=n[a+34&127],Y=n[a=a+1&127],t^=t<<13,Y^=Y<<17,t^=t>>>15,Y^=Y>>>12,n[a]=t^Y;e.w=m,e.X=n,e.i=a}(A,e)}function n(e,A){return A.i=e.i,A.w=e.w,A.X=e.X.slice(),A}function l(e,A){null==e&&(e=+new Date);var Y=new m(e),t=A&&A.state,a=function(){return(Y.next()>>>0)/4294967296};return a.double=function(){do{var e=((Y.next()>>>11)+(Y.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=Y.next,a.quick=a,t&&(t.X&&n(t,Y),a.state=function(){return n(Y,{})}),a}a&&a.exports?a.exports=l:Y.amdD&&Y.amdO?void 0===(t=function(){return l}.call(A,Y,A,a))||(a.exports=t):this.xor4096=l}(0,e=Y.nmd(e),Y.amdD)},2030:function(e,A,Y){var t;!function(e,a,i){function m(e){var A=this;A.next=function(){var e,Y,t=A.x,a=A.i;return e=t[a],Y=(e^=e>>>7)^e<<24,Y^=(e=t[a+1&7])^e>>>10,Y^=(e=t[a+3&7])^e>>>3,Y^=(e=t[a+4&7])^e<<7,e=t[a+7&7],Y^=(e^=e<<13)^e<<9,t[a]=Y,A.i=a+1&7,Y},function(e,A){var Y,t=[];if(A===(0|A))t[0]=A;else for(A=""+A,Y=0;Y<A.length;++Y)t[7&Y]=t[7&Y]<<15^A.charCodeAt(Y)+t[Y+1&7]<<13;for(;t.length<8;)t.push(0);for(Y=0;Y<8&&0===t[Y];++Y);for(8==Y?t[7]=-1:t[Y],e.x=t,e.i=0,Y=256;Y>0;--Y)e.next()}(A,e)}function n(e,A){return A.x=e.x.slice(),A.i=e.i,A}function l(e,A){null==e&&(e=+new Date);var Y=new m(e),t=A&&A.state,a=function(){return(Y.next()>>>0)/4294967296};return a.double=function(){do{var e=((Y.next()>>>11)+(Y.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=Y.next,a.quick=a,t&&(t.x&&n(t,Y),a.state=function(){return n(Y,{})}),a}a&&a.exports?a.exports=l:Y.amdD&&Y.amdO?void 0===(t=function(){return l}.call(A,Y,A,a))||(a.exports=t):this.xorshift7=l}(0,e=Y.nmd(e),Y.amdD)},801:function(e,A,Y){var t;!function(e,a,i){function m(e){var A=this,Y="";A.next=function(){var e=A.x^A.x>>>2;return A.x=A.y,A.y=A.z,A.z=A.w,A.w=A.v,(A.d=A.d+362437|0)+(A.v=A.v^A.v<<4^e^e<<1)|0},A.x=0,A.y=0,A.z=0,A.w=0,A.v=0,e===(0|e)?A.x=e:Y+=e;for(var t=0;t<Y.length+64;t++)A.x^=0|Y.charCodeAt(t),t==Y.length&&(A.d=A.x<<10^A.x>>>4),A.next()}function n(e,A){return A.x=e.x,A.y=e.y,A.z=e.z,A.w=e.w,A.v=e.v,A.d=e.d,A}function l(e,A){var Y=new m(e),t=A&&A.state,a=function(){return(Y.next()>>>0)/4294967296};return a.double=function(){do{var e=((Y.next()>>>11)+(Y.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=Y.next,a.quick=a,t&&("object"==typeof t&&n(t,Y),a.state=function(){return n(Y,{})}),a}a&&a.exports?a.exports=l:Y.amdD&&Y.amdO?void 0===(t=function(){return l}.call(A,Y,A,a))||(a.exports=t):this.xorwow=l}(0,e=Y.nmd(e),Y.amdD)},1971:(e,A,Y)=>{var t;!function(a,i){var m,n=this,l=256,p=i.pow(l,6),d=i.pow(2,52),o=2*d,r=255;function s(e,A,Y){var t=[],r=h(j((A=1==A?{entropy:!0}:A||{}).entropy?[e,W(a)]:null==e?function(){try{var e;return m&&(e=m.randomBytes)?e=e(l):(e=new Uint8Array(l),(n.crypto||n.msCrypto).getRandomValues(e)),W(e)}catch(e){var A=n.navigator,Y=A&&A.plugins;return[+new Date,n,Y,n.screen,W(a)]}}():e,3),t),s=new Z(t),u=function(){for(var e=s.g(6),A=p,Y=0;e<d;)e=(e+Y)*l,A*=l,Y=s.g(1);for(;e>=o;)e/=2,A/=2,Y>>>=1;return(e+Y)/A};return u.int32=function(){return 0|s.g(4)},u.quick=function(){return s.g(4)/4294967296},u.double=u,h(W(s.S),a),(A.pass||Y||function(e,A,Y,t){return t&&(t.S&&N(t,s),e.state=function(){return N(s,{})}),Y?(i.random=e,A):e})(u,r,"global"in A?A.global:this==i,A.state)}function Z(e){var A,Y=e.length,t=this,a=0,i=t.i=t.j=0,m=t.S=[];for(Y||(e=[Y++]);a<l;)m[a]=a++;for(a=0;a<l;a++)m[a]=m[i=r&i+e[a%Y]+(A=m[a])],m[i]=A;(t.g=function(e){for(var A,Y=0,a=t.i,i=t.j,m=t.S;e--;)A=m[a=r&a+1],Y=Y*l+m[r&(m[a]=m[i=r&i+A])+(m[i]=A)];return t.i=a,t.j=i,Y})(l)}function N(e,A){return A.i=e.i,A.j=e.j,A.S=e.S.slice(),A}function j(e,A){var Y,t=[],a=typeof e;if(A&&"object"==a)for(Y in e)try{t.push(j(e[Y],A-1))}catch(e){}return t.length?t:"string"==a?e:e+"\0"}function h(e,A){for(var Y,t=e+"",a=0;a<t.length;)A[r&a]=r&(Y^=19*A[r&a])+t.charCodeAt(a++);return W(A)}function W(e){return String.fromCharCode.apply(0,e)}if(i.seedrandom=s,h(i.random(),a),e.exports){e.exports=s;try{m=Y(6113)}catch(e){}}else void 0===(t=function(){return s}.call(A,Y,A,e))||(e.exports=t)}([],Math)},4742:(e,A,Y)=>{"use strict";var t=Y(5477),a=Y(2020),i={TRANSITIONAL:0,NONTRANSITIONAL:1};function m(e){return e.split("\0").map((function(e){return e.normalize("NFC")})).join("\0")}function n(e){for(var A=0,Y=a.length-1;A<=Y;){var t=Math.floor((A+Y)/2),i=a[t];if(i[0][0]<=e&&i[0][1]>=e)return i;i[0][0]>e?Y=t-1:A=t+1}return null}var l=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g;function p(e){return e.replace(l,"_").length}var d=/[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;function o(e,A){"xn--"===e.substr(0,4)&&(e=t.toUnicode(e));var Y=!1;(m(e)!==e||"-"===e[3]&&"-"===e[4]||"-"===e[0]||"-"===e[e.length-1]||-1!==e.indexOf(".")||0===e.search(d))&&(Y=!0);for(var a=p(e),l=0;l<a;++l){var o=n(e.codePointAt(l));if(r===i.TRANSITIONAL&&"valid"!==o[1]||r===i.NONTRANSITIONAL&&"valid"!==o[1]&&"deviation"!==o[1]){Y=!0;break}}return{label:e,error:Y}}function r(e,A,Y){var t=function(e,A,Y){for(var t=!1,a="",m=p(e),l=0;l<m;++l){var d=e.codePointAt(l),o=n(d);switch(o[1]){case"disallowed":t=!0,a+=String.fromCodePoint(d);break;case"ignored":break;case"mapped":a+=String.fromCodePoint.apply(String,o[2]);break;case"deviation":a+=Y===i.TRANSITIONAL?String.fromCodePoint.apply(String,o[2]):String.fromCodePoint(d);break;case"valid":a+=String.fromCodePoint(d);break;case"disallowed_STD3_mapped":A?(t=!0,a+=String.fromCodePoint(d)):a+=String.fromCodePoint.apply(String,o[2]);break;case"disallowed_STD3_valid":A&&(t=!0),a+=String.fromCodePoint(d)}}return{string:a,error:t}}(e,A,Y);t.string=m(t.string);for(var a=t.string.split("."),l=0;l<a.length;++l)try{var d=o(a[l]);a[l]=d.label,t.error=t.error||d.error}catch(e){t.error=!0}return{string:a.join("."),error:t.error}}e.exports.toASCII=function(e,A,Y,a){var i=r(e,A,Y),m=i.string.split(".");if(m=m.map((function(e){try{return t.toASCII(e)}catch(A){return i.error=!0,e}})),a){var n=m.slice(0,m.length-1).join(".").length;(n.length>253||0===n.length)&&(i.error=!0);for(var l=0;l<m.length;++l)if(m.length>63||0===m.length){i.error=!0;break}}return i.error?null:m.join(".")},e.exports.toUnicode=function(e,A){var Y=r(e,A,i.NONTRANSITIONAL);return{domain:Y.string,error:Y.error}},e.exports.PROCESSING_OPTIONS=i},4280:(e,A)=>{"use strict";A.__esModule=!0,A.base64ToArrayBuffer=void 0;for(var Y="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",t="undefined"==typeof Uint8Array?[]:new Uint8Array(256),a=0;a<Y.length;a++)t[Y.charCodeAt(a)]=a;A.base64ToArrayBuffer=function(e){var A,Y,a,i,m,n=.75*e.length,l=e.length,p=0;"="===e[e.length-1]&&(n--,"="===e[e.length-2]&&n--);var d=new ArrayBuffer(n),o=new Uint8Array(d);for(A=0;A<l;A+=4)Y=t[e.charCodeAt(A)],a=t[e.charCodeAt(A+1)],i=t[e.charCodeAt(A+2)],m=t[e.charCodeAt(A+3)],o[p++]=Y<<2|a>>4,o[p++]=(15&a)<<4|i>>2,o[p++]=(3&i)<<6|63&m;return d}},6086:function(e,A,Y){"use strict";var t=this&&this.__createBinding||(Object.create?function(e,A,Y,t){void 0===t&&(t=Y),Object.defineProperty(e,t,{enumerable:!0,get:function(){return A[Y]}})}:function(e,A,Y,t){void 0===t&&(t=Y),e[t]=A[Y]}),a=this&&this.__setModuleDefault||(Object.create?function(e,A){Object.defineProperty(e,"default",{enumerable:!0,value:A})}:function(e,A){e.default=A}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var A={};if(null!=e)for(var Y in e)"default"!==Y&&Object.prototype.hasOwnProperty.call(e,Y)&&t(A,e,Y);return a(A,e),A},m=this&&this.__awaiter||function(e,A,Y,t){return new(Y||(Y=Promise))((function(a,i){function m(e){try{l(t.next(e))}catch(e){i(e)}}function n(e){try{l(t.throw(e))}catch(e){i(e)}}function l(e){var A;e.done?a(e.value):(A=e.value,A instanceof Y?A:new Y((function(e){e(A)}))).then(m,n)}l((t=t.apply(e,A||[])).next())}))},n=this&&this.__generator||function(e,A){var Y,t,a,i,m={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:n(0),throw:n(1),return:n(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function n(i){return function(n){return function(i){if(Y)throw new TypeError("Generator is already executing.");for(;m;)try{if(Y=1,t&&(a=2&i[0]?t.return:i[0]?t.throw||((a=t.return)&&a.call(t),0):t.next)&&!(a=a.call(t,i[1])).done)return a;switch(t=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return m.label++,{value:i[1],done:!1};case 5:m.label++,t=i[1],i=[0];continue;case 7:i=m.ops.pop(),m.trys.pop();continue;default:if(!(a=m.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){m=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){m.label=i[1];break}if(6===i[0]&&m.label<a[1]){m.label=a[1],a=i;break}if(a&&m.label<a[2]){m.label=a[2],m.ops.push(i);break}a[2]&&m.ops.pop(),m.trys.pop();continue}i=A.call(e,m)}catch(e){i=[6,e],t=0}finally{Y=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,n])}}};A.__esModule=!0,A.GuessLang=void 0;var l=Y(5363),p=Y(4933);Y(5528);var d=function(){function e(e,A){this.modelJSON=e,this.weights=A}return e.prototype.load=function(){return m(this,void 0,void 0,(function(){var e,A,Y=this;return n(this,(function(t){if(e=this.modelJSON.modelTopology,A=this.modelJSON.weightsManifest,null===e&&null===A)throw new Error("The model contains neither model topology or manifest for weights.");return[2,this.getModelArtifactsForJSON(this.modelJSON,(function(e){return Y.loadWeights(e)}))]}))}))},e.prototype.getModelArtifactsForJSON=function(e,A){return m(this,void 0,void 0,(function(){var Y,t,a,i;return n(this,(function(m){switch(m.label){case 0:return Y={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy},null!==e.trainingConfig&&(Y.trainingConfig=e.trainingConfig),null===e.weightsManifest?[3,2]:[4,A(e.weightsManifest)];case 1:t=m.sent(),a=t[0],i=t[1],Y.weightSpecs=a,Y.weightData=i,m.label=2;case 2:return null!==e.signature&&(Y.signature=e.signature),null!==e.userDefinedMetadata&&(Y.userDefinedMetadata=e.userDefinedMetadata),null!==e.modelInitializer&&(Y.modelInitializer=e.modelInitializer),[2,Y]}}))}))},e.prototype.loadWeights=function(e){return m(this,void 0,void 0,(function(){var A,Y,t,a;return n(this,(function(i){for(A=[],Y=0,t=e;Y<t.length;Y++)a=t[Y],A.push.apply(A,a.weights);return[2,[A,this.weights]]}))}))},e}(),o=function(){function e(A){var Y,t,a,i,m;this._modelJsonLoaderFunc=null!==(Y=null==A?void 0:A.modelJsonLoaderFunc)&&void 0!==Y?Y:e.NODE_MODEL_JSON_FUNC,this._weightsLoaderFunc=null!==(t=null==A?void 0:A.weightsLoaderFunc)&&void 0!==t?t:e.NODE_WEIGHTS_FUNC,this._minContentSize=null!==(a=null==A?void 0:A.minContentSize)&&void 0!==a?a:e.DEFAULT_MIN_CONTENT_SIZE,this._maxContentSize=null!==(i=null==A?void 0:A.maxContentSize)&&void 0!==i?i:e.DEFAULT_MAX_CONTENT_SIZE,this._normalizeNewline=null===(m=null==A?void 0:A.normalizeNewline)||void 0===m||m}var A;return e.prototype.getModelJSON=function(){return m(this,void 0,void 0,(function(){var e;return n(this,(function(A){switch(A.label){case 0:return this._modelJson?[2,this._modelJson]:(e=this,[4,this._modelJsonLoaderFunc()]);case 1:return e._modelJson=A.sent(),[2,this._modelJson]}}))}))},e.prototype.getWeights=function(){return m(this,void 0,void 0,(function(){var e;return n(this,(function(A){switch(A.label){case 0:return this._weights?[2,this._weights]:(e=this,[4,this._weightsLoaderFunc()]);case 1:return e._weights=A.sent(),[2,this._weights]}}))}))},e.prototype.loadModel=function(){return m(this,void 0,void 0,(function(){var e,A,Y,t;return n(this,(function(a){switch(a.label){case 0:return this._model?[2]:((e=(0,l.env)()).set("IS_NODE",!1),e.set("PROD",!0),[4,(0,l.setBackend)("cpu")]);case 1:if(!a.sent())throw new Error("Unable to set backend to CPU.");return[4,this.getModelJSON()];case 2:return A=a.sent(),[4,this.getWeights()];case 3:return Y=a.sent(),t=this,[4,(0,p.loadGraphModel)(new d(A,Y))];case 4:return t._model=a.sent(),[2]}}))}))},e.prototype.runModel=function(e){return m(this,void 0,void 0,(function(){var A,Y,t,a,i,m,p,d;return n(this,(function(n){switch(n.label){case 0:return!e||e.length<this._minContentSize?[2,[]]:[4,this.loadModel()];case 1:return n.sent(),e.length>=this._maxContentSize&&(e=e.substring(0,this._maxContentSize)),this._normalizeNewline&&(e=e.replace(/\r\n/g,"\n")),[4,this._model.executeAsync((0,l.tensor)([e]))];case 2:for(A=n.sent(),Y=Array.isArray(A)?A[0]:A,t=Array.isArray(A)?A[1]:A,a=Y.dataSync(),i=t.dataSync(),m=[],d=0;d<i.length;d++)m.push({languageId:i[d],confidence:a[d]});for(p=0,d=0;d<a.length;d++)a[d]>a[p]&&(p=d);return[2,m.sort((function(e,A){return A.confidence-e.confidence}))]}}))}))},e.prototype.dispose=function(){var e;null===(e=this._model)||void 0===e||e.dispose()},A=e,e.DEFAULT_MAX_CONTENT_SIZE=1e5,e.DEFAULT_MIN_CONTENT_SIZE=20,e.NODE_MODEL_JSON_FUNC=function(){return m(void 0,void 0,void 0,(function(){return n(A,(function(e){switch(e.label){case 0:return[4,Promise.resolve().then((function(){return i(Y(5948))}))];case 1:return[2,(0,e.sent().modelLoadJson)()]}}))}))},e.NODE_WEIGHTS_FUNC=function(){return m(void 0,void 0,void 0,(function(){return n(A,(function(e){switch(e.label){case 0:return[4,Promise.resolve().then((function(){return i(Y(5948))}))];case 1:return[2,(0,e.sent().modelLoadWeights)()]}}))}))},e}();A.GuessLang=o},5948:function(e,A,Y){"use strict";var t=this&&this.__awaiter||function(e,A,Y,t){return new(Y||(Y=Promise))((function(a,i){function m(e){try{l(t.next(e))}catch(e){i(e)}}function n(e){try{l(t.throw(e))}catch(e){i(e)}}function l(e){var A;e.done?a(e.value):(A=e.value,A instanceof Y?A:new Y((function(e){e(A)}))).then(m,n)}l((t=t.apply(e,A||[])).next())}))},a=this&&this.__generator||function(e,A){var Y,t,a,i,m={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:n(0),throw:n(1),return:n(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function n(i){return function(n){return function(i){if(Y)throw new TypeError("Generator is already executing.");for(;m;)try{if(Y=1,t&&(a=2&i[0]?t.return:i[0]?t.throw||((a=t.return)&&a.call(t),0):t.next)&&!(a=a.call(t,i[1])).done)return a;switch(t=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return m.label++,{value:i[1],done:!1};case 5:m.label++,t=i[1],i=[0];continue;case 7:i=m.ops.pop(),m.trys.pop();continue;default:if(!(a=m.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){m=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){m.label=i[1];break}if(6===i[0]&&m.label<a[1]){m.label=a[1],a=i;break}if(a&&m.label<a[2]){m.label=a[2],m.ops.push(i);break}a[2]&&m.ops.pop(),m.trys.pop();continue}i=A.call(e,m)}catch(e){i=[6,e],t=0}finally{Y=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,n])}}},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};A.__esModule=!0,A.modelLoadWeights=A.modelLoadJson=void 0;var m=Y(4280),n=i(Y(3529)),l=i(Y(3845)).default.replace("data:application/octet-stream;base64,","");A.modelLoadJson=function(){return t(void 0,void 0,void 0,(function(){return a(this,(function(e){return[2,JSON.parse(n.default)]}))}))};A.modelLoadWeights=function(){return t(void 0,void 0,void 0,(function(){return a(this,(function(e){return[2,(0,m.base64ToArrayBuffer)(l)]}))}))}},993:e=>{"use strict";var A={};function Y(e){return e<0?-1:1}function t(e,A){A.unsigned||--e;const t=A.unsigned?0:-Math.pow(2,e),a=Math.pow(2,e)-1,i=A.moduloBitLength?Math.pow(2,A.moduloBitLength):Math.pow(2,e),m=A.moduloBitLength?Math.pow(2,A.moduloBitLength-1):Math.pow(2,e-1);return function(e,n){n||(n={});let l=+e;if(n.enforceRange){if(!Number.isFinite(l))throw new TypeError("Argument is not a finite number");if(l=Y(l)*Math.floor(Math.abs(l)),l<t||l>a)throw new TypeError("Argument is not in byte range");return l}if(!isNaN(l)&&n.clamp)return l=function(e){return e%1==.5&&0==(1&e)?Math.floor(e):Math.round(e)}(l),l<t&&(l=t),l>a&&(l=a),l;if(!Number.isFinite(l)||0===l)return 0;if(l=Y(l)*Math.floor(Math.abs(l)),l%=i,!A.unsigned&&l>=m)return l-i;if(A.unsigned)if(l<0)l+=i;else if(-0===l)return 0;return l}}e.exports=A,A.void=function(){},A.boolean=function(e){return!!e},A.byte=t(8,{unsigned:!1}),A.octet=t(8,{unsigned:!0}),A.short=t(16,{unsigned:!1}),A["unsigned short"]=t(16,{unsigned:!0}),A.long=t(32,{unsigned:!1}),A["unsigned long"]=t(32,{unsigned:!0}),A["long long"]=t(32,{unsigned:!1,moduloBitLength:64}),A["unsigned long long"]=t(32,{unsigned:!0,moduloBitLength:64}),A.double=function(e){const A=+e;if(!Number.isFinite(A))throw new TypeError("Argument is not a finite floating-point value");return A},A["unrestricted double"]=function(e){const A=+e;if(isNaN(A))throw new TypeError("Argument is NaN");return A},A.float=A.double,A["unrestricted float"]=A["unrestricted double"],A.DOMString=function(e,A){return A||(A={}),A.treatNullAsEmptyString&&null===e?"":String(e)},A.ByteString=function(e,A){const Y=String(e);let t;for(let e=0;void 0!==(t=Y.codePointAt(e));++e)if(t>255)throw new TypeError("Argument is not a valid bytestring");return Y},A.USVString=function(e){const A=String(e),Y=A.length,t=[];for(let e=0;e<Y;++e){const a=A.charCodeAt(e);if(a<55296||a>57343)t.push(String.fromCodePoint(a));else if(56320<=a&&a<=57343)t.push(String.fromCodePoint(65533));else if(e===Y-1)t.push(String.fromCodePoint(65533));else{const Y=A.charCodeAt(e+1);if(56320<=Y&&Y<=57343){const A=1023&a,i=1023&Y;t.push(String.fromCodePoint(65536+1024*A+i)),++e}else t.push(String.fromCodePoint(65533))}}return t.join("")},A.Date=function(e,A){if(!(e instanceof Date))throw new TypeError("Argument is not a Date object");if(!isNaN(e))return e},A.RegExp=function(e,A){return e instanceof RegExp||(e=new RegExp(e)),e}},9718:(e,A,Y)=>{"use strict";const t=Y(5341);A.implementation=class{constructor(e){const A=e[0],Y=e[1];let a=null;if(void 0!==Y&&(a=t.basicURLParse(Y),"failure"===a))throw new TypeError("Invalid base URL");const i=t.basicURLParse(A,{baseURL:a});if("failure"===i)throw new TypeError("Invalid URL");this._url=i}get href(){return t.serializeURL(this._url)}set href(e){const A=t.basicURLParse(e);if("failure"===A)throw new TypeError("Invalid URL");this._url=A}get origin(){return t.serializeURLOrigin(this._url)}get protocol(){return this._url.scheme+":"}set protocol(e){t.basicURLParse(e+":",{url:this._url,stateOverride:"scheme start"})}get username(){return this._url.username}set username(e){t.cannotHaveAUsernamePasswordPort(this._url)||t.setTheUsername(this._url,e)}get password(){return this._url.password}set password(e){t.cannotHaveAUsernamePasswordPort(this._url)||t.setThePassword(this._url,e)}get host(){const e=this._url;return null===e.host?"":null===e.port?t.serializeHost(e.host):t.serializeHost(e.host)+":"+t.serializeInteger(e.port)}set host(e){this._url.cannotBeABaseURL||t.basicURLParse(e,{url:this._url,stateOverride:"host"})}get hostname(){return null===this._url.host?"":t.serializeHost(this._url.host)}set hostname(e){this._url.cannotBeABaseURL||t.basicURLParse(e,{url:this._url,stateOverride:"hostname"})}get port(){return null===this._url.port?"":t.serializeInteger(this._url.port)}set port(e){t.cannotHaveAUsernamePasswordPort(this._url)||(""===e?this._url.port=null:t.basicURLParse(e,{url:this._url,stateOverride:"port"}))}get pathname(){return this._url.cannotBeABaseURL?this._url.path[0]:0===this._url.path.length?"":"/"+this._url.path.join("/")}set pathname(e){this._url.cannotBeABaseURL||(this._url.path=[],t.basicURLParse(e,{url:this._url,stateOverride:"path start"}))}get search(){return null===this._url.query||""===this._url.query?"":"?"+this._url.query}set search(e){const A=this._url;if(""===e)return void(A.query=null);const Y="?"===e[0]?e.substring(1):e;A.query="",t.basicURLParse(Y,{url:A,stateOverride:"query"})}get hash(){return null===this._url.fragment||""===this._url.fragment?"":"#"+this._url.fragment}set hash(e){if(""===e)return void(this._url.fragment=null);const A="#"===e[0]?e.substring(1):e;this._url.fragment="",t.basicURLParse(A,{url:this._url,stateOverride:"fragment"})}toJSON(){return this.href}}},4328:(e,A,Y)=>{"use strict";const t=Y(993),a=Y(9581),i=Y(9718),m=a.implSymbol;function n(A){if(!this||this[m]||!(this instanceof n))throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");if(arguments.length<1)throw new TypeError("Failed to construct 'URL': 1 argument required, but only "+arguments.length+" present.");const Y=[];for(let e=0;e<arguments.length&&e<2;++e)Y[e]=arguments[e];Y[0]=t.USVString(Y[0]),void 0!==Y[1]&&(Y[1]=t.USVString(Y[1])),e.exports.setup(this,Y)}n.prototype.toJSON=function(){if(!this||!e.exports.is(this))throw new TypeError("Illegal invocation");const A=[];for(let e=0;e<arguments.length&&e<0;++e)A[e]=arguments[e];return this[m].toJSON.apply(this[m],A)},Object.defineProperty(n.prototype,"href",{get(){return this[m].href},set(e){e=t.USVString(e),this[m].href=e},enumerable:!0,configurable:!0}),n.prototype.toString=function(){if(!this||!e.exports.is(this))throw new TypeError("Illegal invocation");return this.href},Object.defineProperty(n.prototype,"origin",{get(){return this[m].origin},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"protocol",{get(){return this[m].protocol},set(e){e=t.USVString(e),this[m].protocol=e},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"username",{get(){return this[m].username},set(e){e=t.USVString(e),this[m].username=e},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"password",{get(){return this[m].password},set(e){e=t.USVString(e),this[m].password=e},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"host",{get(){return this[m].host},set(e){e=t.USVString(e),this[m].host=e},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"hostname",{get(){return this[m].hostname},set(e){e=t.USVString(e),this[m].hostname=e},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"port",{get(){return this[m].port},set(e){e=t.USVString(e),this[m].port=e},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"pathname",{get(){return this[m].pathname},set(e){e=t.USVString(e),this[m].pathname=e},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"search",{get(){return this[m].search},set(e){e=t.USVString(e),this[m].search=e},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"hash",{get(){return this[m].hash},set(e){e=t.USVString(e),this[m].hash=e},enumerable:!0,configurable:!0}),e.exports={is:e=>!!e&&e[m]instanceof i.implementation,create(e,A){let Y=Object.create(n.prototype);return this.setup(Y,e,A),Y},setup(e,A,Y){Y||(Y={}),Y.wrapper=e,e[m]=new i.implementation(A,Y),e[m][a.wrapperSymbol]=e},interface:n,expose:{Window:{URL:n},Worker:{URL:n}}}},7347:(e,A,Y)=>{"use strict";A.URL=Y(4328).interface,Y(5341).serializeURL,Y(5341).serializeURLOrigin,Y(5341).basicURLParse,Y(5341).setTheUsername,Y(5341).setThePassword,Y(5341).serializeHost,Y(5341).serializeInteger,Y(5341).parseURL},5341:(e,A,Y)=>{"use strict";const t=Y(5477),a=Y(4742),i={ftp:21,file:null,gopher:70,http:80,https:443,ws:80,wss:443},m=Symbol("failure");function n(e){return t.ucs2.decode(e).length}function l(e,A){const Y=e[A];return isNaN(Y)?void 0:String.fromCodePoint(Y)}function p(e){return e>=48&&e<=57}function d(e){return e>=65&&e<=90||e>=97&&e<=122}function o(e){return p(e)||e>=65&&e<=70||e>=97&&e<=102}function r(e){return"."===e||"%2e"===e.toLowerCase()}function s(e){return 2===e.length&&d(e.codePointAt(0))&&(":"===e[1]||"|"===e[1])}function Z(e){return void 0!==i[e]}function N(e){return Z(e.scheme)}function j(e){let A=e.toString(16).toUpperCase();return 1===A.length&&(A="0"+A),"%"+A}function h(e){return e<=31||e>126}const W=new Set([32,34,35,60,62,63,96,123,125]);function u(e){return h(e)||W.has(e)}const V=new Set([47,58,59,61,64,91,92,93,94,124]);function c(e){return u(e)||V.has(e)}function G(e,A){const Y=String.fromCodePoint(e);return A(e)?function(e){const A=new Buffer(e);let Y="";for(let e=0;e<A.length;++e)Y+=j(A[e]);return Y}(Y):Y}function F(e){let A=10;if(e.length>=2&&"0"===e.charAt(0)&&"x"===e.charAt(1).toLowerCase()?(e=e.substring(2),A=16):e.length>=2&&"0"===e.charAt(0)&&(e=e.substring(1),A=8),""===e)return 0;return(10===A?/[^0-9]/:16===A?/[^0-9A-Fa-f]/:/[^0-7]/).test(e)?m:parseInt(e,A)}function X(e,A){if("["===e[0])return"]"!==e[e.length-1]?m:function(e){const A=[0,0,0,0,0,0,0,0];let Y=0,a=null,i=0;if(58===(e=t.ucs2.decode(e))[i]){if(58!==e[i+1])return m;i+=2,++Y,a=Y}for(;i<e.length;){if(8===Y)return m;if(58===e[i]){if(null!==a)return m;++i,++Y,a=Y;continue}let t=0,n=0;for(;n<4&&o(e[i]);)t=16*t+parseInt(l(e,i),16),++i,++n;if(46===e[i]){if(0===n)return m;if(i-=n,Y>6)return m;let t=0;for(;void 0!==e[i];){let a=null;if(t>0){if(!(46===e[i]&&t<4))return m;++i}if(!p(e[i]))return m;for(;p(e[i]);){const A=parseInt(l(e,i));if(null===a)a=A;else{if(0===a)return m;a=10*a+A}if(a>255)return m;++i}A[Y]=256*A[Y]+a,++t,2!==t&&4!==t||++Y}if(4!==t)return m;break}if(58===e[i]){if(++i,void 0===e[i])return m}else if(void 0!==e[i])return m;A[Y]=t,++Y}if(null!==a){let e=Y-a;for(Y=7;0!==Y&&e>0;){const t=A[a+e-1];A[a+e-1]=A[Y],A[Y]=t,--Y,--e}}else if(null===a&&8!==Y)return m;return A}(e.substring(1,e.length-1));if(!A)return function(e){if(A=e,-1!==A.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/))return m;var A;let Y="";const a=t.ucs2.decode(e);for(let e=0;e<a.length;++e)Y+=G(a[e],h);return Y}(e);const Y=function(e){const A=new Buffer(e),Y=[];for(let e=0;e<A.length;++e)37!==A[e]?Y.push(A[e]):37===A[e]&&o(A[e+1])&&o(A[e+2])?(Y.push(parseInt(A.slice(e+1,e+3).toString(),16)),e+=2):Y.push(A[e]);return new Buffer(Y).toString()}(e),i=a.toASCII(Y,!1,a.PROCESSING_OPTIONS.NONTRANSITIONAL,!1);if(null===i)return m;if(-1!==i.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/))return m;const n=function(e){const A=e.split(".");if(""===A[A.length-1]&&A.length>1&&A.pop(),A.length>4)return e;const Y=[];for(const t of A){if(""===t)return e;const A=F(t);if(A===m)return e;Y.push(A)}for(let e=0;e<Y.length-1;++e)if(Y[e]>255)return m;if(Y[Y.length-1]>=Math.pow(256,5-Y.length))return m;let t=Y.pop(),a=0;for(const e of Y)t+=e*Math.pow(256,3-a),++a;return t}(i);return"number"==typeof n||n===m?n:i}function J(e){return"number"==typeof e?function(e){let A="",Y=e;for(let e=1;e<=4;++e)A=String(Y%256)+A,4!==e&&(A="."+A),Y=Math.floor(Y/256);return A}(e):e instanceof Array?"["+function(e){let A="";const Y=function(e){let A=null,Y=1,t=null,a=0;for(let i=0;i<e.length;++i)0!==e[i]?(a>Y&&(A=t,Y=a),t=null,a=0):(null===t&&(t=i),++a);return a>Y&&(A=t,Y=a),{idx:A,len:Y}}(e).idx;let t=!1;for(let a=0;a<=7;++a)t&&0===e[a]||(t&&(t=!1),Y!==a?(A+=e[a].toString(16),7!==a&&(A+=":")):(A+=0===a?"::":":",t=!0));return A}(e)+"]":e}function g(e){const A=e.path;var Y;0!==A.length&&("file"===e.scheme&&1===A.length&&(Y=A[0],/^[A-Za-z]:$/.test(Y))||A.pop())}function k(e){return""!==e.username||""!==e.password}function f(e,A,Y,a,i){if(this.pointer=0,this.input=e,this.base=A||null,this.encodingOverride=Y||"utf-8",this.stateOverride=i,this.url=a,this.failure=!1,this.parseError=!1,!this.url){this.url={scheme:"",username:"",password:"",host:null,port:null,path:[],query:null,fragment:null,cannotBeABaseURL:!1};const e=function(e){return e.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g,"")}(this.input);e!==this.input&&(this.parseError=!0),this.input=e}const n=function(e){return e.replace(/\u0009|\u000A|\u000D/g,"")}(this.input);for(n!==this.input&&(this.parseError=!0),this.input=n,this.state=i||"scheme start",this.buffer="",this.atFlag=!1,this.arrFlag=!1,this.passwordTokenSeenFlag=!1,this.input=t.ucs2.decode(this.input);this.pointer<=this.input.length;++this.pointer){const e=this.input[this.pointer],A=isNaN(e)?void 0:String.fromCodePoint(e),Y=this["parse "+this.state](e,A);if(!Y)break;if(Y===m){this.failure=!0;break}}}f.prototype["parse scheme start"]=function(e,A){if(d(e))this.buffer+=A.toLowerCase(),this.state="scheme";else{if(this.stateOverride)return this.parseError=!0,m;this.state="no scheme",--this.pointer}return!0},f.prototype["parse scheme"]=function(e,A){if(function(e){return d(e)||p(e)}(e)||43===e||45===e||46===e)this.buffer+=A.toLowerCase();else if(58===e){if(this.stateOverride){if(N(this.url)&&!Z(this.buffer))return!1;if(!N(this.url)&&Z(this.buffer))return!1;if((k(this.url)||null!==this.url.port)&&"file"===this.buffer)return!1;if("file"===this.url.scheme&&(""===this.url.host||null===this.url.host))return!1}if(this.url.scheme=this.buffer,this.buffer="",this.stateOverride)return!1;"file"===this.url.scheme?(47===this.input[this.pointer+1]&&47===this.input[this.pointer+2]||(this.parseError=!0),this.state="file"):N(this.url)&&null!==this.base&&this.base.scheme===this.url.scheme?this.state="special relative or authority":N(this.url)?this.state="special authority slashes":47===this.input[this.pointer+1]?(this.state="path or authority",++this.pointer):(this.url.cannotBeABaseURL=!0,this.url.path.push(""),this.state="cannot-be-a-base-URL path")}else{if(this.stateOverride)return this.parseError=!0,m;this.buffer="",this.state="no scheme",this.pointer=-1}return!0},f.prototype["parse no scheme"]=function(e){return null===this.base||this.base.cannotBeABaseURL&&35!==e?m:(this.base.cannotBeABaseURL&&35===e?(this.url.scheme=this.base.scheme,this.url.path=this.base.path.slice(),this.url.query=this.base.query,this.url.fragment="",this.url.cannotBeABaseURL=!0,this.state="fragment"):"file"===this.base.scheme?(this.state="file",--this.pointer):(this.state="relative",--this.pointer),!0)},f.prototype["parse special relative or authority"]=function(e){return 47===e&&47===this.input[this.pointer+1]?(this.state="special authority ignore slashes",++this.pointer):(this.parseError=!0,this.state="relative",--this.pointer),!0},f.prototype["parse path or authority"]=function(e){return 47===e?this.state="authority":(this.state="path",--this.pointer),!0},f.prototype["parse relative"]=function(e){return this.url.scheme=this.base.scheme,isNaN(e)?(this.url.username=this.base.username,this.url.password=this.base.password,this.url.host=this.base.host,this.url.port=this.base.port,this.url.path=this.base.path.slice(),this.url.query=this.base.query):47===e?this.state="relative slash":63===e?(this.url.username=this.base.username,this.url.password=this.base.password,this.url.host=this.base.host,this.url.port=this.base.port,this.url.path=this.base.path.slice(),this.url.query="",this.state="query"):35===e?(this.url.username=this.base.username,this.url.password=this.base.password,this.url.host=this.base.host,this.url.port=this.base.port,this.url.path=this.base.path.slice(),this.url.query=this.base.query,this.url.fragment="",this.state="fragment"):N(this.url)&&92===e?(this.parseError=!0,this.state="relative slash"):(this.url.username=this.base.username,this.url.password=this.base.password,this.url.host=this.base.host,this.url.port=this.base.port,this.url.path=this.base.path.slice(0,this.base.path.length-1),this.state="path",--this.pointer),!0},f.prototype["parse relative slash"]=function(e){return!N(this.url)||47!==e&&92!==e?47===e?this.state="authority":(this.url.username=this.base.username,this.url.password=this.base.password,this.url.host=this.base.host,this.url.port=this.base.port,this.state="path",--this.pointer):(92===e&&(this.parseError=!0),this.state="special authority ignore slashes"),!0},f.prototype["parse special authority slashes"]=function(e){return 47===e&&47===this.input[this.pointer+1]?(this.state="special authority ignore slashes",++this.pointer):(this.parseError=!0,this.state="special authority ignore slashes",--this.pointer),!0},f.prototype["parse special authority ignore slashes"]=function(e){return 47!==e&&92!==e?(this.state="authority",--this.pointer):this.parseError=!0,!0},f.prototype["parse authority"]=function(e,A){if(64===e){this.parseError=!0,this.atFlag&&(this.buffer="%40"+this.buffer),this.atFlag=!0;const e=n(this.buffer);for(let A=0;A<e;++A){const e=this.buffer.codePointAt(A);if(58===e&&!this.passwordTokenSeenFlag){this.passwordTokenSeenFlag=!0;continue}const Y=G(e,c);this.passwordTokenSeenFlag?this.url.password+=Y:this.url.username+=Y}this.buffer=""}else if(isNaN(e)||47===e||63===e||35===e||N(this.url)&&92===e){if(this.atFlag&&""===this.buffer)return this.parseError=!0,m;this.pointer-=n(this.buffer)+1,this.buffer="",this.state="host"}else this.buffer+=A;return!0},f.prototype["parse hostname"]=f.prototype["parse host"]=function(e,A){if(this.stateOverride&&"file"===this.url.scheme)--this.pointer,this.state="file host";else if(58!==e||this.arrFlag)if(isNaN(e)||47===e||63===e||35===e||N(this.url)&&92===e){if(--this.pointer,N(this.url)&&""===this.buffer)return this.parseError=!0,m;if(this.stateOverride&&""===this.buffer&&(k(this.url)||null!==this.url.port))return this.parseError=!0,!1;const e=X(this.buffer,N(this.url));if(e===m)return m;if(this.url.host=e,this.buffer="",this.state="path start",this.stateOverride)return!1}else 91===e?this.arrFlag=!0:93===e&&(this.arrFlag=!1),this.buffer+=A;else{if(""===this.buffer)return this.parseError=!0,m;const e=X(this.buffer,N(this.url));if(e===m)return m;if(this.url.host=e,this.buffer="",this.state="port","hostname"===this.stateOverride)return!1}return!0},f.prototype["parse port"]=function(e,A){if(p(e))this.buffer+=A;else{if(!(isNaN(e)||47===e||63===e||35===e||N(this.url)&&92===e||this.stateOverride))return this.parseError=!0,m;if(""!==this.buffer){const e=parseInt(this.buffer);if(e>Math.pow(2,16)-1)return this.parseError=!0,m;this.url.port=e===(Y=this.url.scheme,i[Y])?null:e,this.buffer=""}if(this.stateOverride)return!1;this.state="path start",--this.pointer}var Y;return!0};const R=new Set([47,92,63,35]);f.prototype["parse file"]=function(e){var A,Y;return this.url.scheme="file",47===e||92===e?(92===e&&(this.parseError=!0),this.state="file slash"):null!==this.base&&"file"===this.base.scheme?isNaN(e)?(this.url.host=this.base.host,this.url.path=this.base.path.slice(),this.url.query=this.base.query):63===e?(this.url.host=this.base.host,this.url.path=this.base.path.slice(),this.url.query="",this.state="query"):35===e?(this.url.host=this.base.host,this.url.path=this.base.path.slice(),this.url.query=this.base.query,this.url.fragment="",this.state="fragment"):(this.input.length-this.pointer-1==0||(A=e,Y=this.input[this.pointer+1],!d(A)||58!==Y&&124!==Y)||this.input.length-this.pointer-1>=2&&!R.has(this.input[this.pointer+2])?(this.url.host=this.base.host,this.url.path=this.base.path.slice(),g(this.url)):this.parseError=!0,this.state="path",--this.pointer):(this.state="path",--this.pointer),!0},f.prototype["parse file slash"]=function(e){var A;return 47===e||92===e?(92===e&&(this.parseError=!0),this.state="file host"):(null!==this.base&&"file"===this.base.scheme&&(2===(A=this.base.path[0]).length&&d(A.codePointAt(0))&&":"===A[1]?this.url.path.push(this.base.path[0]):this.url.host=this.base.host),this.state="path",--this.pointer),!0},f.prototype["parse file host"]=function(e,A){if(isNaN(e)||47===e||92===e||63===e||35===e)if(--this.pointer,!this.stateOverride&&s(this.buffer))this.parseError=!0,this.state="path";else if(""===this.buffer){if(this.url.host="",this.stateOverride)return!1;this.state="path start"}else{let e=X(this.buffer,N(this.url));if(e===m)return m;if("localhost"===e&&(e=""),this.url.host=e,this.stateOverride)return!1;this.buffer="",this.state="path start"}else this.buffer+=A;return!0},f.prototype["parse path start"]=function(e){return N(this.url)?(92===e&&(this.parseError=!0),this.state="path",47!==e&&92!==e&&--this.pointer):this.stateOverride||63!==e?this.stateOverride||35!==e?void 0!==e&&(this.state="path",47!==e&&--this.pointer):(this.url.fragment="",this.state="fragment"):(this.url.query="",this.state="query"),!0},f.prototype["parse path"]=function(e){if(isNaN(e)||47===e||N(this.url)&&92===e||!this.stateOverride&&(63===e||35===e)){if(N(this.url)&&92===e&&(this.parseError=!0),".."===(A=(A=this.buffer).toLowerCase())||"%2e."===A||".%2e"===A||"%2e%2e"===A?(g(this.url),47===e||N(this.url)&&92===e||this.url.path.push("")):!r(this.buffer)||47===e||N(this.url)&&92===e?r(this.buffer)||("file"===this.url.scheme&&0===this.url.path.length&&s(this.buffer)&&(""!==this.url.host&&null!==this.url.host&&(this.parseError=!0,this.url.host=""),this.buffer=this.buffer[0]+":"),this.url.path.push(this.buffer)):this.url.path.push(""),this.buffer="","file"===this.url.scheme&&(void 0===e||63===e||35===e))for(;this.url.path.length>1&&""===this.url.path[0];)this.parseError=!0,this.url.path.shift();63===e&&(this.url.query="",this.state="query"),35===e&&(this.url.fragment="",this.state="fragment")}else 37!==e||o(this.input[this.pointer+1])&&o(this.input[this.pointer+2])||(this.parseError=!0),this.buffer+=G(e,u);var A;return!0},f.prototype["parse cannot-be-a-base-URL path"]=function(e){return 63===e?(this.url.query="",this.state="query"):35===e?(this.url.fragment="",this.state="fragment"):(isNaN(e)||37===e||(this.parseError=!0),37!==e||o(this.input[this.pointer+1])&&o(this.input[this.pointer+2])||(this.parseError=!0),isNaN(e)||(this.url.path[0]=this.url.path[0]+G(e,h))),!0},f.prototype["parse query"]=function(e,A){if(isNaN(e)||!this.stateOverride&&35===e){N(this.url)&&"ws"!==this.url.scheme&&"wss"!==this.url.scheme||(this.encodingOverride="utf-8");const A=new Buffer(this.buffer);for(let e=0;e<A.length;++e)A[e]<33||A[e]>126||34===A[e]||35===A[e]||60===A[e]||62===A[e]?this.url.query+=j(A[e]):this.url.query+=String.fromCodePoint(A[e]);this.buffer="",35===e&&(this.url.fragment="",this.state="fragment")}else 37!==e||o(this.input[this.pointer+1])&&o(this.input[this.pointer+2])||(this.parseError=!0),this.buffer+=A;return!0},f.prototype["parse fragment"]=function(e){return isNaN(e)||(0===e?this.parseError=!0:(37!==e||o(this.input[this.pointer+1])&&o(this.input[this.pointer+2])||(this.parseError=!0),this.url.fragment+=G(e,h))),!0},e.exports.serializeURL=function(e,A){let Y=e.scheme+":";if(null!==e.host?(Y+="//",""===e.username&&""===e.password||(Y+=e.username,""!==e.password&&(Y+=":"+e.password),Y+="@"),Y+=J(e.host),null!==e.port&&(Y+=":"+e.port)):null===e.host&&"file"===e.scheme&&(Y+="//"),e.cannotBeABaseURL)Y+=e.path[0];else for(const A of e.path)Y+="/"+A;return null!==e.query&&(Y+="?"+e.query),A||null===e.fragment||(Y+="#"+e.fragment),Y},e.exports.serializeURLOrigin=function(A){switch(A.scheme){case"blob":try{return e.exports.serializeURLOrigin(e.exports.parseURL(A.path[0]))}catch(e){return"null"}case"ftp":case"gopher":case"http":case"https":case"ws":case"wss":return function(e){let A=e.scheme+"://";return A+=J(e.host),null!==e.port&&(A+=":"+e.port),A}({scheme:A.scheme,host:A.host,port:A.port});case"file":return"file://";default:return"null"}},e.exports.basicURLParse=function(e,A){void 0===A&&(A={});const Y=new f(e,A.baseURL,A.encodingOverride,A.url,A.stateOverride);return Y.failure?"failure":Y.url},e.exports.setTheUsername=function(e,A){e.username="";const Y=t.ucs2.decode(A);for(let A=0;A<Y.length;++A)e.username+=G(Y[A],c)},e.exports.setThePassword=function(e,A){e.password="";const Y=t.ucs2.decode(A);for(let A=0;A<Y.length;++A)e.password+=G(Y[A],c)},e.exports.serializeHost=J,e.exports.cannotHaveAUsernamePasswordPort=function(e){return null===e.host||""===e.host||e.cannotBeABaseURL||"file"===e.scheme},e.exports.serializeInteger=function(e){return String(e)},e.exports.parseURL=function(A,Y){return void 0===Y&&(Y={}),e.exports.basicURLParse(A,{baseURL:Y.baseURL,encodingOverride:Y.encodingOverride})}},9581:e=>{"use strict";e.exports.mixin=function(e,A){const Y=Object.getOwnPropertyNames(A);for(let t=0;t<Y.length;++t)Object.defineProperty(e,Y[t],Object.getOwnPropertyDescriptor(A,Y[t]))},e.exports.wrapperSymbol=Symbol("wrapper"),e.exports.implSymbol=Symbol("impl"),e.exports.wrapperForImpl=function(A){return A[e.exports.wrapperSymbol]},e.exports.implForWrapper=function(A){return A[e.exports.implSymbol]}},3845:e=>{"use strict";e.exports="data:application/octet-stream;base64,"},3529:e=>{"use strict";e.exports='{"format": "graph-model", "generatedBy": "2.5.0", "convertedBy": "TensorFlow.js Converter v3.7.0", "signature": {"inputs": {"inputs": {"name": "Placeholder:0", "dtype": "DT_STRING", "tensorShape": {"dim": [{"size": "-1"}]}}}, "outputs": {"scores": {"name": "head/predictions/probabilities:0", "dtype": "DT_FLOAT", "tensorShape": {"dim": [{"size": "-1"}, {"size": "54"}]}}, "classes": {"name": "head/Tile:0", "dtype": "DT_STRING", "tensorShape": {"dim": [{"size": "-1"}, {"size": "54"}]}}}}, "modelTopology": {"node": [{"name": "head/ExpandDims/input", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_STRING", "tensorShape": {"dim": [{"size": "54"}]}}}, "dtype": {"type": "DT_STRING"}}}, {"name": "head/ExpandDims/dim", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "head/strided_slice/stack", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "head/strided_slice/stack_1", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "head/strided_slice/stack_2", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "head/Tile/multiples/1", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Reshape_1/shape", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "2"}]}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/stack/0", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/strided_slice/stack", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/strided_slice/stack_1", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/strided_slice/stack_2", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding/embedding_weights", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_FLOAT", "tensorShape": {"dim": [{"size": "5000"}, {"size": "70"}]}}}, "dtype": {"type": "DT_FLOAT"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/GatherV2_1/axis", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/GreaterEqual/y", "op": "Const", "attr": {"dtype": {"type": "DT_INT64"}, "value": {"tensor": {"dtype": "DT_INT64", "tensorShape": {}}}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Reshape/shape", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/GatherV2_2/axis", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/to_sparse_input/ignore_value/x", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_STRING", "tensorShape": {}}}, "dtype": {"type": "DT_STRING"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Slice/begin", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Slice/size", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Const", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/GatherV2/indices", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/GatherV2/axis", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/SparseFillEmptyRows/Const", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT64", "tensorShape": {}}}, "dtype": {"type": "DT_INT64"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/embedding_lookup_sparse/strided_slice/stack", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "2"}]}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "2"}]}}}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "2"}]}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "dnn/hiddenlayer_0/kernel", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_FLOAT", "tensorShape": {"dim": [{"size": "70"}, {"size": "512"}]}}}, "dtype": {"type": "DT_FLOAT"}}}, {"name": "dnn/hiddenlayer_0/bias", "op": "Const", "attr": {"dtype": {"type": "DT_FLOAT"}, "value": {"tensor": {"dtype": "DT_FLOAT", "tensorShape": {"dim": [{"size": "512"}]}}}}}, {"name": "dnn/hiddenlayer_1/kernel", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_FLOAT", "tensorShape": {"dim": [{"size": "512"}, {"size": "32"}]}}}, "dtype": {"type": "DT_FLOAT"}}}, {"name": "dnn/hiddenlayer_1/bias", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_FLOAT", "tensorShape": {"dim": [{"size": "32"}]}}}, "dtype": {"type": "DT_FLOAT"}}}, {"name": "dnn/logits/kernel", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_FLOAT", "tensorShape": {"dim": [{"size": "32"}, {"size": "54"}]}}}, "dtype": {"type": "DT_FLOAT"}}}, {"name": "dnn/logits/bias", "op": "Const", "attr": {"dtype": {"type": "DT_FLOAT"}, "value": {"tensor": {"dtype": "DT_FLOAT", "tensorShape": {"dim": [{"size": "54"}]}}}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Slice_1/begin", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Slice_1/size", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Reshape_1/shape", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "2"}]}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/stack/0", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/strided_slice/stack", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/strided_slice/stack_1", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/strided_slice/stack_2", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "linear/linear_model/content/weights", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_FLOAT", "tensorShape": {"dim": [{"size": "5000"}, {"size": "54"}]}}}, "dtype": {"type": "DT_FLOAT"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/GatherV2_1/axis", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/GreaterEqual/y", "op": "Const", "attr": {"dtype": {"type": "DT_INT64"}, "value": {"tensor": {"dtype": "DT_INT64", "tensorShape": {}}}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Reshape/shape", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/GatherV2_2/axis", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Slice/begin", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Slice/size", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Const", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/to_sparse_input/ignore_value/x", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_STRING", "tensorShape": {}}}, "dtype": {"type": "DT_STRING"}}}, {"name": "map/while/loop_counter", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}}}, {"name": "map/Const", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "map/TensorArrayV2_1/element_shape", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "map/strided_slice/stack", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "map/strided_slice/stack_1", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "map/strided_slice/stack_2", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "Placeholder", "op": "Placeholder", "attr": {"shape": {"shape": {"dim": [{"size": "-1"}]}}, "dtype": {"type": "DT_STRING"}}}, {"name": "map/TensorArrayUnstack/Const", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{}]}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "map/TensorArrayV2Stack/TensorListStack/element_shape", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/strided_slice/stack", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/strided_slice/stack_1", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/strided_slice/stack_2", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/Cast/x/1", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/GatherV2/indices", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/GatherV2/axis", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/SparseFillEmptyRows/Const", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT64", "tensorShape": {}}}, "dtype": {"type": "DT_INT64"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/embedding_lookup_sparse/strided_slice/stack", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "2"}]}}}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/embedding_lookup_sparse/strided_slice/stack_1", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "2"}]}}}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/embedding_lookup_sparse/strided_slice/stack_2", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "2"}]}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Slice_2/begin", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Slice_2/size", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/concat/axis", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}}}, {"name": "linear/linear_model/bias_weights", "op": "Const", "attr": {"dtype": {"type": "DT_FLOAT"}, "value": {"tensor": {"dtype": "DT_FLOAT", "tensorShape": {"dim": [{"size": "54"}]}}}}}, {"name": "head/ExpandDims", "op": "ExpandDims", "input": ["head/ExpandDims/input", "head/ExpandDims/dim"], "attr": {"T": {"type": "DT_STRING"}, "Tdim": {"type": "DT_INT32"}}}, {"name": "map/Shape", "op": "Shape", "input": ["Placeholder"], "attr": {"out_type": {"type": "DT_INT32"}, "T": {"type": "DT_STRING"}}}, {"name": "map/TensorArrayUnstack/TensorListFromTensor", "op": "TensorListFromTensor", "input": ["Placeholder", "map/TensorArrayUnstack/Const"], "attr": {"shape_type": {"type": "DT_INT32"}, "element_dtype": {"type": "DT_STRING"}}}, {"name": "map/strided_slice", "op": "StridedSlice", "input": ["map/Shape", "map/strided_slice/stack", "map/strided_slice/stack_1", "map/strided_slice/stack_2"], "attr": {"begin_mask": {"i": "0"}, "shrink_axis_mask": {"i": "1"}, "new_axis_mask": {"i": "0"}, "end_mask": {"i": "0"}, "Index": {"type": "DT_INT32"}, "T": {"type": "DT_INT32"}, "ellipsis_mask": {"i": "0"}}}, {"name": "map/TensorArrayV2_1", "op": "TensorListReserve", "input": ["map/TensorArrayV2_1/element_shape", "map/strided_slice"], "attr": {"shape_type": {"type": "DT_INT32"}, "element_dtype": {"type": "DT_STRING"}}}, {"name": "map/while", "op": "StatelessWhile", "input": ["map/while/loop_counter", "map/strided_slice", "map/Const", "map/TensorArrayV2_1", "map/strided_slice", "map/TensorArrayUnstack/TensorListFromTensor"], "attr": {"_read_only_resource_inputs": {"list": {}}, "parallel_iterations": {"i": "10"}, "_lower_using_switch_merge": {"b": true}, "cond": {"func": {"name": "map_while_cond_49114"}}, "output_shapes": {"list": {"shape": [{}, {}, {}, {}, {}, {}]}}, "body": {"func": {"name": "map_while_body_49115"}}, "T": {"list": {"type": ["DT_INT32", "DT_INT32", "DT_INT32", "DT_VARIANT", "DT_INT32", "DT_VARIANT"]}}, "_num_original_outputs": {"i": "6"}}}, {"name": "map/TensorArrayV2Stack/TensorListStack", "op": "TensorListStack", "input": ["map/while:3", "map/TensorArrayV2Stack/TensorListStack/element_shape"], "attr": {"num_elements": {"i": "-1"}, "element_dtype": {"type": "DT_STRING"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/to_sparse_input/NotEqual", "op": "NotEqual", "input": ["map/TensorArrayV2Stack/TensorListStack", "dnn/input_from_feature_columns/input_layer/content_embedding_1/to_sparse_input/ignore_value/x"], "attr": {"incompatible_shape_error": {"b": true}, "T": {"type": "DT_STRING"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/to_sparse_input/dense_shape", "op": "Shape", "input": ["map/TensorArrayV2Stack/TensorListStack"], "attr": {"out_type": {"type": "DT_INT64"}, "T": {"type": "DT_STRING"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/to_sparse_input/NotEqual", "op": "NotEqual", "input": ["map/TensorArrayV2Stack/TensorListStack", "linear/linear_model/linear/linear_model/linear/linear_model/content/to_sparse_input/ignore_value/x"], "attr": {"incompatible_shape_error": {"b": true}, "T": {"type": "DT_STRING"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/to_sparse_input/dense_shape", "op": "Shape", "input": ["map/TensorArrayV2Stack/TensorListStack"], "attr": {"out_type": {"type": "DT_INT64"}, "T": {"type": "DT_STRING"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/to_sparse_input/indices", "op": "Where", "input": ["dnn/input_from_feature_columns/input_layer/content_embedding_1/to_sparse_input/NotEqual"], "attr": {"T": {"type": "DT_BOOL"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Slice", "op": "Slice", "input": ["dnn/input_from_feature_columns/input_layer/content_embedding_1/to_sparse_input/dense_shape", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Slice/begin", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Slice/size"], "attr": {"Index": {"type": "DT_INT32"}, "T": {"type": "DT_INT64"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/GatherV2", "op": "GatherV2", "input": ["dnn/input_from_feature_columns/input_layer/content_embedding_1/to_sparse_input/dense_shape", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/GatherV2/indices", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/GatherV2/axis"], "attr": {"batch_dims": {"i": "0"}, "Tindices": {"type": "DT_INT32"}, "Taxis": {"type": "DT_INT32"}, "Tparams": {"type": "DT_INT64"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/to_sparse_input/indices", "op": "Where", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/to_sparse_input/NotEqual"], "attr": {"T": {"type": "DT_BOOL"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/Shape/Cast", "op": "Cast", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/to_sparse_input/dense_shape"], "attr": {"Truncate": {"b": false}, "SrcT": {"type": "DT_INT64"}, "DstT": {"type": "DT_INT32"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/to_sparse_input/values", "op": "GatherNd", "input": ["map/TensorArrayV2Stack/TensorListStack", "dnn/input_from_feature_columns/input_layer/content_embedding_1/to_sparse_input/indices"], "attr": {"Tparams": {"type": "DT_STRING"}, "Tindices": {"type": "DT_INT64"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Prod", "op": "Prod", "input": ["dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Slice", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Const"], "attr": {"T": {"type": "DT_INT64"}, "Tidx": {"type": "DT_INT32"}, "keep_dims": {"b": false}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/to_sparse_input/values", "op": "GatherNd", "input": ["map/TensorArrayV2Stack/TensorListStack", "linear/linear_model/linear/linear_model/linear/linear_model/content/to_sparse_input/indices"], "attr": {"Tparams": {"type": "DT_STRING"}, "Tindices": {"type": "DT_INT64"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/strided_slice", "op": "StridedSlice", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/Shape/Cast", "linear/linear_model/linear/linear_model/linear/linear_model/content/strided_slice/stack", "linear/linear_model/linear/linear_model/linear/linear_model/content/strided_slice/stack_1", "linear/linear_model/linear/linear_model/linear/linear_model/content/strided_slice/stack_2"], "attr": {"Index": {"type": "DT_INT32"}, "ellipsis_mask": {"i": "0"}, "end_mask": {"i": "0"}, "new_axis_mask": {"i": "0"}, "shrink_axis_mask": {"i": "1"}, "begin_mask": {"i": "0"}, "T": {"type": "DT_INT32"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/lookup", "op": "StringToHashBucketFast", "input": ["dnn/input_from_feature_columns/input_layer/content_embedding_1/to_sparse_input/values"], "attr": {"num_buckets": {"i": "5000"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Cast/x", "op": "Pack", "input": ["dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Prod", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/GatherV2"], "attr": {"T": {"type": "DT_INT64"}, "N": {"i": "2"}, "axis": {"i": "0"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/lookup", "op": "StringToHashBucketFast", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/to_sparse_input/values"], "attr": {"num_buckets": {"i": "5000"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/Cast/x", "op": "Pack", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/strided_slice", "linear/linear_model/linear/linear_model/linear/linear_model/content/Cast/x/1"], "attr": {"axis": {"i": "0"}, "N": {"i": "2"}, "T": {"type": "DT_INT32"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/GreaterEqual", "op": "GreaterEqual", "input": ["dnn/input_from_feature_columns/input_layer/content_embedding_1/lookup", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/GreaterEqual/y"], "attr": {"T": {"type": "DT_INT64"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/SparseReshape", "op": "SparseReshape", "input": ["dnn/input_from_feature_columns/input_layer/content_embedding_1/to_sparse_input/indices", "dnn/input_from_feature_columns/input_layer/content_embedding_1/to_sparse_input/dense_shape", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Cast/x"]}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/GreaterEqual", "op": "GreaterEqual", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/lookup", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/GreaterEqual/y"], "attr": {"T": {"type": "DT_INT64"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/Cast", "op": "Cast", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/Cast/x"], "attr": {"SrcT": {"type": "DT_INT32"}, "Truncate": {"b": false}, "DstT": {"type": "DT_INT64"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Where", "op": "Where", "input": ["dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/GreaterEqual"], "attr": {"T": {"type": "DT_BOOL"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Where", "op": "Where", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/GreaterEqual"], "attr": {"T": {"type": "DT_BOOL"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/SparseReshape", "op": "SparseReshape", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/to_sparse_input/indices", "linear/linear_model/linear/linear_model/linear/linear_model/content/to_sparse_input/dense_shape", "linear/linear_model/linear/linear_model/linear/linear_model/content/Cast"]}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Reshape", "op": "Reshape", "input": ["dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Where", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Reshape/shape"], "attr": {"Tshape": {"type": "DT_INT32"}, "T": {"type": "DT_INT64"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Reshape", "op": "Reshape", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Where", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Reshape/shape"], "attr": {"T": {"type": "DT_INT64"}, "Tshape": {"type": "DT_INT32"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Cast_1", "op": "Cast", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/SparseReshape:1"], "attr": {"DstT": {"type": "DT_INT32"}, "SrcT": {"type": "DT_INT64"}, "Truncate": {"b": false}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Slice", "op": "Slice", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/SparseReshape:1", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Slice/begin", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Slice/size"], "attr": {"T": {"type": "DT_INT64"}, "Index": {"type": "DT_INT32"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/GatherV2", "op": "GatherV2", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/SparseReshape:1", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/GatherV2/indices", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/GatherV2/axis"], "attr": {"Tparams": {"type": "DT_INT64"}, "Tindices": {"type": "DT_INT32"}, "Taxis": {"type": "DT_INT32"}, "batch_dims": {"i": "0"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/GatherV2_1", "op": "GatherV2", "input": ["dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/SparseReshape", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Reshape", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/GatherV2_1/axis"], "attr": {"Tindices": {"type": "DT_INT64"}, "Taxis": {"type": "DT_INT32"}, "Tparams": {"type": "DT_INT64"}, "batch_dims": {"i": "0"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/GatherV2_2", "op": "GatherV2", "input": ["dnn/input_from_feature_columns/input_layer/content_embedding_1/lookup", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Reshape", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/GatherV2_2/axis"], "attr": {"batch_dims": {"i": "0"}, "Taxis": {"type": "DT_INT32"}, "Tparams": {"type": "DT_INT64"}, "Tindices": {"type": "DT_INT64"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/GatherV2_2", "op": "GatherV2", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/lookup", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Reshape", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/GatherV2_2/axis"], "attr": {"Tindices": {"type": "DT_INT64"}, "batch_dims": {"i": "0"}, "Taxis": {"type": "DT_INT32"}, "Tparams": {"type": "DT_INT64"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Slice_1", "op": "Slice", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Cast_1", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Slice_1/begin", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Slice_1/size"], "attr": {"Index": {"type": "DT_INT32"}, "T": {"type": "DT_INT32"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Prod", "op": "Prod", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Slice", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Const"], "attr": {"T": {"type": "DT_INT64"}, "Tidx": {"type": "DT_INT32"}, "keep_dims": {"b": false}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows", "op": "SparseFillEmptyRows", "input": ["dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/GatherV2_1", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/GatherV2_2", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/SparseReshape:1", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/SparseFillEmptyRows/Const"], "attr": {"T": {"type": "DT_INT64"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Cast/x", "op": "Pack", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Prod", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/GatherV2"], "attr": {"T": {"type": "DT_INT64"}, "axis": {"i": "0"}, "N": {"i": "2"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/embedding_lookup_sparse/strided_slice", "op": "StridedSlice", "input": ["dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/embedding_lookup_sparse/strided_slice/stack", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"], "attr": {"ellipsis_mask": {"i": "0"}, "Index": {"type": "DT_INT32"}, "begin_mask": {"i": "1"}, "end_mask": {"i": "1"}, "new_axis_mask": {"i": "0"}, "T": {"type": "DT_INT64"}, "shrink_axis_mask": {"i": "2"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Reshape_1", "op": "Reshape", "input": ["dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:2", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Reshape_1/shape"], "attr": {"T": {"type": "DT_BOOL"}, "Tshape": {"type": "DT_INT32"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/SparseReshape", "op": "SparseReshape", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/SparseReshape", "linear/linear_model/linear/linear_model/linear/linear_model/content/SparseReshape:1", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Cast/x"]}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/embedding_lookup_sparse", "op": "SparseSegmentMean", "input": ["dnn/input_from_feature_columns/input_layer/content_embedding/embedding_weights", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:1", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/embedding_lookup_sparse/strided_slice"], "attr": {"Tidx": {"type": "DT_INT64"}, "T": {"type": "DT_FLOAT"}, "Tsegmentids": {"type": "DT_INT64"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/GatherV2_1", "op": "GatherV2", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/SparseReshape", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Reshape", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/GatherV2_1/axis"], "attr": {"Tparams": {"type": "DT_INT64"}, "Tindices": {"type": "DT_INT64"}, "batch_dims": {"i": "0"}, "Taxis": {"type": "DT_INT32"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Shape", "op": "Shape", "input": ["dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/embedding_lookup_sparse"], "attr": {"T": {"type": "DT_FLOAT"}, "out_type": {"type": "DT_INT32"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/zeros_like", "op": "ZerosLike", "input": ["dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/embedding_lookup_sparse"], "attr": {"T": {"type": "DT_FLOAT"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows", "op": "SparseFillEmptyRows", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/GatherV2_1", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/GatherV2_2", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/SparseReshape:1", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/SparseFillEmptyRows/Const"], "attr": {"T": {"type": "DT_INT64"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/strided_slice", "op": "StridedSlice", "input": ["dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Shape", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/strided_slice/stack", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/strided_slice/stack_1", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/strided_slice/stack_2"], "attr": {"end_mask": {"i": "0"}, "shrink_axis_mask": {"i": "1"}, "ellipsis_mask": {"i": "0"}, "Index": {"type": "DT_INT32"}, "T": {"type": "DT_INT32"}, "new_axis_mask": {"i": "0"}, "begin_mask": {"i": "0"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Reshape_1", "op": "Reshape", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows:2", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Reshape_1/shape"], "attr": {"T": {"type": "DT_BOOL"}, "Tshape": {"type": "DT_INT32"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/embedding_lookup_sparse/strided_slice", "op": "StridedSlice", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/embedding_lookup_sparse/strided_slice/stack", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/embedding_lookup_sparse/strided_slice/stack_1", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/embedding_lookup_sparse/strided_slice/stack_2"], "attr": {"shrink_axis_mask": {"i": "2"}, "Index": {"type": "DT_INT32"}, "T": {"type": "DT_INT64"}, "end_mask": {"i": "1"}, "ellipsis_mask": {"i": "0"}, "begin_mask": {"i": "1"}, "new_axis_mask": {"i": "0"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/stack", "op": "Pack", "input": ["dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/stack/0", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/strided_slice"], "attr": {"N": {"i": "2"}, "axis": {"i": "0"}, "T": {"type": "DT_INT32"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/embedding_lookup_sparse", "op": "SparseSegmentSum", "input": ["linear/linear_model/content/weights", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows:1", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/embedding_lookup_sparse/strided_slice"], "attr": {"T": {"type": "DT_FLOAT"}, "Tsegmentids": {"type": "DT_INT64"}, "Tidx": {"type": "DT_INT64"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Tile", "op": "Tile", "input": ["dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Reshape_1", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/stack"], "attr": {"T": {"type": "DT_BOOL"}, "Tmultiples": {"type": "DT_INT32"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Shape", "op": "Shape", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/embedding_lookup_sparse"], "attr": {"out_type": {"type": "DT_INT32"}, "T": {"type": "DT_FLOAT"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/zeros_like", "op": "ZerosLike", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/embedding_lookup_sparse"], "attr": {"T": {"type": "DT_FLOAT"}}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights", "op": "Select", "input": ["dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Tile", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/zeros_like", "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/embedding_lookup_sparse"], "attr": {"T": {"type": "DT_FLOAT"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/strided_slice", "op": "StridedSlice", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Shape", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/strided_slice/stack", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/strided_slice/stack_1", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/strided_slice/stack_2"], "attr": {"ellipsis_mask": {"i": "0"}, "begin_mask": {"i": "0"}, "new_axis_mask": {"i": "0"}, "end_mask": {"i": "0"}, "shrink_axis_mask": {"i": "1"}, "T": {"type": "DT_INT32"}, "Index": {"type": "DT_INT32"}}}, {"name": "dnn/hiddenlayer_0/Relu", "op": "_FusedMatMul", "input": ["dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights", "dnn/hiddenlayer_0/kernel", "dnn/hiddenlayer_0/bias"], "device": "/device:CPU:0", "attr": {"num_args": {"i": "1"}, "fused_ops": {"list": {"s": ["Qmlhc0FkZA==", "UmVsdQ=="]}}, "T": {"type": "DT_FLOAT"}, "transpose_b": {"b": false}, "transpose_a": {"b": false}, "epsilon": {"f": 0.0}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/stack", "op": "Pack", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/stack/0", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/strided_slice"], "attr": {"axis": {"i": "0"}, "T": {"type": "DT_INT32"}, "N": {"i": "2"}}}, {"name": "dnn/hiddenlayer_1/Relu", "op": "_FusedMatMul", "input": ["dnn/hiddenlayer_0/Relu", "dnn/hiddenlayer_1/kernel", "dnn/hiddenlayer_1/bias"], "device": "/device:CPU:0", "attr": {"fused_ops": {"list": {"s": ["Qmlhc0FkZA==", "UmVsdQ=="]}}, "num_args": {"i": "1"}, "epsilon": {"f": 0.0}, "transpose_a": {"b": false}, "T": {"type": "DT_FLOAT"}, "transpose_b": {"b": false}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Tile", "op": "Tile", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Reshape_1", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/stack"], "attr": {"Tmultiples": {"type": "DT_INT32"}, "T": {"type": "DT_BOOL"}}}, {"name": "dnn/logits/BiasAdd", "op": "_FusedMatMul", "input": ["dnn/hiddenlayer_1/Relu", "dnn/logits/kernel", "dnn/logits/bias"], "device": "/device:CPU:0", "attr": {"num_args": {"i": "1"}, "transpose_b": {"b": false}, "fused_ops": {"list": {"s": ["Qmlhc0FkZA=="]}}, "epsilon": {"f": 0.0}, "transpose_a": {"b": false}, "T": {"type": "DT_FLOAT"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum", "op": "Select", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Tile", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/zeros_like", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/embedding_lookup_sparse"], "attr": {"T": {"type": "DT_FLOAT"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Shape_1", "op": "Shape", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum"], "attr": {"out_type": {"type": "DT_INT32"}, "T": {"type": "DT_FLOAT"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Slice_2", "op": "Slice", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Shape_1", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Slice_2/begin", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Slice_2/size"], "attr": {"Index": {"type": "DT_INT32"}, "T": {"type": "DT_INT32"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/concat", "op": "ConcatV2", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Slice_1", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Slice_2", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/concat/axis"], "attr": {"N": {"i": "2"}, "T": {"type": "DT_INT32"}, "Tidx": {"type": "DT_INT32"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Reshape_2", "op": "Reshape", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum", "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/concat"], "attr": {"Tshape": {"type": "DT_INT32"}, "T": {"type": "DT_FLOAT"}}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum", "op": "BiasAdd", "input": ["linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Reshape_2", "linear/linear_model/bias_weights"], "attr": {"T": {"type": "DT_FLOAT"}, "data_format": {"s": "TkhXQw=="}}}, {"name": "add", "op": "AddV2", "input": ["dnn/logits/BiasAdd", "linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum"], "attr": {"T": {"type": "DT_FLOAT"}}}, {"name": "head/predictions/probabilities", "op": "Softmax", "input": ["add"], "attr": {"T": {"type": "DT_FLOAT"}}}, {"name": "head/Shape", "op": "Shape", "input": ["head/predictions/probabilities"], "attr": {"T": {"type": "DT_FLOAT"}, "out_type": {"type": "DT_INT32"}}}, {"name": "head/strided_slice", "op": "StridedSlice", "input": ["head/Shape", "head/strided_slice/stack", "head/strided_slice/stack_1", "head/strided_slice/stack_2"], "attr": {"ellipsis_mask": {"i": "0"}, "begin_mask": {"i": "0"}, "end_mask": {"i": "0"}, "T": {"type": "DT_INT32"}, "shrink_axis_mask": {"i": "1"}, "new_axis_mask": {"i": "0"}, "Index": {"type": "DT_INT32"}}}, {"name": "head/Tile/multiples", "op": "Pack", "input": ["head/strided_slice", "head/Tile/multiples/1"], "attr": {"T": {"type": "DT_INT32"}, "N": {"i": "2"}, "axis": {"i": "0"}}}, {"name": "head/Tile", "op": "Tile", "input": ["head/ExpandDims", "head/Tile/multiples"], "attr": {"Tmultiples": {"type": "DT_INT32"}, "T": {"type": "DT_STRING"}}}], "library": {"function": [{"signature": {"name": "map_while_body_49115", "inputArg": [{"name": "map_while_loop_counter", "type": "DT_INT32"}, {"name": "map_strided_slice_0", "type": "DT_INT32"}, {"name": "placeholder", "type": "DT_INT32"}, {"name": "placeholder_1", "type": "DT_VARIANT"}, {"name": "map_strided_slice_1_0", "type": "DT_INT32"}, {"name": "tensorarrayv2read_tensorlistgetitem_map_tensorarrayunstack_tensorlistfromtensor_0", "type": "DT_VARIANT"}], "outputArg": [{"name": "add_1", "type": "DT_INT32"}, {"name": "map_strided_slice", "type": "DT_INT32"}, {"name": "add", "type": "DT_INT32"}, {"name": "tensorarrayv2write_tensorlistsetitem", "type": "DT_VARIANT"}, {"name": "map_strided_slice_1", "type": "DT_INT32"}, {"name": "tensorarrayv2read_tensorlistgetitem_map_tensorarrayunstack_tensorlistfromtensor", "type": "DT_VARIANT"}]}, "nodeDef": [{"name": "map_while_body_49115/add_1/y", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}}}, {"name": "map_while_body_49115/add/y", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}, "_output_shapes": {"list": {"shape": [{}]}}}}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice/stack", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice/stack_1", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice/stack_2", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_2/stack", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}}}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_2/stack_1", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}}}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_2/stack_2", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}}, {"name": "map_while_body_49115/StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/row_starts", "op": "Const", "attr": {"dtype": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT64", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice/stack", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice/stack_1", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice/stack_2", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_2/stack", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}}}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_2/stack_1", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_2/stack_2", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/concat/values_0", "op": "Const", "attr": {"dtype": {"type": "DT_INT64"}, "value": {"tensor": {"dtype": "DT_INT64", "tensorShape": {"dim": [{"size": "1"}]}}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/strided_slice_1/stack", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/strided_slice_1/stack_1", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/strided_slice_1/stack_2", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}}}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Const", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Greater/y", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}, "dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}}}, {"name": "map_while_body_49115/TensorArrayV2Read/Const", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{}]}]}}, "dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{}]}}}}}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/StringSplit/delimiter", "op": "Const", "attr": {"dtype": {"type": "DT_STRING"}, "value": {"tensor": {"dtype": "DT_STRING", "tensorShape": {}}}, "_output_shapes": {"list": {"shape": [{}]}}}}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/strided_slice/stack", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "2"}]}}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "2"}]}]}}}}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/strided_slice/stack_1", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "2"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "2"}]}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/strided_slice/stack_2", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "2"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "2"}]}}}}}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Const_1", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/add/y", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}, "dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}}}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Const_2", "op": "Const", "attr": {"dtype": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{"dim": [{}]}]}}, "value": {"tensor": {"dtype": "DT_INT64", "tensorShape": {"dim": [{}]}}}}}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cumsum/axis", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}, "_output_shapes": {"list": {"shape": [{}]}}}}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/concat/axis", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}, "dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}}}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_1/stack", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_1/stack_1", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_1/stack_2", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_3/stack", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_3/stack_1", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_3/stack_2", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_4/Cast", "op": "Const", "attr": {"dtype": {"type": "DT_INT64"}, "value": {"tensor": {"dtype": "DT_INT64", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_5/Const", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{}]}}}}}, {"name": "map_while_body_49115/StringNGrams/RaggedFromRowStarts/strided_slice/stack", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}}, {"name": "map_while_body_49115/StringNGrams/RaggedFromRowStarts/strided_slice/stack_1", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "map_while_body_49115/StringNGrams/RaggedFromRowStarts/strided_slice/stack_2", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}}, {"name": "map_while_body_49115/StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/concat/axis", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}, "dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}}}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_1/stack", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_1/stack_1", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_1/stack_2", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_3/stack", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_3/stack_1", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_3/stack_2", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_4/Cast", "op": "Const", "attr": {"dtype": {"type": "DT_INT64"}, "value": {"tensor": {"dtype": "DT_INT64", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_5/Const", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{}]}]}}, "dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{}]}}}}}, {"name": "map_while_body_49115/Const", "op": "Const", "attr": {"dtype": {"type": "DT_STRING"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "10000"}]}]}}, "value": {"tensor": {"dtype": "DT_STRING", "tensorShape": {"dim": [{"size": "10000"}]}}}}}, {"name": "map_while_body_49115/concat/axis", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}}}, {"name": "map_while_body_49115/strided_slice/stack", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "map_while_body_49115/strided_slice/stack_1", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}, "dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}}, {"name": "map_while_body_49115/strided_slice/stack_2", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}}}}}, {"name": "add_1_0", "op": "AddV2", "input": ["map_while_loop_counter", "map_while_body_49115/add_1/y:output:0"], "attr": {"T": {"type": "DT_INT32"}}}, {"name": "add_0", "op": "AddV2", "input": ["placeholder", "map_while_body_49115/add/y:output:0"], "attr": {"T": {"type": "DT_INT32"}}}, {"name": "TensorArrayV2Read/TensorListGetItem", "op": "TensorListGetItem", "input": ["tensorarrayv2read_tensorlistgetitem_map_tensorarrayunstack_tensorlistfromtensor_0", "placeholder", "map_while_body_49115/TensorArrayV2Read/Const:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "element_dtype": {"type": "DT_STRING"}}}, {"name": "map_while_body_49115/ConstantFolding/StringsByteSplit/stack_const_axis", "op": "Const", "input": ["^TensorArrayV2Read/TensorListGetItem"], "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}}}, {"name": "StringsByteSplit/stack", "op": "ExpandDims", "input": ["TensorArrayV2Read/TensorListGetItem:item:0", "map_while_body_49115/ConstantFolding/StringsByteSplit/stack_const_axis:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "Tdim": {"type": "DT_INT32"}, "T": {"type": "DT_STRING"}}}, {"name": "StringsByteSplit/StringsByteSplit/StringSplit", "op": "StringSplit", "input": ["StringsByteSplit/stack:output:0", "map_while_body_49115/StringsByteSplit/StringsByteSplit/StringSplit/delimiter:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "2"}]}, {"dim": [{"size": "-1"}]}, {"dim": [{"size": "2"}]}]}}, "skip_empty": {"b": false}}}, {"name": "StringsByteSplit/StringsByteSplit/strided_slice_1", "op": "StridedSlice", "input": ["StringsByteSplit/StringsByteSplit/StringSplit:shape:0", "map_while_body_49115/StringsByteSplit/StringsByteSplit/strided_slice_1/stack:output:0", "map_while_body_49115/StringsByteSplit/StringsByteSplit/strided_slice_1/stack_1:output:0", "map_while_body_49115/StringsByteSplit/StringsByteSplit/strided_slice_1/stack_2:output:0"], "attr": {"begin_mask": {"i": "0"}, "end_mask": {"i": "0"}, "Index": {"type": "DT_INT32"}, "new_axis_mask": {"i": "0"}, "ellipsis_mask": {"i": "0"}, "shrink_axis_mask": {"i": "1"}, "T": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{}]}}}}, {"name": "StringsByteSplit/StringsByteSplit/strided_slice", "op": "StridedSlice", "input": ["StringsByteSplit/StringsByteSplit/StringSplit:indices:0", "map_while_body_49115/StringsByteSplit/StringsByteSplit/strided_slice/stack:output:0", "map_while_body_49115/StringsByteSplit/StringsByteSplit/strided_slice/stack_1:output:0", "map_while_body_49115/StringsByteSplit/StringsByteSplit/strided_slice/stack_2:output:0"], "attr": {"begin_mask": {"i": "1"}, "shrink_axis_mask": {"i": "2"}, "Index": {"type": "DT_INT32"}, "T": {"type": "DT_INT64"}, "new_axis_mask": {"i": "0"}, "end_mask": {"i": "1"}, "ellipsis_mask": {"i": "0"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cast_1", "op": "Cast", "input": ["StringsByteSplit/StringsByteSplit/strided_slice_1:output:0"], "attr": {"Truncate": {"b": false}, "SrcT": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{}]}}, "DstT": {"type": "DT_INT32"}}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cast", "op": "Cast", "input": ["StringsByteSplit/StringsByteSplit/strided_slice:output:0"], "attr": {"Truncate": {"b": false}, "DstT": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}, "SrcT": {"type": "DT_INT64"}}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Shape", "op": "Shape", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cast:y:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "T": {"type": "DT_INT32"}, "out_type": {"type": "DT_INT32"}}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Max", "op": "Max", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cast:y:0", "map_while_body_49115/StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Const_1:output:0"], "attr": {"Tidx": {"type": "DT_INT32"}, "keep_dims": {"b": false}, "T": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Prod", "op": "Prod", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Shape:output:0", "map_while_body_49115/StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Const:output:0"], "attr": {"T": {"type": "DT_INT32"}, "Tidx": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}, "keep_dims": {"b": false}}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/add", "op": "AddV2", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Max:output:0", "map_while_body_49115/StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/add/y:output:0"], "attr": {"T": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Greater", "op": "Greater", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Prod:output:0", "map_while_body_49115/StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Greater/y:output:0"], "attr": {"T": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Cast", "op": "Cast", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Greater:z:0"], "attr": {"SrcT": {"type": "DT_BOOL"}, "DstT": {"type": "DT_INT32"}, "Truncate": {"b": false}, "_output_shapes": {"list": {"shape": [{}]}}}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/mul", "op": "Mul", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Cast:y:0", "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/add:z:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "T": {"type": "DT_INT32"}}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Maximum", "op": "Maximum", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cast_1:y:0", "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/mul:z:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "T": {"type": "DT_INT32"}}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Minimum", "op": "Minimum", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cast_1:y:0", "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Maximum:z:0"], "attr": {"T": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Bincount", "op": "Bincount", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cast:y:0", "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Minimum:z:0", "map_while_body_49115/StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Const_2:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}, "T": {"type": "DT_INT64"}}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cumsum", "op": "Cumsum", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Bincount:bins:0", "map_while_body_49115/StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cumsum/axis:output:0"], "attr": {"reverse": {"b": false}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}, "exclusive": {"b": false}, "Tidx": {"type": "DT_INT32"}, "T": {"type": "DT_INT64"}}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/concat", "op": "ConcatV2", "input": ["map_while_body_49115/StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/concat/values_0:output:0", "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cumsum:out:0", "map_while_body_49115/StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/concat/axis:output:0"], "attr": {"N": {"i": "2"}, "Tidx": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}, "T": {"type": "DT_INT64"}}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice", "op": "StridedSlice", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/concat:output:0", "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice/stack:output:0", "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice/stack_1:output:0", "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice/stack_2:output:0"], "attr": {"shrink_axis_mask": {"i": "0"}, "new_axis_mask": {"i": "0"}, "begin_mask": {"i": "1"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}, "ellipsis_mask": {"i": "0"}, "end_mask": {"i": "0"}, "Index": {"type": "DT_INT32"}, "T": {"type": "DT_INT64"}}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_1", "op": "StridedSlice", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/concat:output:0", "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_1/stack:output:0", "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_1/stack_1:output:0", "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_1/stack_2:output:0"], "attr": {"new_axis_mask": {"i": "0"}, "Index": {"type": "DT_INT32"}, "end_mask": {"i": "1"}, "shrink_axis_mask": {"i": "0"}, "ellipsis_mask": {"i": "0"}, "begin_mask": {"i": "0"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}, "T": {"type": "DT_INT64"}}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_2", "op": "StridedSlice", "input": ["StringsByteSplit/RaggedGetItem/strided_slice:output:0", "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_2/stack:output:0", "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_2/stack_1:output:0", "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_2/stack_2:output:0"], "attr": {"shrink_axis_mask": {"i": "1"}, "T": {"type": "DT_INT64"}, "new_axis_mask": {"i": "0"}, "begin_mask": {"i": "0"}, "_output_shapes": {"list": {"shape": [{}]}}, "end_mask": {"i": "0"}, "ellipsis_mask": {"i": "0"}, "Index": {"type": "DT_INT32"}}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_3", "op": "StridedSlice", "input": ["StringsByteSplit/RaggedGetItem/strided_slice_1:output:0", "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_3/stack:output:0", "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_3/stack_1:output:0", "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_3/stack_2:output:0"], "attr": {"new_axis_mask": {"i": "0"}, "end_mask": {"i": "0"}, "begin_mask": {"i": "0"}, "shrink_axis_mask": {"i": "1"}, "Index": {"type": "DT_INT32"}, "T": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{}]}}, "ellipsis_mask": {"i": "0"}}}, {"name": "map_while_body_49115/ConstantFolding/StringsByteSplit/RaggedGetItem/strided_slice_4/stack_const_axis", "op": "Const", "input": ["^StringsByteSplit/RaggedGetItem/strided_slice_2"], "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "map_while_body_49115/ConstantFolding/StringsByteSplit/RaggedGetItem/strided_slice_4/stack_1_const_axis", "op": "Const", "input": ["^StringsByteSplit/RaggedGetItem/strided_slice_3"], "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_4/stack", "op": "ExpandDims", "input": ["StringsByteSplit/RaggedGetItem/strided_slice_2:output:0", "map_while_body_49115/ConstantFolding/StringsByteSplit/RaggedGetItem/strided_slice_4/stack_const_axis:output:0"], "attr": {"T": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "Tdim": {"type": "DT_INT32"}}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_4/stack_1", "op": "ExpandDims", "input": ["StringsByteSplit/RaggedGetItem/strided_slice_3:output:0", "map_while_body_49115/ConstantFolding/StringsByteSplit/RaggedGetItem/strided_slice_4/stack_1_const_axis:output:0"], "attr": {"Tdim": {"type": "DT_INT32"}, "T": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_4", "op": "StridedSlice", "input": ["StringsByteSplit/StringsByteSplit/StringSplit:values:0", "StringsByteSplit/RaggedGetItem/strided_slice_4/stack:output:0", "StringsByteSplit/RaggedGetItem/strided_slice_4/stack_1:output:0", "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_4/Cast:output:0"], "attr": {"begin_mask": {"i": "0"}, "shrink_axis_mask": {"i": "0"}, "ellipsis_mask": {"i": "0"}, "new_axis_mask": {"i": "0"}, "Index": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}, "T": {"type": "DT_STRING"}, "end_mask": {"i": "0"}}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_5", "op": "StridedSlice", "input": ["StringsByteSplit/RaggedGetItem/strided_slice_4:output:0", "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_5/Const:output:0", "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_5/Const:output:0", "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_5/Const:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}, "end_mask": {"i": "0"}, "T": {"type": "DT_STRING"}, "shrink_axis_mask": {"i": "0"}, "ellipsis_mask": {"i": "0"}, "Index": {"type": "DT_INT32"}, "new_axis_mask": {"i": "0"}, "begin_mask": {"i": "0"}}}, {"name": "StringNGrams/RaggedFromRowStarts/Shape", "op": "Shape", "input": ["StringsByteSplit/RaggedGetItem/strided_slice_5:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "T": {"type": "DT_STRING"}, "out_type": {"type": "DT_INT32"}}}, {"name": "StringNGrams/RaggedFromRowStarts/strided_slice", "op": "StridedSlice", "input": ["StringNGrams/RaggedFromRowStarts/Shape:output:0", "map_while_body_49115/StringNGrams/RaggedFromRowStarts/strided_slice/stack:output:0", "map_while_body_49115/StringNGrams/RaggedFromRowStarts/strided_slice/stack_1:output:0", "map_while_body_49115/StringNGrams/RaggedFromRowStarts/strided_slice/stack_2:output:0"], "attr": {"shrink_axis_mask": {"i": "1"}, "T": {"type": "DT_INT32"}, "end_mask": {"i": "0"}, "_output_shapes": {"list": {"shape": [{}]}}, "begin_mask": {"i": "0"}, "Index": {"type": "DT_INT32"}, "new_axis_mask": {"i": "0"}, "ellipsis_mask": {"i": "0"}}}, {"name": "StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/Cast", "op": "Cast", "input": ["StringNGrams/RaggedFromRowStarts/strided_slice:output:0"], "attr": {"DstT": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{}]}}, "SrcT": {"type": "DT_INT32"}, "Truncate": {"b": false}}}, {"name": "map_while_body_49115/ConstantFolding/StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/concat/values_1_const_axis", "op": "Const", "input": ["^StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/Cast"], "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/concat/values_1", "op": "ExpandDims", "input": ["StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/Cast:y:0", "map_while_body_49115/ConstantFolding/StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/concat/values_1_const_axis:output:0"], "attr": {"T": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "Tdim": {"type": "DT_INT32"}}}, {"name": "StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/concat", "op": "ConcatV2", "input": ["map_while_body_49115/StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/row_starts:output:0", "StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/concat/values_1:output:0", "map_while_body_49115/StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/concat/axis:output:0"], "attr": {"T": {"type": "DT_INT64"}, "N": {"i": "2"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "2"}]}]}}, "Tidx": {"type": "DT_INT32"}}}, {"name": "StringNGrams/StringNGrams/StringNGrams", "op": "StringNGrams", "input": ["StringsByteSplit/RaggedGetItem/strided_slice_5:output:0", "StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/concat:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}, {"dim": [{"size": "2"}]}]}}, "right_pad": {"s": ""}, "ngram_widths": {"list": {"i": ["2"]}}, "left_pad": {"s": ""}, "separator": {"s": "IA=="}, "preserve_short_sequences": {"b": false}, "Tsplits": {"type": "DT_INT64"}, "pad_width": {"i": "0"}}}, {"name": "StringNGrams/RaggedGetItem/strided_slice", "op": "StridedSlice", "input": ["StringNGrams/StringNGrams/StringNGrams:ngrams_splits:0", "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice/stack:output:0", "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice/stack_1:output:0", "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice/stack_2:output:0"], "attr": {"begin_mask": {"i": "1"}, "ellipsis_mask": {"i": "0"}, "end_mask": {"i": "0"}, "shrink_axis_mask": {"i": "0"}, "Index": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "new_axis_mask": {"i": "0"}, "T": {"type": "DT_INT64"}}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_1", "op": "StridedSlice", "input": ["StringNGrams/StringNGrams/StringNGrams:ngrams_splits:0", "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_1/stack:output:0", "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_1/stack_1:output:0", "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_1/stack_2:output:0"], "attr": {"ellipsis_mask": {"i": "0"}, "end_mask": {"i": "1"}, "begin_mask": {"i": "0"}, "shrink_axis_mask": {"i": "0"}, "new_axis_mask": {"i": "0"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "T": {"type": "DT_INT64"}, "Index": {"type": "DT_INT32"}}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_2", "op": "StridedSlice", "input": ["StringNGrams/RaggedGetItem/strided_slice:output:0", "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_2/stack:output:0", "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_2/stack_1:output:0", "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_2/stack_2:output:0"], "attr": {"T": {"type": "DT_INT64"}, "end_mask": {"i": "0"}, "begin_mask": {"i": "0"}, "Index": {"type": "DT_INT32"}, "new_axis_mask": {"i": "0"}, "_output_shapes": {"list": {"shape": [{}]}}, "shrink_axis_mask": {"i": "1"}, "ellipsis_mask": {"i": "0"}}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_3", "op": "StridedSlice", "input": ["StringNGrams/RaggedGetItem/strided_slice_1:output:0", "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_3/stack:output:0", "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_3/stack_1:output:0", "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_3/stack_2:output:0"], "attr": {"end_mask": {"i": "0"}, "shrink_axis_mask": {"i": "1"}, "begin_mask": {"i": "0"}, "new_axis_mask": {"i": "0"}, "T": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{}]}}, "ellipsis_mask": {"i": "0"}, "Index": {"type": "DT_INT32"}}}, {"name": "map_while_body_49115/ConstantFolding/StringNGrams/RaggedGetItem/strided_slice_4/stack_const_axis", "op": "Const", "input": ["^StringNGrams/RaggedGetItem/strided_slice_2"], "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "map_while_body_49115/ConstantFolding/StringNGrams/RaggedGetItem/strided_slice_4/stack_1_const_axis", "op": "Const", "input": ["^StringNGrams/RaggedGetItem/strided_slice_3"], "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_4/stack", "op": "ExpandDims", "input": ["StringNGrams/RaggedGetItem/strided_slice_2:output:0", "map_while_body_49115/ConstantFolding/StringNGrams/RaggedGetItem/strided_slice_4/stack_const_axis:output:0"], "attr": {"Tdim": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "T": {"type": "DT_INT64"}}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_4/stack_1", "op": "ExpandDims", "input": ["StringNGrams/RaggedGetItem/strided_slice_3:output:0", "map_while_body_49115/ConstantFolding/StringNGrams/RaggedGetItem/strided_slice_4/stack_1_const_axis:output:0"], "attr": {"Tdim": {"type": "DT_INT32"}, "T": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_4", "op": "StridedSlice", "input": ["StringNGrams/StringNGrams/StringNGrams:ngrams:0", "StringNGrams/RaggedGetItem/strided_slice_4/stack:output:0", "StringNGrams/RaggedGetItem/strided_slice_4/stack_1:output:0", "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_4/Cast:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}, "Index": {"type": "DT_INT64"}, "begin_mask": {"i": "0"}, "T": {"type": "DT_STRING"}, "shrink_axis_mask": {"i": "0"}, "end_mask": {"i": "0"}, "ellipsis_mask": {"i": "0"}, "new_axis_mask": {"i": "0"}}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_5", "op": "StridedSlice", "input": ["StringNGrams/RaggedGetItem/strided_slice_4:output:0", "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_5/Const:output:0", "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_5/Const:output:0", "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_5/Const:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}, "Index": {"type": "DT_INT32"}, "shrink_axis_mask": {"i": "0"}, "end_mask": {"i": "0"}, "new_axis_mask": {"i": "0"}, "begin_mask": {"i": "0"}, "T": {"type": "DT_STRING"}, "ellipsis_mask": {"i": "0"}}}, {"name": "concat", "op": "ConcatV2", "input": ["StringNGrams/RaggedGetItem/strided_slice_5:output:0", "map_while_body_49115/Const:output:0", "map_while_body_49115/concat/axis:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}, "N": {"i": "2"}, "T": {"type": "DT_STRING"}, "Tidx": {"type": "DT_INT32"}}}, {"name": "strided_slice", "op": "StridedSlice", "input": ["concat:output:0", "map_while_body_49115/strided_slice/stack:output:0", "map_while_body_49115/strided_slice/stack_1:output:0", "map_while_body_49115/strided_slice/stack_2:output:0"], "attr": {"Index": {"type": "DT_INT32"}, "shrink_axis_mask": {"i": "0"}, "begin_mask": {"i": "1"}, "end_mask": {"i": "0"}, "T": {"type": "DT_STRING"}, "new_axis_mask": {"i": "0"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}, "ellipsis_mask": {"i": "0"}}}, {"name": "TensorArrayV2Write/TensorListSetItem", "op": "TensorListSetItem", "input": ["placeholder_1", "placeholder", "strided_slice:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "element_dtype": {"type": "DT_STRING"}}}], "ret": {"add": "add_0:z:0", "tensorarrayv2read_tensorlistgetitem_map_tensorarrayunstack_tensorlistfromtensor": "tensorarrayv2read_tensorlistgetitem_map_tensorarrayunstack_tensorlistfromtensor_0", "map_strided_slice": "map_strided_slice_0", "map_strided_slice_1": "map_strided_slice_1_0", "tensorarrayv2write_tensorlistsetitem": "TensorArrayV2Write/TensorListSetItem:output_handle:0", "add_1": "add_1_0:z:0"}, "attr": {"_input_shapes": {"list": {"shape": [{}, {}, {}, {}, {}, {}]}}}, "argAttr": {"0": {"attr": {"_output_shapes": {"list": {"shape": [{}]}}}}, "5": {"attr": {"_output_shapes": {"list": {"shape": [{}]}}}}, "3": {"attr": {"_output_shapes": {"list": {"shape": [{}]}}}}, "1": {"attr": {"_output_shapes": {"list": {"shape": [{}]}}}}, "4": {"attr": {"_output_shapes": {"list": {"shape": [{}]}}}}, "2": {"attr": {"_output_shapes": {"list": {"shape": [{}]}}}}}}, {"signature": {"name": "map_while_cond_49114", "inputArg": [{"name": "map_while_loop_counter", "type": "DT_INT32"}, {"name": "map_strided_slice", "type": "DT_INT32"}, {"name": "placeholder", "type": "DT_INT32"}, {"name": "placeholder_1", "type": "DT_VARIANT"}, {"name": "less_map_strided_slice", "type": "DT_INT32"}, {"name": "map_while_cond_49114___redundant_placeholder0", "type": "DT_VARIANT"}], "outputArg": [{"name": "logicaland", "type": "DT_BOOL"}]}, "nodeDef": [{"name": "Less_1", "op": "Less", "input": ["map_while_loop_counter", "map_strided_slice"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "T": {"type": "DT_INT32"}}}, {"name": "Less", "op": "Less", "input": ["placeholder", "less_map_strided_slice"], "attr": {"T": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}}}, {"name": "LogicalAnd", "op": "LogicalAnd", "input": ["Less_1:z:0", "Less:z:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}}}], "ret": {"logicaland": "LogicalAnd:z:0"}, "attr": {"_input_shapes": {"list": {"shape": [{}, {}, {}, {}, {}, {"unknownRank": true}]}}}, "argAttr": {"4": {"attr": {"_output_shapes": {"list": {"shape": [{}]}}}}, "2": {"attr": {"_output_shapes": {"list": {"shape": [{}]}}}}, "5": {"attr": {"_output_shapes": {"list": {"shape": [{"unknownRank": true}]}}}}, "0": {"attr": {"_output_shapes": {"list": {"shape": [{}]}}}}, "3": {"attr": {"_output_shapes": {"list": {"shape": [{}]}}}}, "1": {"attr": {"_output_shapes": {"list": {"shape": [{}]}}}}}}]}, "versions": {"minConsumer": 12}}, "modelInitializer": {"node": [{"name": "head/predictions/class_string_lookup/Const", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_STRING", "tensorShape": {"dim": [{"size": "54"}]}}}, "dtype": {"type": "DT_STRING"}}}, {"name": "head/predictions/class_string_lookup/Size", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "head/predictions/class_string_lookup/range/start", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}, "dtype": {"type": "DT_INT32"}}}, {"name": "head/predictions/class_string_lookup/range/delta", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}}}}}, {"name": "head/predictions/class_string_lookup/range", "op": "Range", "input": ["head/predictions/class_string_lookup/range/start", "head/predictions/class_string_lookup/Size", "head/predictions/class_string_lookup/range/delta"], "attr": {"Tidx": {"type": "DT_INT32"}}}, {"name": "head/predictions/class_string_lookup/Cast", "op": "Cast", "input": ["head/predictions/class_string_lookup/range"], "attr": {"Truncate": {"b": false}, "SrcT": {"type": "DT_INT32"}, "DstT": {"type": "DT_INT64"}}}, {"name": "head/predictions/class_string_lookup/hash_table", "op": "HashTableV2", "attr": {"value_dtype": {"type": "DT_STRING"}, "container": {"s": ""}, "shared_name": {"s": "aGFzaF90YWJsZV80MTQ1NGNlMC0xMmMwLTRiMmEtOTI0My1hZjUxZjE4YWJmOTQ="}, "key_dtype": {"type": "DT_INT64"}, "use_node_name_sharing": {"b": false}}}, {"name": "head/predictions/class_string_lookup/table_init/LookupTableImportV2", "op": "LookupTableImportV2", "input": ["head/predictions/class_string_lookup/hash_table", "head/predictions/class_string_lookup/Cast", "head/predictions/class_string_lookup/Const"], "attr": {"Tout": {"type": "DT_STRING"}, "Tin": {"type": "DT_INT64"}}}], "library": {"function": [{"signature": {"name": "dnn_zero_fraction_1_cond_false_49441", "inputArg": [{"name": "count_nonzero_notequal_dnn_hiddenlayer_1_relu", "type": "DT_FLOAT"}], "outputArg": [{"name": "count_nonzero_nonzero_count", "type": "DT_INT64"}, {"name": "optionalfromvalue", "type": "DT_VARIANT"}, {"name": "optionalfromvalue_1", "type": "DT_VARIANT"}, {"name": "optionalfromvalue_2", "type": "DT_VARIANT"}, {"name": "optionalfromvalue_3", "type": "DT_VARIANT"}, {"name": "optionalnone", "type": "DT_VARIANT"}]}, "nodeDef": [{"name": "count_nonzero/zeros", "op": "Const", "attr": {"dtype": {"type": "DT_FLOAT"}, "_output_shapes": {"list": {"shape": [{}]}}, "value": {"tensor": {"dtype": "DT_FLOAT", "tensorShape": {}, "floatVal": [0.0]}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/zeros"]}}, {"name": "count_nonzero/NotEqual", "op": "NotEqual", "input": ["count_nonzero_notequal_dnn_hiddenlayer_1_relu", "count_nonzero/zeros:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "32"}]}]}}, "T": {"type": "DT_FLOAT"}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/NotEqual"]}}, {"name": "count_nonzero/Cast", "op": "Cast", "input": ["count_nonzero/NotEqual:z:0"], "attr": {"SrcT": {"type": "DT_BOOL"}, "DstT": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "32"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/Cast"]}}, {"name": "count_nonzero/Const", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "2"}]}, "tensorContent": "AAAAAAEAAAA="}}, "dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "2"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/Const"]}}, {"name": "count_nonzero/nonzero_count", "op": "Sum", "input": ["count_nonzero/Cast:y:0", "count_nonzero/Const:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "T": {"type": "DT_INT64"}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/nonzero_count"]}}, {"name": "OptionalFromValue", "op": "OptionalFromValue", "input": ["count_nonzero/zeros:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "Toutput_types": {"list": {"type": ["DT_FLOAT"]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue"]}}, {"name": "OptionalFromValue_1", "op": "OptionalFromValue", "input": ["count_nonzero/NotEqual:z:0"], "attr": {"Toutput_types": {"list": {"type": ["DT_BOOL"]}}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue_1"]}}, {"name": "OptionalFromValue_2", "op": "OptionalFromValue", "input": ["count_nonzero/Cast:y:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "Toutput_types": {"list": {"type": ["DT_INT64"]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue_2"]}}, {"name": "OptionalFromValue_3", "op": "OptionalFromValue", "input": ["count_nonzero/Const:output:0"], "attr": {"Toutput_types": {"list": {"type": ["DT_INT32"]}}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue_3"]}}, {"name": "OptionalNone", "op": "OptionalNone", "attr": {"_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalNone"]}}], "ret": {"count_nonzero_nonzero_count": "count_nonzero/nonzero_count:output:0", "optionalfromvalue": "OptionalFromValue:optional:0", "optionalfromvalue_3": "OptionalFromValue_3:optional:0", "optionalfromvalue_2": "OptionalFromValue_2:optional:0", "optionalfromvalue_1": "OptionalFromValue_1:optional:0", "optionalnone": "OptionalNone:optional:0"}, "attr": {"_input_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "32"}]}]}}}, "argAttr": {"0": {"attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "32"}]}]}}}}}}, {"signature": {"name": "map_while_cond_49114", "inputArg": [{"name": "map_while_loop_counter", "type": "DT_INT32"}, {"name": "map_strided_slice", "type": "DT_INT32"}, {"name": "placeholder", "type": "DT_INT32"}, {"name": "placeholder_1", "type": "DT_VARIANT"}, {"name": "less_map_strided_slice", "type": "DT_INT32"}, {"name": "map_while_cond_49114___redundant_placeholder0", "type": "DT_VARIANT"}], "outputArg": [{"name": "logicaland", "type": "DT_BOOL"}]}, "nodeDef": [{"name": "Less", "op": "Less", "input": ["placeholder", "less_map_strided_slice"], "attr": {"T": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["Less"]}}, {"name": "Less_1", "op": "Less", "input": ["map_while_loop_counter", "map_strided_slice"], "attr": {"T": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["Less_1"]}}, {"name": "LogicalAnd", "op": "LogicalAnd", "input": ["Less_1:z:0", "Less:z:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["LogicalAnd"]}}], "ret": {"logicaland": "LogicalAnd:z:0"}, "attr": {"_input_shapes": {"list": {"shape": [{}, {}, {}, {}, {}, {"unknownRank": true}]}}}, "argAttr": {"1": {"attr": {"_output_shapes": {"list": {"shape": [{}]}}}}, "3": {"attr": {"_output_shapes": {"list": {"shape": [{}]}}}}, "0": {"attr": {"_output_shapes": {"list": {"shape": [{}]}}}}, "5": {"attr": {"_output_shapes": {"list": {"shape": [{"unknownRank": true}]}}}}, "2": {"attr": {"_output_shapes": {"list": {"shape": [{}]}}}}, "4": {"attr": {"_output_shapes": {"list": {"shape": [{}]}}}}}}, {"signature": {"name": "zero_fraction_total_zero_zero_count_false_49655", "inputArg": [{"name": "zero_fraction_readvariableop_linear_linear_model_content_weights", "type": "DT_RESOURCE", "handleData": [{"dtype": "DT_FLOAT", "shape": {"dim": [{"size": "5000"}, {"size": "54"}]}}]}, {"name": "cast_zero_fraction_total_size_size", "type": "DT_INT64"}], "outputArg": [{"name": "mul", "type": "DT_FLOAT"}], "isStateful": true}, "nodeDef": [{"name": "zero_fraction/ReadVariableOp", "op": "ReadVariableOp", "input": ["zero_fraction_readvariableop_linear_linear_model_content_weights"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "5000"}, {"size": "54"}]}]}}, "dtype": {"type": "DT_FLOAT"}}, "experimentalDebugInfo": {"originalNodeNames": ["zero_fraction/ReadVariableOp"]}}, {"name": "zero_fraction/Size", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "value": {"tensor": {"dtype": "DT_INT64", "tensorShape": {}, "int64Val": ["270000"]}}, "dtype": {"type": "DT_INT64"}}, "experimentalDebugInfo": {"originalNodeNames": ["zero_fraction/Size"]}}, {"name": "zero_fraction/LessEqual/y", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT64", "tensorShape": {}, "int64Val": ["2147483647"]}}, "_output_shapes": {"list": {"shape": [{}]}}, "dtype": {"type": "DT_INT64"}}, "experimentalDebugInfo": {"originalNodeNames": ["zero_fraction/LessEqual/y"]}}, {"name": "zero_fraction/LessEqual", "op": "LessEqual", "input": ["zero_fraction/Size:output:0", "zero_fraction/LessEqual/y:output:0"], "attr": {"T": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["zero_fraction/LessEqual"]}}, {"name": "zero_fraction/cond", "op": "StatelessIf", "input": ["zero_fraction/LessEqual:z:0", "zero_fraction/ReadVariableOp:value:0"], "attr": {"else_branch": {"func": {"name": "zero_fraction_cond_false_49665"}}, "then_branch": {"func": {"name": "zero_fraction_cond_true_49664"}}, "Tin": {"list": {"type": ["DT_FLOAT"]}}, "_read_only_resource_inputs": {"list": {}}, "Tcond": {"type": "DT_BOOL"}, "_lower_using_switch_merge": {"b": true}, "output_shapes": {"list": {"shape": [{}]}}, "Tout": {"list": {"type": ["DT_INT64"]}}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["zero_fraction/cond"]}}, {"name": "zero_fraction/cond/Identity", "op": "Identity", "input": ["zero_fraction/cond:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "T": {"type": "DT_INT64"}}, "experimentalDebugInfo": {"originalNodeNames": ["zero_fraction/cond/Identity"]}}, {"name": "zero_fraction/counts_to_fraction/sub", "op": "Sub", "input": ["zero_fraction/Size:output:0", "zero_fraction/cond/Identity:output:0"], "attr": {"T": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["zero_fraction/counts_to_fraction/sub"]}}, {"name": "zero_fraction/counts_to_fraction/Cast", "op": "Cast", "input": ["zero_fraction/counts_to_fraction/sub:z:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "DstT": {"type": "DT_FLOAT"}, "SrcT": {"type": "DT_INT64"}}, "experimentalDebugInfo": {"originalNodeNames": ["zero_fraction/counts_to_fraction/Cast"]}}, {"name": "zero_fraction/counts_to_fraction/Cast_1", "op": "Cast", "input": ["zero_fraction/Size:output:0"], "attr": {"DstT": {"type": "DT_FLOAT"}, "_output_shapes": {"list": {"shape": [{}]}}, "SrcT": {"type": "DT_INT64"}}, "experimentalDebugInfo": {"originalNodeNames": ["zero_fraction/counts_to_fraction/Cast_1"]}}, {"name": "zero_fraction/counts_to_fraction/truediv", "op": "RealDiv", "input": ["zero_fraction/counts_to_fraction/Cast:y:0", "zero_fraction/counts_to_fraction/Cast_1:y:0"], "attr": {"T": {"type": "DT_FLOAT"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["zero_fraction/counts_to_fraction/truediv"]}}, {"name": "zero_fraction/fraction", "op": "Identity", "input": ["zero_fraction/counts_to_fraction/truediv:z:0"], "attr": {"T": {"type": "DT_FLOAT"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["zero_fraction/fraction"]}}, {"name": "Cast", "op": "Cast", "input": ["cast_zero_fraction_total_size_size"], "attr": {"DstT": {"type": "DT_FLOAT"}, "SrcT": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["Cast"]}}, {"name": "mul_0", "op": "Mul", "input": ["zero_fraction/fraction:output:0", "Cast:y:0"], "attr": {"T": {"type": "DT_FLOAT"}}, "experimentalDebugInfo": {"originalNodeNames": ["mul"]}}], "ret": {"mul": "mul_0:z:0"}, "attr": {"_input_shapes": {"list": {"shape": [{"unknownRank": true}, {}]}}}, "argAttr": {"1": {"attr": {"_output_shapes": {"list": {"shape": [{}]}}}}}}, {"signature": {"name": "dnn_zero_fraction_2_cond_false_49510", "inputArg": [{"name": "count_nonzero_notequal_dnn_logits_biasadd", "type": "DT_FLOAT"}], "outputArg": [{"name": "count_nonzero_nonzero_count", "type": "DT_INT64"}, {"name": "optionalfromvalue", "type": "DT_VARIANT"}, {"name": "optionalfromvalue_1", "type": "DT_VARIANT"}, {"name": "optionalfromvalue_2", "type": "DT_VARIANT"}, {"name": "optionalfromvalue_3", "type": "DT_VARIANT"}, {"name": "optionalnone", "type": "DT_VARIANT"}]}, "nodeDef": [{"name": "count_nonzero/zeros", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "value": {"tensor": {"dtype": "DT_FLOAT", "tensorShape": {}, "floatVal": [0.0]}}, "dtype": {"type": "DT_FLOAT"}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/zeros"]}}, {"name": "count_nonzero/NotEqual", "op": "NotEqual", "input": ["count_nonzero_notequal_dnn_logits_biasadd", "count_nonzero/zeros:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "54"}]}]}}, "T": {"type": "DT_FLOAT"}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/NotEqual"]}}, {"name": "count_nonzero/Cast", "op": "Cast", "input": ["count_nonzero/NotEqual:z:0"], "attr": {"SrcT": {"type": "DT_BOOL"}, "DstT": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "54"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/Cast"]}}, {"name": "count_nonzero/Const", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "2"}]}, "tensorContent": "AAAAAAEAAAA="}}, "dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "2"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/Const"]}}, {"name": "count_nonzero/nonzero_count", "op": "Sum", "input": ["count_nonzero/Cast:y:0", "count_nonzero/Const:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "T": {"type": "DT_INT64"}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/nonzero_count"]}}, {"name": "OptionalFromValue", "op": "OptionalFromValue", "input": ["count_nonzero/zeros:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "Toutput_types": {"list": {"type": ["DT_FLOAT"]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue"]}}, {"name": "OptionalFromValue_1", "op": "OptionalFromValue", "input": ["count_nonzero/NotEqual:z:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "Toutput_types": {"list": {"type": ["DT_BOOL"]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue_1"]}}, {"name": "OptionalFromValue_2", "op": "OptionalFromValue", "input": ["count_nonzero/Cast:y:0"], "attr": {"Toutput_types": {"list": {"type": ["DT_INT64"]}}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue_2"]}}, {"name": "OptionalFromValue_3", "op": "OptionalFromValue", "input": ["count_nonzero/Const:output:0"], "attr": {"Toutput_types": {"list": {"type": ["DT_INT32"]}}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue_3"]}}, {"name": "OptionalNone", "op": "OptionalNone", "attr": {"_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalNone"]}}], "ret": {"optionalfromvalue_1": "OptionalFromValue_1:optional:0", "optionalfromvalue_3": "OptionalFromValue_3:optional:0", "count_nonzero_nonzero_count": "count_nonzero/nonzero_count:output:0", "optionalfromvalue_2": "OptionalFromValue_2:optional:0", "optionalnone": "OptionalNone:optional:0", "optionalfromvalue": "OptionalFromValue:optional:0"}, "attr": {"_input_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "54"}]}]}}}, "argAttr": {"0": {"attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "54"}]}]}}}}}}, {"signature": {"name": "dnn_zero_fraction_2_cond_true_49509", "inputArg": [{"name": "count_nonzero_notequal_dnn_logits_biasadd", "type": "DT_FLOAT"}], "outputArg": [{"name": "cast", "type": "DT_INT64"}, {"name": "optionalfromvalue", "type": "DT_VARIANT"}, {"name": "optionalfromvalue_1", "type": "DT_VARIANT"}, {"name": "optionalfromvalue_2", "type": "DT_VARIANT"}, {"name": "optionalfromvalue_3", "type": "DT_VARIANT"}, {"name": "optionalfromvalue_4", "type": "DT_VARIANT"}]}, "nodeDef": [{"name": "count_nonzero/zeros", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_FLOAT", "tensorShape": {}, "floatVal": [0.0]}}, "dtype": {"type": "DT_FLOAT"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/zeros"]}}, {"name": "count_nonzero/NotEqual", "op": "NotEqual", "input": ["count_nonzero_notequal_dnn_logits_biasadd", "count_nonzero/zeros:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "54"}]}]}}, "T": {"type": "DT_FLOAT"}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/NotEqual"]}}, {"name": "count_nonzero/Cast", "op": "Cast", "input": ["count_nonzero/NotEqual:z:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "54"}]}]}}, "SrcT": {"type": "DT_BOOL"}, "DstT": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/Cast"]}}, {"name": "count_nonzero/Const", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "2"}]}, "tensorContent": "AAAAAAEAAAA="}}, "dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "2"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/Const"]}}, {"name": "count_nonzero/nonzero_count", "op": "Sum", "input": ["count_nonzero/Cast:y:0", "count_nonzero/Const:output:0"], "attr": {"T": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/nonzero_count"]}}, {"name": "Cast", "op": "Cast", "input": ["count_nonzero/nonzero_count:output:0"], "attr": {"DstT": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{}]}}, "SrcT": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["Cast"]}}, {"name": "OptionalFromValue", "op": "OptionalFromValue", "input": ["count_nonzero/zeros:output:0"], "attr": {"Toutput_types": {"list": {"type": ["DT_FLOAT"]}}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue"]}}, {"name": "OptionalFromValue_1", "op": "OptionalFromValue", "input": ["count_nonzero/NotEqual:z:0"], "attr": {"Toutput_types": {"list": {"type": ["DT_BOOL"]}}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue_1"]}}, {"name": "OptionalFromValue_2", "op": "OptionalFromValue", "input": ["count_nonzero/Cast:y:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "Toutput_types": {"list": {"type": ["DT_INT32"]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue_2"]}}, {"name": "OptionalFromValue_3", "op": "OptionalFromValue", "input": ["count_nonzero/Const:output:0"], "attr": {"Toutput_types": {"list": {"type": ["DT_INT32"]}}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue_3"]}}, {"name": "OptionalFromValue_4", "op": "OptionalFromValue", "input": ["count_nonzero/nonzero_count:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "Toutput_types": {"list": {"type": ["DT_INT32"]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue_4"]}}], "ret": {"cast": "Cast:y:0", "optionalfromvalue_2": "OptionalFromValue_2:optional:0", "optionalfromvalue": "OptionalFromValue:optional:0", "optionalfromvalue_3": "OptionalFromValue_3:optional:0", "optionalfromvalue_4": "OptionalFromValue_4:optional:0", "optionalfromvalue_1": "OptionalFromValue_1:optional:0"}, "attr": {"_input_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "54"}]}]}}}, "argAttr": {"0": {"attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "54"}]}]}}}}}}, {"signature": {"name": "dnn_zero_fraction_cond_false_49371", "inputArg": [{"name": "count_nonzero_notequal_dnn_hiddenlayer_0_relu", "type": "DT_FLOAT"}], "outputArg": [{"name": "count_nonzero_nonzero_count", "type": "DT_INT64"}, {"name": "optionalfromvalue", "type": "DT_VARIANT"}, {"name": "optionalfromvalue_1", "type": "DT_VARIANT"}, {"name": "optionalfromvalue_2", "type": "DT_VARIANT"}, {"name": "optionalfromvalue_3", "type": "DT_VARIANT"}, {"name": "optionalnone", "type": "DT_VARIANT"}]}, "nodeDef": [{"name": "count_nonzero/zeros", "op": "Const", "attr": {"dtype": {"type": "DT_FLOAT"}, "value": {"tensor": {"dtype": "DT_FLOAT", "tensorShape": {}, "floatVal": [0.0]}}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/zeros"]}}, {"name": "count_nonzero/NotEqual", "op": "NotEqual", "input": ["count_nonzero_notequal_dnn_hiddenlayer_0_relu", "count_nonzero/zeros:output:0"], "attr": {"T": {"type": "DT_FLOAT"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "512"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/NotEqual"]}}, {"name": "count_nonzero/Cast", "op": "Cast", "input": ["count_nonzero/NotEqual:z:0"], "attr": {"SrcT": {"type": "DT_BOOL"}, "DstT": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "512"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/Cast"]}}, {"name": "count_nonzero/Const", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "2"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "2"}]}, "tensorContent": "AAAAAAEAAAA="}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/Const"]}}, {"name": "count_nonzero/nonzero_count", "op": "Sum", "input": ["count_nonzero/Cast:y:0", "count_nonzero/Const:output:0"], "attr": {"T": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/nonzero_count"]}}, {"name": "OptionalFromValue", "op": "OptionalFromValue", "input": ["count_nonzero/zeros:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "Toutput_types": {"list": {"type": ["DT_FLOAT"]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue"]}}, {"name": "OptionalFromValue_1", "op": "OptionalFromValue", "input": ["count_nonzero/NotEqual:z:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "Toutput_types": {"list": {"type": ["DT_BOOL"]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue_1"]}}, {"name": "OptionalFromValue_2", "op": "OptionalFromValue", "input": ["count_nonzero/Cast:y:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "Toutput_types": {"list": {"type": ["DT_INT64"]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue_2"]}}, {"name": "OptionalFromValue_3", "op": "OptionalFromValue", "input": ["count_nonzero/Const:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "Toutput_types": {"list": {"type": ["DT_INT32"]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue_3"]}}, {"name": "OptionalNone", "op": "OptionalNone", "attr": {"_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalNone"]}}], "ret": {"optionalfromvalue_2": "OptionalFromValue_2:optional:0", "count_nonzero_nonzero_count": "count_nonzero/nonzero_count:output:0", "optionalfromvalue_1": "OptionalFromValue_1:optional:0", "optionalnone": "OptionalNone:optional:0", "optionalfromvalue": "OptionalFromValue:optional:0", "optionalfromvalue_3": "OptionalFromValue_3:optional:0"}, "attr": {"_input_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "512"}]}]}}}, "argAttr": {"0": {"attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "512"}]}]}}}}}}, {"signature": {"name": "map_while_body_49115", "inputArg": [{"name": "map_while_loop_counter", "type": "DT_INT32"}, {"name": "map_strided_slice_0", "type": "DT_INT32"}, {"name": "placeholder", "type": "DT_INT32"}, {"name": "placeholder_1", "type": "DT_VARIANT"}, {"name": "map_strided_slice_1_0", "type": "DT_INT32"}, {"name": "tensorarrayv2read_tensorlistgetitem_map_tensorarrayunstack_tensorlistfromtensor_0", "type": "DT_VARIANT"}], "outputArg": [{"name": "add_1", "type": "DT_INT32"}, {"name": "map_strided_slice", "type": "DT_INT32"}, {"name": "add", "type": "DT_INT32"}, {"name": "tensorarrayv2write_tensorlistsetitem", "type": "DT_VARIANT"}, {"name": "map_strided_slice_1", "type": "DT_INT32"}, {"name": "tensorarrayv2read_tensorlistgetitem_map_tensorarrayunstack_tensorlistfromtensor", "type": "DT_VARIANT"}]}, "nodeDef": [{"name": "TensorArrayV2Read/Const", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{}]}}}, "dtype": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["TensorArrayV2Read/Const"]}}, {"name": "TensorArrayV2Read/TensorListGetItem", "op": "TensorListGetItem", "input": ["tensorarrayv2read_tensorlistgetitem_map_tensorarrayunstack_tensorlistfromtensor_0", "placeholder", "TensorArrayV2Read/Const:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "element_dtype": {"type": "DT_STRING"}}, "experimentalDebugInfo": {"originalNodeNames": ["TensorArrayV2Read/TensorListGetItem"]}}, {"name": "Const", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_STRING", "tensorShape": {"dim": [{"size": "10000"}]}, "stringVal}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "10000"}]}]}}, "dtype": {"type": "DT_STRING"}}, "experimentalDebugInfo": {"originalNodeNames": ["Const"]}}, {"name": "StringsByteSplit/stack", "op": "Pack", "input": ["TensorArrayV2Read/TensorListGetItem:item:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "N": {"i": "1"}, "T": {"type": "DT_STRING"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/stack"]}}, {"name": "StringsByteSplit/StringsByteSplit/StringSplit/delimiter", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_STRING", "tensorShape": {}, "stringVal": [""]}}, "dtype": {"type": "DT_STRING"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/StringSplit/delimiter"]}}, {"name": "StringsByteSplit/StringsByteSplit/StringSplit", "op": "StringSplit", "input": ["StringsByteSplit/stack:output:0", "StringsByteSplit/StringsByteSplit/StringSplit/delimiter:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "2"}]}, {"dim": [{"size": "-1"}]}, {"dim": [{"size": "2"}]}]}}, "skip_empty": {"b": false}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/StringSplit"]}}, {"name": "StringsByteSplit/StringsByteSplit/strided_slice/stack", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "2"}]}, "tensorContent": "AAAAAAAAAAA="}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "2"}]}]}}, "dtype": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/strided_slice/stack"]}}, {"name": "StringsByteSplit/StringsByteSplit/strided_slice/stack_1", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "2"}]}, "tensorContent": "AAAAAAEAAAA="}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "2"}]}]}}, "dtype": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/strided_slice/stack_1"]}}, {"name": "StringsByteSplit/StringsByteSplit/strided_slice/stack_2", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "2"}]}, "tensorContent": "AQAAAAEAAAA="}}, "dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "2"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/strided_slice/stack_2"]}}, {"name": "StringsByteSplit/StringsByteSplit/strided_slice", "op": "StridedSlice", "input": ["StringsByteSplit/StringsByteSplit/StringSplit:indices:0", "StringsByteSplit/StringsByteSplit/strided_slice/stack:output:0", "StringsByteSplit/StringsByteSplit/strided_slice/stack_1:output:0", "StringsByteSplit/StringsByteSplit/strided_slice/stack_2:output:0"], "attr": {"Index": {"type": "DT_INT32"}, "shrink_axis_mask": {"i": "2"}, "begin_mask": {"i": "1"}, "T": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}, "end_mask": {"i": "1"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/strided_slice"]}}, {"name": "StringsByteSplit/StringsByteSplit/strided_slice_1/stack", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [0]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/strided_slice_1/stack"]}}, {"name": "StringsByteSplit/StringsByteSplit/strided_slice_1/stack_1", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [1]}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/strided_slice_1/stack_1"]}}, {"name": "StringsByteSplit/StringsByteSplit/strided_slice_1/stack_2", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [1]}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/strided_slice_1/stack_2"]}}, {"name": "StringsByteSplit/StringsByteSplit/strided_slice_1", "op": "StridedSlice", "input": ["StringsByteSplit/StringsByteSplit/StringSplit:shape:0", "StringsByteSplit/StringsByteSplit/strided_slice_1/stack:output:0", "StringsByteSplit/StringsByteSplit/strided_slice_1/stack_1:output:0", "StringsByteSplit/StringsByteSplit/strided_slice_1/stack_2:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "T": {"type": "DT_INT64"}, "shrink_axis_mask": {"i": "1"}, "Index": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/strided_slice_1"]}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cast", "op": "Cast", "input": ["StringsByteSplit/StringsByteSplit/strided_slice:output:0"], "attr": {"SrcT": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}, "DstT": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cast"]}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cast_1", "op": "Cast", "input": ["StringsByteSplit/StringsByteSplit/strided_slice_1:output:0"], "attr": {"DstT": {"type": "DT_INT32"}, "SrcT": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cast_1"]}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Shape", "op": "Shape", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cast:y:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "T": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Shape"]}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Const", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [0]}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Const"]}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Prod", "op": "Prod", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Shape:output:0", "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Const:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "T": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Prod"]}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Greater/y", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}, "intVal": [0]}}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Greater/y"]}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Greater", "op": "Greater", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Prod:output:0", "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Greater/y:output:0"], "attr": {"T": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Greater"]}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Cast", "op": "Cast", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Greater:z:0"], "attr": {"SrcT": {"type": "DT_BOOL"}, "DstT": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Cast"]}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Const_1", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [0]}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Const_1"]}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Max", "op": "Max", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cast:y:0", "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Const_1:output:0"], "attr": {"T": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Max"]}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/add/y", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}, "intVal": [1]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/add/y"]}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/add", "op": "AddV2", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Max:output:0", "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/add/y:output:0"], "attr": {"T": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/add"]}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/mul", "op": "Mul", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Cast:y:0", "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/add:z:0"], "attr": {"T": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/mul"]}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Maximum", "op": "Maximum", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cast_1:y:0", "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/mul:z:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "T": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Maximum"]}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Minimum", "op": "Minimum", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cast_1:y:0", "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Maximum:z:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "T": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Minimum"]}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Const_2", "op": "Const", "attr": {"dtype": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{"dim": [{}]}]}}, "value": {"tensor": {"dtype": "DT_INT64", "tensorShape": {"dim": [{}]}}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Const_2"]}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Bincount", "op": "Bincount", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cast:y:0", "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Minimum:z:0", "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Const_2:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}, "T": {"type": "DT_INT64"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Bincount"]}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cumsum/axis", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}, "intVal": [0]}}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cumsum/axis"]}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cumsum", "op": "Cumsum", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Bincount:bins:0", "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cumsum/axis:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}, "T": {"type": "DT_INT64"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cumsum"]}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/concat/values_0", "op": "Const", "attr": {"dtype": {"type": "DT_INT64"}, "value": {"tensor": {"dtype": "DT_INT64", "tensorShape": {"dim": [{"size": "1"}]}, "int64Val": ["0"]}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/concat/values_0"]}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/concat/axis", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}, "intVal": [0]}}, "dtype": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/concat/axis"]}}, {"name": "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/concat", "op": "ConcatV2", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/concat/values_0:output:0", "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cumsum:out:0", "StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/concat/axis:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}, "N": {"i": "2"}, "T": {"type": "DT_INT64"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/concat"]}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice/stack", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [0]}}, "dtype": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/RaggedGetItem/strided_slice/stack"]}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice/stack_1", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [-1]}}, "dtype": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/RaggedGetItem/strided_slice/stack_1"]}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice/stack_2", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [1]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/RaggedGetItem/strided_slice/stack_2"]}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice", "op": "StridedSlice", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/concat:output:0", "StringsByteSplit/RaggedGetItem/strided_slice/stack:output:0", "StringsByteSplit/RaggedGetItem/strided_slice/stack_1:output:0", "StringsByteSplit/RaggedGetItem/strided_slice/stack_2:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}, "begin_mask": {"i": "1"}, "Index": {"type": "DT_INT32"}, "T": {"type": "DT_INT64"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/RaggedGetItem/strided_slice"]}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_1/stack", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [1]}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/RaggedGetItem/strided_slice_1/stack"]}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_1/stack_1", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [0]}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/RaggedGetItem/strided_slice_1/stack_1"]}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_1/stack_2", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [1]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/RaggedGetItem/strided_slice_1/stack_2"]}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_1", "op": "StridedSlice", "input": ["StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/concat:output:0", "StringsByteSplit/RaggedGetItem/strided_slice_1/stack:output:0", "StringsByteSplit/RaggedGetItem/strided_slice_1/stack_1:output:0", "StringsByteSplit/RaggedGetItem/strided_slice_1/stack_2:output:0"], "attr": {"end_mask": {"i": "1"}, "T": {"type": "DT_INT64"}, "Index": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/RaggedGetItem/strided_slice_1"]}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_2/stack", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [0]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/RaggedGetItem/strided_slice_2/stack"]}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_2/stack_1", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [1]}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/RaggedGetItem/strided_slice_2/stack_1"]}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_2/stack_2", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [1]}}, "dtype": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/RaggedGetItem/strided_slice_2/stack_2"]}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_2", "op": "StridedSlice", "input": ["StringsByteSplit/RaggedGetItem/strided_slice:output:0", "StringsByteSplit/RaggedGetItem/strided_slice_2/stack:output:0", "StringsByteSplit/RaggedGetItem/strided_slice_2/stack_1:output:0", "StringsByteSplit/RaggedGetItem/strided_slice_2/stack_2:output:0"], "attr": {"Index": {"type": "DT_INT32"}, "T": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{}]}}, "shrink_axis_mask": {"i": "1"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/RaggedGetItem/strided_slice_2"]}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_3/stack", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [0]}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/RaggedGetItem/strided_slice_3/stack"]}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_3/stack_1", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [1]}}, "dtype": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/RaggedGetItem/strided_slice_3/stack_1"]}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_3/stack_2", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [1]}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/RaggedGetItem/strided_slice_3/stack_2"]}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_3", "op": "StridedSlice", "input": ["StringsByteSplit/RaggedGetItem/strided_slice_1:output:0", "StringsByteSplit/RaggedGetItem/strided_slice_3/stack:output:0", "StringsByteSplit/RaggedGetItem/strided_slice_3/stack_1:output:0", "StringsByteSplit/RaggedGetItem/strided_slice_3/stack_2:output:0"], "attr": {"Index": {"type": "DT_INT32"}, "shrink_axis_mask": {"i": "1"}, "_output_shapes": {"list": {"shape": [{}]}}, "T": {"type": "DT_INT64"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/RaggedGetItem/strided_slice_3"]}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_4/stack", "op": "Pack", "input": ["StringsByteSplit/RaggedGetItem/strided_slice_2:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "T": {"type": "DT_INT64"}, "N": {"i": "1"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/RaggedGetItem/strided_slice_4/stack"]}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_4/stack_1", "op": "Pack", "input": ["StringsByteSplit/RaggedGetItem/strided_slice_3:output:0"], "attr": {"T": {"type": "DT_INT64"}, "N": {"i": "1"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/RaggedGetItem/strided_slice_4/stack_1"]}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_4/stack_2", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [1]}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/RaggedGetItem/strided_slice_4/stack_2"]}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_4/Cast", "op": "Cast", "input": ["StringsByteSplit/RaggedGetItem/strided_slice_4/stack_2:output:0"], "attr": {"DstT": {"type": "DT_INT64"}, "SrcT": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/RaggedGetItem/strided_slice_4/Cast"]}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_4", "op": "StridedSlice", "input": ["StringsByteSplit/StringsByteSplit/StringSplit:values:0", "StringsByteSplit/RaggedGetItem/strided_slice_4/stack:output:0", "StringsByteSplit/RaggedGetItem/strided_slice_4/stack_1:output:0", "StringsByteSplit/RaggedGetItem/strided_slice_4/Cast:y:0"], "attr": {"T": {"type": "DT_STRING"}, "Index": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/RaggedGetItem/strided_slice_4"]}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_5/Const", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{}]}}}, "_output_shapes": {"list": {"shape": [{"dim": [{}]}]}}, "dtype": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/RaggedGetItem/strided_slice_5/Const"]}}, {"name": "StringsByteSplit/RaggedGetItem/strided_slice_5", "op": "StridedSlice", "input": ["StringsByteSplit/RaggedGetItem/strided_slice_4:output:0", "StringsByteSplit/RaggedGetItem/strided_slice_5/Const:output:0", "StringsByteSplit/RaggedGetItem/strided_slice_5/Const:output:0", "StringsByteSplit/RaggedGetItem/strided_slice_5/Const:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}, "T": {"type": "DT_STRING"}, "Index": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringsByteSplit/RaggedGetItem/strided_slice_5"]}}, {"name": "StringNGrams/Shape", "op": "Shape", "input": ["StringsByteSplit/RaggedGetItem/strided_slice_5:output:0"], "attr": {"T": {"type": "DT_STRING"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/Shape"]}}, {"name": "StringNGrams/strided_slice/stack", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [0]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/strided_slice/stack"]}}, {"name": "StringNGrams/strided_slice/stack_1", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [-1]}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/strided_slice/stack_1"]}}, {"name": "StringNGrams/strided_slice/stack_2", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [1]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/strided_slice/stack_2"]}}, {"name": "StringNGrams/strided_slice", "op": "StridedSlice", "input": ["StringNGrams/Shape:output:0", "StringNGrams/strided_slice/stack:output:0", "StringNGrams/strided_slice/stack_1:output:0", "StringNGrams/strided_slice/stack_2:output:0"], "attr": {"Index": {"type": "DT_INT32"}, "begin_mask": {"i": "1"}, "_output_shapes": {"list": {"shape": [{"dim": [{}]}]}}, "T": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/strided_slice"]}}, {"name": "StringNGrams/concat/values_1", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [-1]}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/concat/values_1"]}}, {"name": "StringNGrams/concat/axis", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}, "intVal": [0]}}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/concat/axis"]}}, {"name": "StringNGrams/concat", "op": "ConcatV2", "input": ["StringNGrams/strided_slice:output:0", "StringNGrams/concat/values_1:output:0", "StringNGrams/concat/axis:output:0"], "attr": {"T": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "N": {"i": "2"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/concat"]}}, {"name": "StringNGrams/RaggedFromRowStarts/Shape", "op": "Shape", "input": ["StringsByteSplit/RaggedGetItem/strided_slice_5:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "T": {"type": "DT_STRING"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedFromRowStarts/Shape"]}}, {"name": "StringNGrams/RaggedFromRowStarts/strided_slice/stack", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [0]}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedFromRowStarts/strided_slice/stack"]}}, {"name": "StringNGrams/RaggedFromRowStarts/strided_slice/stack_1", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [1]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedFromRowStarts/strided_slice/stack_1"]}}, {"name": "StringNGrams/RaggedFromRowStarts/strided_slice/stack_2", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [1]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedFromRowStarts/strided_slice/stack_2"]}}, {"name": "StringNGrams/RaggedFromRowStarts/strided_slice", "op": "StridedSlice", "input": ["StringNGrams/RaggedFromRowStarts/Shape:output:0", "StringNGrams/RaggedFromRowStarts/strided_slice/stack:output:0", "StringNGrams/RaggedFromRowStarts/strided_slice/stack_1:output:0", "StringNGrams/RaggedFromRowStarts/strided_slice/stack_2:output:0"], "attr": {"shrink_axis_mask": {"i": "1"}, "T": {"type": "DT_INT32"}, "Index": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedFromRowStarts/strided_slice"]}}, {"name": "StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/row_starts", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT64", "tensorShape": {"dim": [{"size": "1"}]}, "int64Val": ["0"]}}, "dtype": {"type": "DT_INT64"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/row_starts"]}}, {"name": "StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/Cast", "op": "Cast", "input": ["StringNGrams/RaggedFromRowStarts/strided_slice:output:0"], "attr": {"SrcT": {"type": "DT_INT32"}, "DstT": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/Cast"]}}, {"name": "StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/concat/values_1", "op": "Pack", "input": ["StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/Cast:y:0"], "attr": {"N": {"i": "1"}, "T": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/concat/values_1"]}}, {"name": "StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/concat/axis", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}, "intVal": [0]}}, "dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/concat/axis"]}}, {"name": "StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/concat", "op": "ConcatV2", "input": ["StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/row_starts:output:0", "StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/concat/values_1:output:0", "StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/concat/axis:output:0"], "attr": {"T": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "2"}]}]}}, "N": {"i": "2"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/concat"]}}, {"name": "StringNGrams/StringNGrams/StringNGrams", "op": "StringNGrams", "input": ["StringsByteSplit/RaggedGetItem/strided_slice_5:output:0", "StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/concat:output:0"], "attr": {"preserve_short_sequences": {"b": false}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}, {"dim": [{"size": "2"}]}]}}, "left_pad": {"s": ""}, "right_pad": {"s": ""}, "separator": {"s": "IA=="}, "pad_width": {"i": "0"}, "ngram_widths": {"list": {"i": ["2"]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/StringNGrams/StringNGrams"]}}, {"name": "StringNGrams/RaggedGetItem/strided_slice/stack", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [0]}}, "dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedGetItem/strided_slice/stack"]}}, {"name": "StringNGrams/RaggedGetItem/strided_slice/stack_1", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [-1]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedGetItem/strided_slice/stack_1"]}}, {"name": "StringNGrams/RaggedGetItem/strided_slice/stack_2", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [1]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedGetItem/strided_slice/stack_2"]}}, {"name": "StringNGrams/RaggedGetItem/strided_slice", "op": "StridedSlice", "input": ["StringNGrams/StringNGrams/StringNGrams:ngrams_splits:0", "StringNGrams/RaggedGetItem/strided_slice/stack:output:0", "StringNGrams/RaggedGetItem/strided_slice/stack_1:output:0", "StringNGrams/RaggedGetItem/strided_slice/stack_2:output:0"], "attr": {"Index": {"type": "DT_INT32"}, "T": {"type": "DT_INT64"}, "begin_mask": {"i": "1"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedGetItem/strided_slice"]}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_1/stack", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [1]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedGetItem/strided_slice_1/stack"]}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_1/stack_1", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [0]}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedGetItem/strided_slice_1/stack_1"]}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_1/stack_2", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [1]}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedGetItem/strided_slice_1/stack_2"]}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_1", "op": "StridedSlice", "input": ["StringNGrams/StringNGrams/StringNGrams:ngrams_splits:0", "StringNGrams/RaggedGetItem/strided_slice_1/stack:output:0", "StringNGrams/RaggedGetItem/strided_slice_1/stack_1:output:0", "StringNGrams/RaggedGetItem/strided_slice_1/stack_2:output:0"], "attr": {"Index": {"type": "DT_INT32"}, "T": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "end_mask": {"i": "1"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedGetItem/strided_slice_1"]}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_2/stack", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [0]}}, "dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedGetItem/strided_slice_2/stack"]}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_2/stack_1", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [1]}}, "dtype": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedGetItem/strided_slice_2/stack_1"]}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_2/stack_2", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [1]}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedGetItem/strided_slice_2/stack_2"]}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_2", "op": "StridedSlice", "input": ["StringNGrams/RaggedGetItem/strided_slice:output:0", "StringNGrams/RaggedGetItem/strided_slice_2/stack:output:0", "StringNGrams/RaggedGetItem/strided_slice_2/stack_1:output:0", "StringNGrams/RaggedGetItem/strided_slice_2/stack_2:output:0"], "attr": {"Index": {"type": "DT_INT32"}, "T": {"type": "DT_INT64"}, "shrink_axis_mask": {"i": "1"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedGetItem/strided_slice_2"]}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_3/stack", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [0]}}, "dtype": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedGetItem/strided_slice_3/stack"]}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_3/stack_1", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [1]}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedGetItem/strided_slice_3/stack_1"]}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_3/stack_2", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [1]}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedGetItem/strided_slice_3/stack_2"]}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_3", "op": "StridedSlice", "input": ["StringNGrams/RaggedGetItem/strided_slice_1:output:0", "StringNGrams/RaggedGetItem/strided_slice_3/stack:output:0", "StringNGrams/RaggedGetItem/strided_slice_3/stack_1:output:0", "StringNGrams/RaggedGetItem/strided_slice_3/stack_2:output:0"], "attr": {"T": {"type": "DT_INT64"}, "shrink_axis_mask": {"i": "1"}, "Index": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedGetItem/strided_slice_3"]}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_4/stack", "op": "Pack", "input": ["StringNGrams/RaggedGetItem/strided_slice_2:output:0"], "attr": {"T": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "N": {"i": "1"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedGetItem/strided_slice_4/stack"]}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_4/stack_1", "op": "Pack", "input": ["StringNGrams/RaggedGetItem/strided_slice_3:output:0"], "attr": {"T": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "N": {"i": "1"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedGetItem/strided_slice_4/stack_1"]}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_4/stack_2", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [1]}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedGetItem/strided_slice_4/stack_2"]}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_4/Cast", "op": "Cast", "input": ["StringNGrams/RaggedGetItem/strided_slice_4/stack_2:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "DstT": {"type": "DT_INT64"}, "SrcT": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedGetItem/strided_slice_4/Cast"]}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_4", "op": "StridedSlice", "input": ["StringNGrams/StringNGrams/StringNGrams:ngrams:0", "StringNGrams/RaggedGetItem/strided_slice_4/stack:output:0", "StringNGrams/RaggedGetItem/strided_slice_4/stack_1:output:0", "StringNGrams/RaggedGetItem/strided_slice_4/Cast:y:0"], "attr": {"T": {"type": "DT_STRING"}, "Index": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedGetItem/strided_slice_4"]}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_5/Const", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{}]}}}, "_output_shapes": {"list": {"shape": [{"dim": [{}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedGetItem/strided_slice_5/Const"]}}, {"name": "StringNGrams/RaggedGetItem/strided_slice_5", "op": "StridedSlice", "input": ["StringNGrams/RaggedGetItem/strided_slice_4:output:0", "StringNGrams/RaggedGetItem/strided_slice_5/Const:output:0", "StringNGrams/RaggedGetItem/strided_slice_5/Const:output:0", "StringNGrams/RaggedGetItem/strided_slice_5/Const:output:0"], "attr": {"T": {"type": "DT_STRING"}, "Index": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["StringNGrams/RaggedGetItem/strided_slice_5"]}}, {"name": "concat/axis", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}, "intVal": [0]}}}, "experimentalDebugInfo": {"originalNodeNames": ["concat/axis"]}}, {"name": "concat", "op": "ConcatV2", "input": ["StringNGrams/RaggedGetItem/strided_slice_5:output:0", "Const:output:0", "concat/axis:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}, "T": {"type": "DT_STRING"}, "N": {"i": "2"}}, "experimentalDebugInfo": {"originalNodeNames": ["concat"]}}, {"name": "strided_slice/stack", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [0]}}}, "experimentalDebugInfo": {"originalNodeNames": ["strided_slice/stack"]}}, {"name": "strided_slice/stack_1", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [10000]}}}, "experimentalDebugInfo": {"originalNodeNames": ["strided_slice/stack_1"]}}, {"name": "strided_slice/stack_2", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "1"}]}]}}, "dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "1"}]}, "intVal": [1]}}}, "experimentalDebugInfo": {"originalNodeNames": ["strided_slice/stack_2"]}}, {"name": "strided_slice", "op": "StridedSlice", "input": ["concat:output:0", "strided_slice/stack:output:0", "strided_slice/stack_1:output:0", "strided_slice/stack_2:output:0"], "attr": {"Index": {"type": "DT_INT32"}, "begin_mask": {"i": "1"}, "T": {"type": "DT_STRING"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["strided_slice"]}}, {"name": "TensorArrayV2Write/TensorListSetItem", "op": "TensorListSetItem", "input": ["placeholder_1", "placeholder", "strided_slice:output:0"], "attr": {"element_dtype": {"type": "DT_STRING"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["TensorArrayV2Write/TensorListSetItem"]}}, {"name": "add/y", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}, "intVal": [1]}}}, "experimentalDebugInfo": {"originalNodeNames": ["add/y"]}}, {"name": "add_0", "op": "AddV2", "input": ["placeholder", "add/y:output:0"], "attr": {"T": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["add"]}}, {"name": "add_1/y", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {}, "intVal": [1]}}}, "experimentalDebugInfo": {"originalNodeNames": ["add_1/y"]}}, {"name": "add_1_0", "op": "AddV2", "input": ["map_while_loop_counter", "add_1/y:output:0"], "attr": {"T": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["add_1"]}}], "ret": {"tensorarrayv2read_tensorlistgetitem_map_tensorarrayunstack_tensorlistfromtensor": "tensorarrayv2read_tensorlistgetitem_map_tensorarrayunstack_tensorlistfromtensor_0", "tensorarrayv2write_tensorlistsetitem": "TensorArrayV2Write/TensorListSetItem:output_handle:0", "map_strided_slice": "map_strided_slice_0", "add_1": "add_1_0:z:0", "add": "add_0:z:0", "map_strided_slice_1": "map_strided_slice_1_0"}, "attr": {"_input_shapes": {"list": {"shape": [{}, {}, {}, {}, {}, {}]}}}, "argAttr": {"1": {"attr": {"_output_shapes": {"list": {"shape": [{}]}}}}, "3": {"attr": {"_output_shapes": {"list": {"shape": [{}]}}}}, "0": {"attr": {"_output_shapes": {"list": {"shape": [{}]}}}}, "5": {"attr": {"_output_shapes": {"list": {"shape": [{}]}}}}, "2": {"attr": {"_output_shapes": {"list": {"shape": [{}]}}}}, "4": {"attr": {"_output_shapes": {"list": {"shape": [{}]}}}}}}, {"signature": {"name": "zero_fraction_1_cond_false_49704", "inputArg": [{"name": "count_nonzero_notequal_linear_linear_model_linear_linear_model_linear_linear_model_weighted_sum", "type": "DT_FLOAT"}], "outputArg": [{"name": "count_nonzero_nonzero_count", "type": "DT_INT64"}]}, "nodeDef": [{"name": "count_nonzero/zeros", "op": "Const", "attr": {"dtype": {"type": "DT_FLOAT"}, "_output_shapes": {"list": {"shape": [{}]}}, "value": {"tensor": {"dtype": "DT_FLOAT", "tensorShape": {}, "floatVal": [0.0]}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/zeros"]}}, {"name": "count_nonzero/NotEqual", "op": "NotEqual", "input": ["count_nonzero_notequal_linear_linear_model_linear_linear_model_linear_linear_model_weighted_sum", "count_nonzero/zeros:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "54"}]}]}}, "T": {"type": "DT_FLOAT"}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/NotEqual"]}}, {"name": "count_nonzero/Cast", "op": "Cast", "input": ["count_nonzero/NotEqual:z:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "54"}]}]}}, "SrcT": {"type": "DT_BOOL"}, "DstT": {"type": "DT_INT64"}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/Cast"]}}, {"name": "count_nonzero/Const", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "2"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "2"}]}, "tensorContent": "AAAAAAEAAAA="}}, "dtype": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/Const"]}}, {"name": "count_nonzero/nonzero_count", "op": "Sum", "input": ["count_nonzero/Cast:y:0", "count_nonzero/Const:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "T": {"type": "DT_INT64"}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/nonzero_count"]}}], "ret": {"count_nonzero_nonzero_count": "count_nonzero/nonzero_count:output:0"}, "attr": {"_input_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "54"}]}]}}}, "argAttr": {"0": {"attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "54"}]}]}}}}}}, {"signature": {"name": "dnn_zero_fraction_cond_true_49370", "inputArg": [{"name": "count_nonzero_notequal_dnn_hiddenlayer_0_relu", "type": "DT_FLOAT"}], "outputArg": [{"name": "cast", "type": "DT_INT64"}, {"name": "optionalfromvalue", "type": "DT_VARIANT"}, {"name": "optionalfromvalue_1", "type": "DT_VARIANT"}, {"name": "optionalfromvalue_2", "type": "DT_VARIANT"}, {"name": "optionalfromvalue_3", "type": "DT_VARIANT"}, {"name": "optionalfromvalue_4", "type": "DT_VARIANT"}]}, "nodeDef": [{"name": "count_nonzero/zeros", "op": "Const", "attr": {"dtype": {"type": "DT_FLOAT"}, "_output_shapes": {"list": {"shape": [{}]}}, "value": {"tensor": {"dtype": "DT_FLOAT", "tensorShape": {}, "floatVal": [0.0]}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/zeros"]}}, {"name": "count_nonzero/NotEqual", "op": "NotEqual", "input": ["count_nonzero_notequal_dnn_hiddenlayer_0_relu", "count_nonzero/zeros:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "512"}]}]}}, "T": {"type": "DT_FLOAT"}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/NotEqual"]}}, {"name": "count_nonzero/Cast", "op": "Cast", "input": ["count_nonzero/NotEqual:z:0"], "attr": {"DstT": {"type": "DT_INT32"}, "SrcT": {"type": "DT_BOOL"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "512"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/Cast"]}}, {"name": "count_nonzero/Const", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "2"}]}, "tensorContent": "AAAAAAEAAAA="}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "2"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/Const"]}}, {"name": "count_nonzero/nonzero_count", "op": "Sum", "input": ["count_nonzero/Cast:y:0", "count_nonzero/Const:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "T": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/nonzero_count"]}}, {"name": "Cast", "op": "Cast", "input": ["count_nonzero/nonzero_count:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "DstT": {"type": "DT_INT64"}, "SrcT": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["Cast"]}}, {"name": "OptionalFromValue", "op": "OptionalFromValue", "input": ["count_nonzero/zeros:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "Toutput_types": {"list": {"type": ["DT_FLOAT"]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue"]}}, {"name": "OptionalFromValue_1", "op": "OptionalFromValue", "input": ["count_nonzero/NotEqual:z:0"], "attr": {"Toutput_types": {"list": {"type": ["DT_BOOL"]}}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue_1"]}}, {"name": "OptionalFromValue_2", "op": "OptionalFromValue", "input": ["count_nonzero/Cast:y:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "Toutput_types": {"list": {"type": ["DT_INT32"]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue_2"]}}, {"name": "OptionalFromValue_3", "op": "OptionalFromValue", "input": ["count_nonzero/Const:output:0"], "attr": {"Toutput_types": {"list": {"type": ["DT_INT32"]}}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue_3"]}}, {"name": "OptionalFromValue_4", "op": "OptionalFromValue", "input": ["count_nonzero/nonzero_count:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "Toutput_types": {"list": {"type": ["DT_INT32"]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue_4"]}}], "ret": {"optionalfromvalue_3": "OptionalFromValue_3:optional:0", "optionalfromvalue_1": "OptionalFromValue_1:optional:0", "cast": "Cast:y:0", "optionalfromvalue_4": "OptionalFromValue_4:optional:0", "optionalfromvalue": "OptionalFromValue:optional:0", "optionalfromvalue_2": "OptionalFromValue_2:optional:0"}, "attr": {"_input_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "512"}]}]}}}, "argAttr": {"0": {"attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "512"}]}]}}}}}}, {"signature": {"name": "dnn_zero_fraction_1_cond_true_49440", "inputArg": [{"name": "count_nonzero_notequal_dnn_hiddenlayer_1_relu", "type": "DT_FLOAT"}], "outputArg": [{"name": "cast", "type": "DT_INT64"}, {"name": "optionalfromvalue", "type": "DT_VARIANT"}, {"name": "optionalfromvalue_1", "type": "DT_VARIANT"}, {"name": "optionalfromvalue_2", "type": "DT_VARIANT"}, {"name": "optionalfromvalue_3", "type": "DT_VARIANT"}, {"name": "optionalfromvalue_4", "type": "DT_VARIANT"}]}, "nodeDef": [{"name": "count_nonzero/zeros", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_FLOAT", "tensorShape": {}, "floatVal": [0.0]}}, "_output_shapes": {"list": {"shape": [{}]}}, "dtype": {"type": "DT_FLOAT"}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/zeros"]}}, {"name": "count_nonzero/NotEqual", "op": "NotEqual", "input": ["count_nonzero_notequal_dnn_hiddenlayer_1_relu", "count_nonzero/zeros:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "32"}]}]}}, "T": {"type": "DT_FLOAT"}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/NotEqual"]}}, {"name": "count_nonzero/Cast", "op": "Cast", "input": ["count_nonzero/NotEqual:z:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "32"}]}]}}, "SrcT": {"type": "DT_BOOL"}, "DstT": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/Cast"]}}, {"name": "count_nonzero/Const", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "2"}]}]}}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "2"}]}, "tensorContent": "AAAAAAEAAAA="}}, "dtype": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/Const"]}}, {"name": "count_nonzero/nonzero_count", "op": "Sum", "input": ["count_nonzero/Cast:y:0", "count_nonzero/Const:output:0"], "attr": {"T": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/nonzero_count"]}}, {"name": "Cast", "op": "Cast", "input": ["count_nonzero/nonzero_count:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "SrcT": {"type": "DT_INT32"}, "DstT": {"type": "DT_INT64"}}, "experimentalDebugInfo": {"originalNodeNames": ["Cast"]}}, {"name": "OptionalFromValue", "op": "OptionalFromValue", "input": ["count_nonzero/zeros:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "Toutput_types": {"list": {"type": ["DT_FLOAT"]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue"]}}, {"name": "OptionalFromValue_1", "op": "OptionalFromValue", "input": ["count_nonzero/NotEqual:z:0"], "attr": {"Toutput_types": {"list": {"type": ["DT_BOOL"]}}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue_1"]}}, {"name": "OptionalFromValue_2", "op": "OptionalFromValue", "input": ["count_nonzero/Cast:y:0"], "attr": {"Toutput_types": {"list": {"type": ["DT_INT32"]}}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue_2"]}}, {"name": "OptionalFromValue_3", "op": "OptionalFromValue", "input": ["count_nonzero/Const:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "Toutput_types": {"list": {"type": ["DT_INT32"]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue_3"]}}, {"name": "OptionalFromValue_4", "op": "OptionalFromValue", "input": ["count_nonzero/nonzero_count:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "Toutput_types": {"list": {"type": ["DT_INT32"]}}}, "experimentalDebugInfo": {"originalNodeNames": ["OptionalFromValue_4"]}}], "ret": {"optionalfromvalue_3": "OptionalFromValue_3:optional:0", "optionalfromvalue_2": "OptionalFromValue_2:optional:0", "optionalfromvalue": "OptionalFromValue:optional:0", "optionalfromvalue_1": "OptionalFromValue_1:optional:0", "cast": "Cast:y:0", "optionalfromvalue_4": "OptionalFromValue_4:optional:0"}, "attr": {"_input_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "32"}]}]}}}, "argAttr": {"0": {"attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "32"}]}]}}}}}}, {"signature": {"name": "zero_fraction_cond_false_49665", "inputArg": [{"name": "count_nonzero_notequal_zero_fraction_readvariableop", "type": "DT_FLOAT"}], "outputArg": [{"name": "count_nonzero_nonzero_count", "type": "DT_INT64"}]}, "nodeDef": [{"name": "count_nonzero/zeros", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "dtype": {"type": "DT_FLOAT"}, "value": {"tensor": {"dtype": "DT_FLOAT", "tensorShape": {}, "floatVal": [0.0]}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/zeros"]}}, {"name": "count_nonzero/NotEqual", "op": "NotEqual", "input": ["count_nonzero_notequal_zero_fraction_readvariableop", "count_nonzero/zeros:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "5000"}, {"size": "54"}]}]}}, "T": {"type": "DT_FLOAT"}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/NotEqual"]}}, {"name": "count_nonzero/Cast", "op": "Cast", "input": ["count_nonzero/NotEqual:z:0"], "attr": {"SrcT": {"type": "DT_BOOL"}, "DstT": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "5000"}, {"size": "54"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/Cast"]}}, {"name": "count_nonzero/Const", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "2"}]}, "tensorContent": "AAAAAAEAAAA="}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "2"}]}]}}, "dtype": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/Const"]}}, {"name": "count_nonzero/nonzero_count", "op": "Sum", "input": ["count_nonzero/Cast:y:0", "count_nonzero/Const:output:0"], "attr": {"T": {"type": "DT_INT64"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/nonzero_count"]}}], "ret": {"count_nonzero_nonzero_count": "count_nonzero/nonzero_count:output:0"}, "attr": {"_input_shapes": {"list": {"shape": [{"dim": [{"size": "5000"}, {"size": "54"}]}]}}}, "argAttr": {"0": {"attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "5000"}, {"size": "54"}]}]}}}}}}, {"signature": {"name": "zero_fraction_1_cond_true_49703", "inputArg": [{"name": "count_nonzero_notequal_linear_linear_model_linear_linear_model_linear_linear_model_weighted_sum", "type": "DT_FLOAT"}], "outputArg": [{"name": "cast", "type": "DT_INT64"}]}, "nodeDef": [{"name": "count_nonzero/zeros", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "value": {"tensor": {"dtype": "DT_FLOAT", "tensorShape": {}, "floatVal": [0.0]}}, "dtype": {"type": "DT_FLOAT"}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/zeros"]}}, {"name": "count_nonzero/NotEqual", "op": "NotEqual", "input": ["count_nonzero_notequal_linear_linear_model_linear_linear_model_linear_linear_model_weighted_sum", "count_nonzero/zeros:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "54"}]}]}}, "T": {"type": "DT_FLOAT"}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/NotEqual"]}}, {"name": "count_nonzero/Cast", "op": "Cast", "input": ["count_nonzero/NotEqual:z:0"], "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "54"}]}]}}, "DstT": {"type": "DT_INT32"}, "SrcT": {"type": "DT_BOOL"}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/Cast"]}}, {"name": "count_nonzero/Const", "op": "Const", "attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "2"}]}]}}, "dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "2"}]}, "tensorContent": "AAAAAAEAAAA="}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/Const"]}}, {"name": "count_nonzero/nonzero_count", "op": "Sum", "input": ["count_nonzero/Cast:y:0", "count_nonzero/Const:output:0"], "attr": {"T": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/nonzero_count"]}}, {"name": "Cast", "op": "Cast", "input": ["count_nonzero/nonzero_count:output:0"], "attr": {"DstT": {"type": "DT_INT64"}, "SrcT": {"type": "DT_INT32"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["Cast"]}}], "ret": {"cast": "Cast:y:0"}, "attr": {"_input_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "54"}]}]}}}, "argAttr": {"0": {"attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "-1"}, {"size": "54"}]}]}}}}}}, {"signature": {"name": "zero_fraction_cond_true_49664", "inputArg": [{"name": "count_nonzero_notequal_zero_fraction_readvariableop", "type": "DT_FLOAT"}], "outputArg": [{"name": "cast", "type": "DT_INT64"}]}, "nodeDef": [{"name": "count_nonzero/zeros", "op": "Const", "attr": {"value": {"tensor": {"dtype": "DT_FLOAT", "tensorShape": {}, "floatVal": [0.0]}}, "dtype": {"type": "DT_FLOAT"}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/zeros"]}}, {"name": "count_nonzero/NotEqual", "op": "NotEqual", "input": ["count_nonzero_notequal_zero_fraction_readvariableop", "count_nonzero/zeros:output:0"], "attr": {"T": {"type": "DT_FLOAT"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "5000"}, {"size": "54"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/NotEqual"]}}, {"name": "count_nonzero/Cast", "op": "Cast", "input": ["count_nonzero/NotEqual:z:0"], "attr": {"SrcT": {"type": "DT_BOOL"}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "5000"}, {"size": "54"}]}]}}, "DstT": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/Cast"]}}, {"name": "count_nonzero/Const", "op": "Const", "attr": {"dtype": {"type": "DT_INT32"}, "value": {"tensor": {"dtype": "DT_INT32", "tensorShape": {"dim": [{"size": "2"}]}, "tensorContent": "AAAAAAEAAAA="}}, "_output_shapes": {"list": {"shape": [{"dim": [{"size": "2"}]}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/Const"]}}, {"name": "count_nonzero/nonzero_count", "op": "Sum", "input": ["count_nonzero/Cast:y:0", "count_nonzero/Const:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "T": {"type": "DT_INT32"}}, "experimentalDebugInfo": {"originalNodeNames": ["count_nonzero/nonzero_count"]}}, {"name": "Cast", "op": "Cast", "input": ["count_nonzero/nonzero_count:output:0"], "attr": {"_output_shapes": {"list": {"shape": [{}]}}, "SrcT": {"type": "DT_INT32"}, "DstT": {"type": "DT_INT64"}}, "experimentalDebugInfo": {"originalNodeNames": ["Cast"]}}], "ret": {"cast": "Cast:y:0"}, "attr": {"_input_shapes": {"list": {"shape": [{"dim": [{"size": "5000"}, {"size": "54"}]}]}}}, "argAttr": {"0": {"attr": {"_output_shapes": {"list": {"shape": [{"dim": [{"size": "5000"}, {"size": "54"}]}]}}}}}}, {"signature": {"name": "zero_fraction_total_zero_zero_count_true_49654", "inputArg": [{"name": "placeholder", "type": "DT_RESOURCE"}, {"name": "placeholder_1", "type": "DT_INT64"}], "outputArg": [{"name": "const", "type": "DT_FLOAT"}]}, "nodeDef": [{"name": "Const", "op": "Const", "attr": {"dtype": {"type": "DT_FLOAT"}, "value": {"tensor": {"dtype": "DT_FLOAT", "tensorShape": {}, "floatVal": [0.0]}}, "_output_shapes": {"list": {"shape": [{}]}}}, "experimentalDebugInfo": {"originalNodeNames": ["Const"]}}], "ret": {"const": "Const:output:0"}, "attr": {"_input_shapes": {"list": {"shape": [{"unknownRank": true}, {}]}}}, "argAttr": {"1": {"attr": {"_output_shapes": {"list": {"shape": [{}]}}}}}}]}, "versions": {"minConsumer": 12}}, "weightsManifest": [{"paths": ["group1-shard1of1.bin"], "weights": [{"name": "head/ExpandDims/input", "shape": [54], "dtype": "string"}, {"name": "head/ExpandDims/dim", "shape": [], "dtype": "int32"}, {"name": "head/strided_slice/stack", "shape": [1], "dtype": "int32"}, {"name": "head/strided_slice/stack_1", "shape": [1], "dtype": "int32"}, {"name": "head/strided_slice/stack_2", "shape": [1], "dtype": "int32"}, {"name": "head/Tile/multiples/1", "shape": [], "dtype": "int32"}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Reshape_1/shape", "shape": [2], "dtype": "int32"}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/stack/0", "shape": [], "dtype": "int32"}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/strided_slice/stack", "shape": [1], "dtype": "int32"}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/strided_slice/stack_1", "shape": [1], "dtype": "int32"}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/strided_slice/stack_2", "shape": [1], "dtype": "int32"}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding/embedding_weights", "shape": [5000, 70], "dtype": "float32", "quantization": {"dtype": "uint8", "min": -0.23829841794920903, "scale": 0.0018763654956630632, "original_dtype": "float32"}}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/GatherV2_1/axis", "shape": [], "dtype": "int32"}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/GreaterEqual/y", "shape": [], "dtype": "int32"}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Reshape/shape", "shape": [1], "dtype": "int32"}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/GatherV2_2/axis", "shape": [], "dtype": "int32"}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/to_sparse_input/ignore_value/x", "shape": [], "dtype": "string"}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Slice/begin", "shape": [1], "dtype": "int32"}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Slice/size", "shape": [1], "dtype": "int32"}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/Const", "shape": [1], "dtype": "int32"}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/GatherV2/indices", "shape": [], "dtype": "int32"}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/GatherV2/axis", "shape": [], "dtype": "int32"}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/SparseFillEmptyRows/Const", "shape": [], "dtype": "int32"}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/embedding_lookup_sparse/strided_slice/stack", "shape": [2], "dtype": "int32"}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1", "shape": [2], "dtype": "int32"}, {"name": "dnn/input_from_feature_columns/input_layer/content_embedding_1/content_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2", "shape": [2], "dtype": "int32"}, {"name": "dnn/hiddenlayer_0/kernel", "shape": [70, 512], "dtype": "float32", "quantization": {"dtype": "uint8", "min": -0.10249130375245037, "scale": 0.0008070181397830738, "original_dtype": "float32"}}, {"name": "dnn/hiddenlayer_0/bias", "shape": [512], "dtype": "float32", "quantization": {"dtype": "uint8", "min": -0.021031223785351303, "scale": 0.00020029736938429813, "original_dtype": "float32"}}, {"name": "dnn/hiddenlayer_1/kernel", "shape": [512, 32], "dtype": "float32", "quantization": {"dtype": "uint8", "min": -0.10604567843324998, "scale": 0.000841632368517857, "original_dtype": "float32"}}, {"name": "dnn/hiddenlayer_1/bias", "shape": [32], "dtype": "float32", "quantization": {"dtype": "uint8", "min": -0.022284538547197977, "scale": 0.00032771380216467614, "original_dtype": "float32"}}, {"name": "dnn/logits/kernel", "shape": [32, 54], "dtype": "float32", "quantization": {"dtype": "uint8", "min": -0.27378906011581416, "scale": 0.002172929048538208, "original_dtype": "float32"}}, {"name": "dnn/logits/bias", "shape": [54], "dtype": "float32", "quantization": {"dtype": "uint8", "min": -0.11504998528489879, "scale": 0.0009508263246685851, "original_dtype": "float32"}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Slice_1/begin", "shape": [1], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Slice_1/size", "shape": [1], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Reshape_1/shape", "shape": [2], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/stack/0", "shape": [], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/strided_slice/stack", "shape": [1], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/strided_slice/stack_1", "shape": [1], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/strided_slice/stack_2", "shape": [1], "dtype": "int32"}, {"name": "linear/linear_model/content/weights", "shape": [5000, 54], "dtype": "float32", "quantization": {"dtype": "uint8", "min": -0.3894611456814934, "scale": 0.003933950966479732, "original_dtype": "float32"}}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/GatherV2_1/axis", "shape": [], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/GreaterEqual/y", "shape": [], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Reshape/shape", "shape": [1], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/GatherV2_2/axis", "shape": [], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Slice/begin", "shape": [1], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Slice/size", "shape": [1], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Const", "shape": [1], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/to_sparse_input/ignore_value/x", "shape": [], "dtype": "string"}, {"name": "map/while/loop_counter", "shape": [], "dtype": "int32"}, {"name": "map/Const", "shape": [], "dtype": "int32"}, {"name": "map/TensorArrayV2_1/element_shape", "shape": [], "dtype": "int32"}, {"name": "map/strided_slice/stack", "shape": [1], "dtype": "int32"}, {"name": "map/strided_slice/stack_1", "shape": [1], "dtype": "int32"}, {"name": "map/strided_slice/stack_2", "shape": [1], "dtype": "int32"}, {"name": "map/TensorArrayUnstack/Const", "shape": [0], "dtype": "int32"}, {"name": "map/TensorArrayV2Stack/TensorListStack/element_shape", "shape": [1], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/strided_slice/stack", "shape": [1], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/strided_slice/stack_1", "shape": [1], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/strided_slice/stack_2", "shape": [1], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/Cast/x/1", "shape": [], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/GatherV2/indices", "shape": [], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/GatherV2/axis", "shape": [], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/SparseFillEmptyRows/Const", "shape": [], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/embedding_lookup_sparse/strided_slice/stack", "shape": [2], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/embedding_lookup_sparse/strided_slice/stack_1", "shape": [2], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/embedding_lookup_sparse/strided_slice/stack_2", "shape": [2], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Slice_2/begin", "shape": [1], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/Slice_2/size", "shape": [1], "dtype": "int32"}, {"name": "linear/linear_model/linear/linear_model/linear/linear_model/content/weighted_sum/concat/axis", "shape": [], "dtype": "int32"}, {"name": "linear/linear_model/bias_weights", "shape": [54], "dtype": "float32", "quantization": {"dtype": "uint8", "min": -0.5752425799182816, "scale": 0.004754070908415551, "original_dtype": "float32"}}, {"name": "map_while_body_49115/add_1/y", "shape": [], "dtype": "int32"}, {"name": "map_while_body_49115/add/y", "shape": [], "dtype": "int32"}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice/stack", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice/stack_1", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice/stack_2", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_2/stack", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_2/stack_1", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_2/stack_2", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/row_starts", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice/stack", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice/stack_1", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice/stack_2", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_2/stack", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_2/stack_1", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_2/stack_2", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/concat/values_0", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/strided_slice_1/stack", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/strided_slice_1/stack_1", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/strided_slice_1/stack_2", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Const", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Greater/y", "shape": [], "dtype": "int32"}, {"name": "map_while_body_49115/TensorArrayV2Read/Const", "shape": [0], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/StringSplit/delimiter", "shape": [], "dtype": "string"}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/strided_slice/stack", "shape": [2], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/strided_slice/stack_1", "shape": [2], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/strided_slice/stack_2", "shape": [2], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Const_1", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/add/y", "shape": [], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/bincount/Const_2", "shape": [0], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/Cumsum/axis", "shape": [], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/StringsByteSplit/RaggedFromValueRowIds/RowPartitionFromValueRowIds/concat/axis", "shape": [], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_1/stack", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_1/stack_1", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_1/stack_2", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_3/stack", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_3/stack_1", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_3/stack_2", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_4/Cast", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringsByteSplit/RaggedGetItem/strided_slice_5/Const", "shape": [0], "dtype": "int32"}, {"name": "map_while_body_49115/StringNGrams/RaggedFromRowStarts/strided_slice/stack", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringNGrams/RaggedFromRowStarts/strided_slice/stack_1", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringNGrams/RaggedFromRowStarts/strided_slice/stack_2", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/concat/axis", "shape": [], "dtype": "int32"}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_1/stack", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_1/stack_1", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_1/stack_2", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_3/stack", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_3/stack_1", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_3/stack_2", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_4/Cast", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/StringNGrams/RaggedGetItem/strided_slice_5/Const", "shape": [0], "dtype": "int32"}, {"name": "map_while_body_49115/Const", "shape": [10000], "dtype": "string"}, {"name": "map_while_body_49115/concat/axis", "shape": [], "dtype": "int32"}, {"name": "map_while_body_49115/strided_slice/stack", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/strided_slice/stack_1", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/strided_slice/stack_2", "shape": [1], "dtype": "int32"}, {"name": "map_while_body_49115/ConstantFolding/StringsByteSplit/stack_const_axis", "shape": [], "dtype": "int32"}, {"name": "map_while_body_49115/ConstantFolding/StringsByteSplit/RaggedGetItem/strided_slice_4/stack_const_axis", "shape": [], "dtype": "int32"}, {"name": "map_while_body_49115/ConstantFolding/StringsByteSplit/RaggedGetItem/strided_slice_4/stack_1_const_axis", "shape": [], "dtype": "int32"}, {"name": "map_while_body_49115/ConstantFolding/StringNGrams/RaggedFromRowStarts/RowPartitionFromRowStarts/concat/values_1_const_axis", "shape": [], "dtype": "int32"}, {"name": "map_while_body_49115/ConstantFolding/StringNGrams/RaggedGetItem/strided_slice_4/stack_const_axis", "shape": [], "dtype": "int32"}, {"name": "map_while_body_49115/ConstantFolding/StringNGrams/RaggedGetItem/strided_slice_4/stack_1_const_axis", "shape": [], "dtype": "int32"}, {"name": "head/predictions/class_string_lookup/Const", "shape": [54], "dtype": "string"}, {"name": "head/predictions/class_string_lookup/Size", "shape": [], "dtype": "int32"}, {"name": "head/predictions/class_string_lookup/range/start", "shape": [], "dtype": "int32"}, {"name": "head/predictions/class_string_lookup/range/delta", "shape": [], "dtype": "int32"}]}]}'},6113:e=>{"use strict";e.exports=require("crypto")},5477:e=>{"use strict";e.exports=require("punycode")},3837:e=>{"use strict";e.exports=require("util")},7085:(e,A,Y)=>{"use strict";Y.r(A),Y.d(A,{FetchError:()=>s,Headers:()=>b,Request:()=>H,Response:()=>v,default:()=>P});const t=require("stream"),a=require("http"),i=require("url");var m=Y(7347);const n=require("https"),l=require("zlib"),p=t.Readable,d=Symbol("buffer"),o=Symbol("type");class r{constructor(){this[o]="";const e=arguments[0],A=arguments[1],Y=[];let t=0;if(e){const A=e,a=Number(A.length);for(let e=0;e<a;e++){const a=A[e];let i;i=a instanceof Buffer?a:ArrayBuffer.isView(a)?Buffer.from(a.buffer,a.byteOffset,a.byteLength):a instanceof ArrayBuffer?Buffer.from(a):a instanceof r?a[d]:Buffer.from("string"==typeof a?a:String(a)),t+=i.length,Y.push(i)}}this[d]=Buffer.concat(Y);let a=A&&void 0!==A.type&&String(A.type).toLowerCase();a&&!/[^\u0020-\u007E]/.test(a)&&(this[o]=a)}get size(){return this[d].length}get type(){return this[o]}text(){return Promise.resolve(this[d].toString())}arrayBuffer(){const e=this[d],A=e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength);return Promise.resolve(A)}stream(){const e=new p;return e._read=function(){},e.push(this[d]),e.push(null),e}toString(){return"[object Blob]"}slice(){const e=this.size,A=arguments[0],Y=arguments[1];let t,a;t=void 0===A?0:A<0?Math.max(e+A,0):Math.min(A,e),a=void 0===Y?e:Y<0?Math.max(e+Y,0):Math.min(Y,e);const i=Math.max(a-t,0),m=this[d].slice(t,t+i),n=new r([],{type:arguments[2]});return n[d]=m,n}}function s(e,A,Y){Error.call(this,e),this.message=e,this.type=A,Y&&(this.code=this.errno=Y.code),Error.captureStackTrace(this,this.constructor)}let Z;Object.defineProperties(r.prototype,{size:{enumerable:!0},type:{enumerable:!0},slice:{enumerable:!0}}),Object.defineProperty(r.prototype,Symbol.toStringTag,{value:"Blob",writable:!1,enumerable:!1,configurable:!0}),s.prototype=Object.create(Error.prototype),s.prototype.constructor=s,s.prototype.name="FetchError";try{Z=require("encoding").convert}catch(e){}const N=Symbol("Body internals"),j=t.PassThrough;function h(e){var A=this,Y=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=Y.size;let i=void 0===a?0:a;var m=Y.timeout;let n=void 0===m?0:m;null==e?e=null:u(e)?e=Buffer.from(e.toString()):V(e)||Buffer.isBuffer(e)||("[object ArrayBuffer]"===Object.prototype.toString.call(e)?e=Buffer.from(e):ArrayBuffer.isView(e)?e=Buffer.from(e.buffer,e.byteOffset,e.byteLength):e instanceof t||(e=Buffer.from(String(e)))),this[N]={body:e,disturbed:!1,error:null},this.size=i,this.timeout=n,e instanceof t&&e.on("error",(function(e){const Y="AbortError"===e.name?e:new s(`Invalid response body while trying to fetch ${A.url}: ${e.message}`,"system",e);A[N].error=Y}))}function W(){var e=this;if(this[N].disturbed)return h.Promise.reject(new TypeError(`body used already for: ${this.url}`));if(this[N].disturbed=!0,this[N].error)return h.Promise.reject(this[N].error);let A=this.body;if(null===A)return h.Promise.resolve(Buffer.alloc(0));if(V(A)&&(A=A.stream()),Buffer.isBuffer(A))return h.Promise.resolve(A);if(!(A instanceof t))return h.Promise.resolve(Buffer.alloc(0));let Y=[],a=0,i=!1;return new h.Promise((function(t,m){let n;e.timeout&&(n=setTimeout((function(){i=!0,m(new s(`Response timeout while trying to fetch ${e.url} (over ${e.timeout}ms)`,"body-timeout"))}),e.timeout)),A.on("error",(function(A){"AbortError"===A.name?(i=!0,m(A)):m(new s(`Invalid response body while trying to fetch ${e.url}: ${A.message}`,"system",A))})),A.on("data",(function(A){if(!i&&null!==A){if(e.size&&a+A.length>e.size)return i=!0,void m(new s(`content size at ${e.url} over limit: ${e.size}`,"max-size"));a+=A.length,Y.push(A)}})),A.on("end",(function(){if(!i){clearTimeout(n);try{t(Buffer.concat(Y,a))}catch(A){m(new s(`Could not create Buffer from response body for ${e.url}: ${A.message}`,"system",A))}}}))}))}function u(e){return"object"==typeof e&&"function"==typeof e.append&&"function"==typeof e.delete&&"function"==typeof e.get&&"function"==typeof e.getAll&&"function"==typeof e.has&&"function"==typeof e.set&&("URLSearchParams"===e.constructor.name||"[object URLSearchParams]"===Object.prototype.toString.call(e)||"function"==typeof e.sort)}function V(e){return"object"==typeof e&&"function"==typeof e.arrayBuffer&&"string"==typeof e.type&&"function"==typeof e.stream&&"function"==typeof e.constructor&&"string"==typeof e.constructor.name&&/^(Blob|File)$/.test(e.constructor.name)&&/^(Blob|File)$/.test(e[Symbol.toStringTag])}function c(e){let A,Y,a=e.body;if(e.bodyUsed)throw new Error("cannot clone body after it is used");return a instanceof t&&"function"!=typeof a.getBoundary&&(A=new j,Y=new j,a.pipe(A),a.pipe(Y),e[N].body=A,a=Y),a}function G(e){return null===e?null:"string"==typeof e?"text/plain;charset=UTF-8":u(e)?"application/x-www-form-urlencoded;charset=UTF-8":V(e)?e.type||null:Buffer.isBuffer(e)||"[object ArrayBuffer]"===Object.prototype.toString.call(e)||ArrayBuffer.isView(e)?null:"function"==typeof e.getBoundary?`multipart/form-data;boundary=${e.getBoundary()}`:e instanceof t?null:"text/plain;charset=UTF-8"}function F(e){const A=e.body;return null===A?0:V(A)?A.size:Buffer.isBuffer(A)?A.length:A&&"function"==typeof A.getLengthSync&&(A._lengthRetrievers&&0==A._lengthRetrievers.length||A.hasKnownLength&&A.hasKnownLength())?A.getLengthSync():null}h.prototype={get body(){return this[N].body},get bodyUsed(){return this[N].disturbed},arrayBuffer(){return W.call(this).then((function(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}))},blob(){let e=this.headers&&this.headers.get("content-type")||"";return W.call(this).then((function(A){return Object.assign(new r([],{type:e.toLowerCase()}),{[d]:A})}))},json(){var e=this;return W.call(this).then((function(A){try{return JSON.parse(A.toString())}catch(A){return h.Promise.reject(new s(`invalid json response body at ${e.url} reason: ${A.message}`,"invalid-json"))}}))},text(){return W.call(this).then((function(e){return e.toString()}))},buffer(){return W.call(this)},textConverted(){var e=this;return W.call(this).then((function(A){return function(e,A){if("function"!=typeof Z)throw new Error("The package `encoding` must be installed to use the textConverted() function");const Y=A.get("content-type");let t,a,i="utf-8";Y&&(t=/charset=([^;]*)/i.exec(Y));a=e.slice(0,1024).toString(),!t&&a&&(t=/<meta.+?charset=(['"])(.+?)\1/i.exec(a));!t&&a&&(t=/<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(a),t||(t=/<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(a),t&&t.pop()),t&&(t=/charset=(.*)/i.exec(t.pop())));!t&&a&&(t=/<\?xml.+?encoding=(['"])(.+?)\1/i.exec(a));t&&(i=t.pop(),"gb2312"!==i&&"gbk"!==i||(i="gb18030"));return Z(e,"UTF-8",i).toString()}(A,e.headers)}))}},Object.defineProperties(h.prototype,{body:{enumerable:!0},bodyUsed:{enumerable:!0},arrayBuffer:{enumerable:!0},blob:{enumerable:!0},json:{enumerable:!0},text:{enumerable:!0}}),h.mixIn=function(e){for(const A of Object.getOwnPropertyNames(h.prototype))if(!(A in e)){const Y=Object.getOwnPropertyDescriptor(h.prototype,A);Object.defineProperty(e,A,Y)}},h.Promise=global.Promise;const X=/[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/,J=/[^\t\x20-\x7e\x80-\xff]/;function g(e){if(e=`${e}`,X.test(e)||""===e)throw new TypeError(`${e} is not a legal HTTP header name`)}function k(e){if(e=`${e}`,J.test(e))throw new TypeError(`${e} is not a legal HTTP header value`)}function f(e,A){A=A.toLowerCase();for(const Y in e)if(Y.toLowerCase()===A)return Y}const R=Symbol("map");class b{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;if(this[R]=Object.create(null),e instanceof b){const A=e.raw(),Y=Object.keys(A);for(const e of Y)for(const Y of A[e])this.append(e,Y)}else if(null==e);else{if("object"!=typeof e)throw new TypeError("Provided initializer must be an object");{const A=e[Symbol.iterator];if(null!=A){if("function"!=typeof A)throw new TypeError("Header pairs must be iterable");const Y=[];for(const A of e){if("object"!=typeof A||"function"!=typeof A[Symbol.iterator])throw new TypeError("Each header pair must be iterable");Y.push(Array.from(A))}for(const e of Y){if(2!==e.length)throw new TypeError("Each header pair must be a name/value tuple");this.append(e[0],e[1])}}else for(const A of Object.keys(e)){const Y=e[A];this.append(A,Y)}}}}get(e){g(e=`${e}`);const A=f(this[R],e);return void 0===A?null:this[R][A].join(", ")}forEach(e){let A=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0,Y=y(this),t=0;for(;t<Y.length;){var a=Y[t];const i=a[0],m=a[1];e.call(A,m,i,this),Y=y(this),t++}}set(e,A){A=`${A}`,g(e=`${e}`),k(A);const Y=f(this[R],e);this[R][void 0!==Y?Y:e]=[A]}append(e,A){A=`${A}`,g(e=`${e}`),k(A);const Y=f(this[R],e);void 0!==Y?this[R][Y].push(A):this[R][e]=[A]}has(e){return g(e=`${e}`),void 0!==f(this[R],e)}delete(e){g(e=`${e}`);const A=f(this[R],e);void 0!==A&&delete this[R][A]}raw(){return this[R]}keys(){return S(this,"key")}values(){return S(this,"value")}[Symbol.iterator](){return S(this,"key+value")}}function y(e){let A=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"key+value";const Y=Object.keys(e[R]).sort();return Y.map("key"===A?function(e){return e.toLowerCase()}:"value"===A?function(A){return e[R][A].join(", ")}:function(A){return[A.toLowerCase(),e[R][A].join(", ")]})}b.prototype.entries=b.prototype[Symbol.iterator],Object.defineProperty(b.prototype,Symbol.toStringTag,{value:"Headers",writable:!1,enumerable:!1,configurable:!0}),Object.defineProperties(b.prototype,{get:{enumerable:!0},forEach:{enumerable:!0},set:{enumerable:!0},append:{enumerable:!0},has:{enumerable:!0},delete:{enumerable:!0},keys:{enumerable:!0},values:{enumerable:!0},entries:{enumerable:!0}});const B=Symbol("internal");function S(e,A){const Y=Object.create(x);return Y[B]={target:e,kind:A,index:0},Y}const x=Object.setPrototypeOf({next(){if(!this||Object.getPrototypeOf(this)!==x)throw new TypeError("Value of `this` is not a HeadersIterator");var e=this[B];const A=e.target,Y=e.kind,t=e.index,a=y(A,Y);return t>=a.length?{value:void 0,done:!0}:(this[B].index=t+1,{value:a[t],done:!1})}},Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));function T(e){const A=Object.assign({__proto__:null},e[R]),Y=f(e[R],"Host");return void 0!==Y&&(A[Y]=A[Y][0]),A}Object.defineProperty(x,Symbol.toStringTag,{value:"HeadersIterator",writable:!1,enumerable:!1,configurable:!0});const q=Symbol("Response internals"),I=a.STATUS_CODES;class v{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,A=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};h.call(this,e,A);const Y=A.status||200,t=new b(A.headers);if(null!=e&&!t.has("Content-Type")){const A=G(e);A&&t.append("Content-Type",A)}this[q]={url:A.url,status:Y,statusText:A.statusText||I[Y],headers:t,counter:A.counter}}get url(){return this[q].url||""}get status(){return this[q].status}get ok(){return this[q].status>=200&&this[q].status<300}get redirected(){return this[q].counter>0}get statusText(){return this[q].statusText}get headers(){return this[q].headers}clone(){return new v(c(this),{url:this.url,status:this.status,statusText:this.statusText,headers:this.headers,ok:this.ok,redirected:this.redirected})}}h.mixIn(v.prototype),Object.defineProperties(v.prototype,{url:{enumerable:!0},status:{enumerable:!0},ok:{enumerable:!0},redirected:{enumerable:!0},statusText:{enumerable:!0},headers:{enumerable:!0},clone:{enumerable:!0}}),Object.defineProperty(v.prototype,Symbol.toStringTag,{value:"Response",writable:!1,enumerable:!1,configurable:!0});const w=Symbol("Request internals"),U=m.URL,K=i.parse,O=i.format;function D(e){return/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(e)&&(e=new U(e).toString()),K(e)}const C="destroy"in t.Readable.prototype;function z(e){return"object"==typeof e&&"object"==typeof e[w]}class H{constructor(e){let A,Y=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};z(e)?A=D(e.url):(A=e&&e.href?D(e.href):D(`${e}`),e={});let t=Y.method||e.method||"GET";if(t=t.toUpperCase(),(null!=Y.body||z(e)&&null!==e.body)&&("GET"===t||"HEAD"===t))throw new TypeError("Request with GET/HEAD method cannot have body");let a=null!=Y.body?Y.body:z(e)&&null!==e.body?c(e):null;h.call(this,a,{timeout:Y.timeout||e.timeout||0,size:Y.size||e.size||0});const i=new b(Y.headers||e.headers||{});if(null!=a&&!i.has("Content-Type")){const e=G(a);e&&i.append("Content-Type",e)}let m=z(e)?e.signal:null;if("signal"in Y&&(m=Y.signal),null!=m&&!function(e){const A=e&&"object"==typeof e&&Object.getPrototypeOf(e);return!(!A||"AbortSignal"!==A.constructor.name)}(m))throw new TypeError("Expected signal to be an instanceof AbortSignal");this[w]={method:t,redirect:Y.redirect||e.redirect||"follow",headers:i,parsedURL:A,signal:m},this.follow=void 0!==Y.follow?Y.follow:void 0!==e.follow?e.follow:20,this.compress=void 0!==Y.compress?Y.compress:void 0===e.compress||e.compress,this.counter=Y.counter||e.counter||0,this.agent=Y.agent||e.agent}get method(){return this[w].method}get url(){return O(this[w].parsedURL)}get headers(){return this[w].headers}get redirect(){return this[w].redirect}get signal(){return this[w].signal}clone(){return new H(this)}}function E(e){Error.call(this,e),this.type="aborted",this.message=e,Error.captureStackTrace(this,this.constructor)}h.mixIn(H.prototype),Object.defineProperty(H.prototype,Symbol.toStringTag,{value:"Request",writable:!1,enumerable:!1,configurable:!0}),Object.defineProperties(H.prototype,{method:{enumerable:!0},url:{enumerable:!0},headers:{enumerable:!0},redirect:{enumerable:!0},clone:{enumerable:!0},signal:{enumerable:!0}}),E.prototype=Object.create(Error.prototype),E.prototype.constructor=E,E.prototype.name="AbortError";const _=t.PassThrough,M=i.resolve;function L(e,A){if(!L.Promise)throw new Error("native promise missing, set fetch.Promise to your favorite alternative");return h.Promise=L.Promise,new L.Promise((function(Y,i){const m=new H(e,A),p=function(e){const A=e[w].parsedURL,Y=new b(e[w].headers);if(Y.has("Accept")||Y.set("Accept","*/*"),!A.protocol||!A.hostname)throw new TypeError("Only absolute URLs are supported");if(!/^https?:$/.test(A.protocol))throw new TypeError("Only HTTP(S) protocols are supported");if(e.signal&&e.body instanceof t.Readable&&!C)throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");let a=null;if(null==e.body&&/^(POST|PUT)$/i.test(e.method)&&(a="0"),null!=e.body){const A=F(e);"number"==typeof A&&(a=String(A))}a&&Y.set("Content-Length",a),Y.has("User-Agent")||Y.set("User-Agent","node-fetch/1.0 (+https://github.com/bitinn/node-fetch)"),e.compress&&!Y.has("Accept-Encoding")&&Y.set("Accept-Encoding","gzip,deflate");let i=e.agent;return"function"==typeof i&&(i=i(A)),Y.has("Connection")||i||Y.set("Connection","close"),Object.assign({},A,{method:e.method,headers:T(Y),agent:i})}(m),d=("https:"===p.protocol?n:a).request,o=m.signal;let r=null;const Z=function(){let e=new E("The user aborted a request.");i(e),m.body&&m.body instanceof t.Readable&&m.body.destroy(e),r&&r.body&&r.body.emit("error",e)};if(o&&o.aborted)return void Z();const N=function(){Z(),W()},j=d(p);let h;function W(){j.abort(),o&&o.removeEventListener("abort",N),clearTimeout(h)}o&&o.addEventListener("abort",N),m.timeout&&j.once("socket",(function(e){h=setTimeout((function(){i(new s(`network timeout at: ${m.url}`,"request-timeout")),W()}),m.timeout)})),j.on("error",(function(e){i(new s(`request to ${m.url} failed, reason: ${e.message}`,"system",e)),W()})),j.on("response",(function(e){clearTimeout(h);const A=function(e){const A=new b;for(const Y of Object.keys(e))if(!X.test(Y))if(Array.isArray(e[Y]))for(const t of e[Y])J.test(t)||(void 0===A[R][Y]?A[R][Y]=[t]:A[R][Y].push(t));else J.test(e[Y])||(A[R][Y]=[e[Y]]);return A}(e.headers);if(L.isRedirect(e.statusCode)){const t=A.get("Location"),a=null===t?null:M(m.url,t);switch(m.redirect){case"error":return i(new s(`uri requested responds with a redirect, redirect mode is set to error: ${m.url}`,"no-redirect")),void W();case"manual":if(null!==a)try{A.set("Location",a)}catch(e){i(e)}break;case"follow":if(null===a)break;if(m.counter>=m.follow)return i(new s(`maximum redirect reached at: ${m.url}`,"max-redirect")),void W();const t={headers:new b(m.headers),follow:m.follow,counter:m.counter+1,agent:m.agent,compress:m.compress,method:m.method,body:m.body,signal:m.signal,timeout:m.timeout,size:m.size};return 303!==e.statusCode&&m.body&&null===F(m)?(i(new s("Cannot follow redirect with body being a readable stream","unsupported-redirect")),void W()):(303!==e.statusCode&&(301!==e.statusCode&&302!==e.statusCode||"POST"!==m.method)||(t.method="GET",t.body=void 0,t.headers.delete("content-length")),Y(L(new H(a,t))),void W())}}e.once("end",(function(){o&&o.removeEventListener("abort",N)}));let t=e.pipe(new _);const a={url:m.url,status:e.statusCode,statusText:e.statusMessage,headers:A,size:m.size,timeout:m.timeout,counter:m.counter},n=A.get("Content-Encoding");if(!m.compress||"HEAD"===m.method||null===n||204===e.statusCode||304===e.statusCode)return r=new v(t,a),void Y(r);const p={flush:l.Z_SYNC_FLUSH,finishFlush:l.Z_SYNC_FLUSH};if("gzip"==n||"x-gzip"==n)return t=t.pipe(l.createGunzip(p)),r=new v(t,a),void Y(r);if("deflate"!=n&&"x-deflate"!=n){if("br"==n&&"function"==typeof l.createBrotliDecompress)return t=t.pipe(l.createBrotliDecompress()),r=new v(t,a),void Y(r);r=new v(t,a),Y(r)}else{e.pipe(new _).once("data",(function(e){t=8==(15&e[0])?t.pipe(l.createInflate()):t.pipe(l.createInflateRaw()),r=new v(t,a),Y(r)}))}})),function(e,A){const Y=A.body;null===Y?e.end():V(Y)?Y.stream().pipe(e):Buffer.isBuffer(Y)?(e.write(Y),e.end()):Y.pipe(e)}(j,m)}))}L.isRedirect=function(e){return 301===e||302===e||303===e||307===e||308===e},L.Promise=global.Promise;const P=L},2020:e=>{"use strict";e.exports=JSON.parse('[[[0,44],"disallowed_STD3_valid"],[[45,46],"valid"],[[47,47],"disallowed_STD3_valid"],[[48,57],"valid"],[[58,64],"disallowed_STD3_valid"],[[65,65],"mapped",[97]],[[66,66],"mapped",[98]],[[67,67],"mapped",[99]],[[68,68],"mapped",[100]],[[69,69],"mapped",[101]],[[70,70],"mapped",[102]],[[71,71],"mapped",[103]],[[72,72],"mapped",[104]],[[73,73],"mapped",[105]],[[74,74],"mapped",[106]],[[75,75],"mapped",[107]],[[76,76],"mapped",[108]],[[77,77],"mapped",[109]],[[78,78],"mapped",[110]],[[79,79],"mapped",[111]],[[80,80],"mapped",[112]],[[81,81],"mapped",[113]],[[82,82],"mapped",[114]],[[83,83],"mapped",[115]],[[84,84],"mapped",[116]],[[85,85],"mapped",[117]],[[86,86],"mapped",[118]],[[87,87],"mapped",[119]],[[88,88],"mapped",[120]],[[89,89],"mapped",[121]],[[90,90],"mapped",[122]],[[91,96],"disallowed_STD3_valid"],[[97,122],"valid"],[[123,127],"disallowed_STD3_valid"],[[128,159],"disallowed"],[[160,160],"disallowed_STD3_mapped",[32]],[[161,167],"valid",[],"NV8"],[[168,168],"disallowed_STD3_mapped",[32,776]],[[169,169],"valid",[],"NV8"],[[170,170],"mapped",[97]],[[171,172],"valid",[],"NV8"],[[173,173],"ignored"],[[174,174],"valid",[],"NV8"],[[175,175],"disallowed_STD3_mapped",[32,772]],[[176,177],"valid",[],"NV8"],[[178,178],"mapped",[50]],[[179,179],"mapped",[51]],[[180,180],"disallowed_STD3_mapped",[32,769]],[[181,181],"mapped",[956]],[[182,182],"valid",[],"NV8"],[[183,183],"valid"],[[184,184],"disallowed_STD3_mapped",[32,807]],[[185,185],"mapped",[49]],[[186,186],"mapped",[111]],[[187,187],"valid",[],"NV8"],[[188,188],"mapped",[49,8260,52]],[[189,189],"mapped",[49,8260,50]],[[190,190],"mapped",[51,8260,52]],[[191,191],"valid",[],"NV8"],[[192,192],"mapped",[224]],[[193,193],"mapped",[225]],[[194,194],"mapped",[226]],[[195,195],"mapped",[227]],[[196,196],"mapped",[228]],[[197,197],"mapped",[229]],[[198,198],"mapped",[230]],[[199,199],"mapped",[231]],[[200,200],"mapped",[232]],[[201,201],"mapped",[233]],[[202,202],"mapped",[234]],[[203,203],"mapped",[235]],[[204,204],"mapped",[236]],[[205,205],"mapped",[237]],[[206,206],"mapped",[238]],[[207,207],"mapped",[239]],[[208,208],"mapped",[240]],[[209,209],"mapped",[241]],[[210,210],"mapped",[242]],[[211,211],"mapped",[243]],[[212,212],"mapped",[244]],[[213,213],"mapped",[245]],[[214,214],"mapped",[246]],[[215,215],"valid",[],"NV8"],[[216,216],"mapped",[248]],[[217,217],"mapped",[249]],[[218,218],"mapped",[250]],[[219,219],"mapped",[251]],[[220,220],"mapped",[252]],[[221,221],"mapped",[253]],[[222,222],"mapped",[254]],[[223,223],"deviation",[115,115]],[[224,246],"valid"],[[247,247],"valid",[],"NV8"],[[248,255],"valid"],[[256,256],"mapped",[257]],[[257,257],"valid"],[[258,258],"mapped",[259]],[[259,259],"valid"],[[260,260],"mapped",[261]],[[261,261],"valid"],[[262,262],"mapped",[263]],[[263,263],"valid"],[[264,264],"mapped",[265]],[[265,265],"valid"],[[266,266],"mapped",[267]],[[267,267],"valid"],[[268,268],"mapped",[269]],[[269,269],"valid"],[[270,270],"mapped",[271]],[[271,271],"valid"],[[272,272],"mapped",[273]],[[273,273],"valid"],[[274,274],"mapped",[275]],[[275,275],"valid"],[[276,276],"mapped",[277]],[[277,277],"valid"],[[278,278],"mapped",[279]],[[279,279],"valid"],[[280,280],"mapped",[281]],[[281,281],"valid"],[[282,282],"mapped",[283]],[[283,283],"valid"],[[284,284],"mapped",[285]],[[285,285],"valid"],[[286,286],"mapped",[287]],[[287,287],"valid"],[[288,288],"mapped",[289]],[[289,289],"valid"],[[290,290],"mapped",[291]],[[291,291],"valid"],[[292,292],"mapped",[293]],[[293,293],"valid"],[[294,294],"mapped",[295]],[[295,295],"valid"],[[296,296],"mapped",[297]],[[297,297],"valid"],[[298,298],"mapped",[299]],[[299,299],"valid"],[[300,300],"mapped",[301]],[[301,301],"valid"],[[302,302],"mapped",[303]],[[303,303],"valid"],[[304,304],"mapped",[105,775]],[[305,305],"valid"],[[306,307],"mapped",[105,106]],[[308,308],"mapped",[309]],[[309,309],"valid"],[[310,310],"mapped",[311]],[[311,312],"valid"],[[313,313],"mapped",[314]],[[314,314],"valid"],[[315,315],"mapped",[316]],[[316,316],"valid"],[[317,317],"mapped",[318]],[[318,318],"valid"],[[319,320],"mapped",[108,183]],[[321,321],"mapped",[322]],[[322,322],"valid"],[[323,323],"mapped",[324]],[[324,324],"valid"],[[325,325],"mapped",[326]],[[326,326],"valid"],[[327,327],"mapped",[328]],[[328,328],"valid"],[[329,329],"mapped",[700,110]],[[330,330],"mapped",[331]],[[331,331],"valid"],[[332,332],"mapped",[333]],[[333,333],"valid"],[[334,334],"mapped",[335]],[[335,335],"valid"],[[336,336],"mapped",[337]],[[337,337],"valid"],[[338,338],"mapped",[339]],[[339,339],"valid"],[[340,340],"mapped",[341]],[[341,341],"valid"],[[342,342],"mapped",[343]],[[343,343],"valid"],[[344,344],"mapped",[345]],[[345,345],"valid"],[[346,346],"mapped",[347]],[[347,347],"valid"],[[348,348],"mapped",[349]],[[349,349],"valid"],[[350,350],"mapped",[351]],[[351,351],"valid"],[[352,352],"mapped",[353]],[[353,353],"valid"],[[354,354],"mapped",[355]],[[355,355],"valid"],[[356,356],"mapped",[357]],[[357,357],"valid"],[[358,358],"mapped",[359]],[[359,359],"valid"],[[360,360],"mapped",[361]],[[361,361],"valid"],[[362,362],"mapped",[363]],[[363,363],"valid"],[[364,364],"mapped",[365]],[[365,365],"valid"],[[366,366],"mapped",[367]],[[367,367],"valid"],[[368,368],"mapped",[369]],[[369,369],"valid"],[[370,370],"mapped",[371]],[[371,371],"valid"],[[372,372],"mapped",[373]],[[373,373],"valid"],[[374,374],"mapped",[375]],[[375,375],"valid"],[[376,376],"mapped",[255]],[[377,377],"mapped",[378]],[[378,378],"valid"],[[379,379],"mapped",[380]],[[380,380],"valid"],[[381,381],"mapped",[382]],[[382,382],"valid"],[[383,383],"mapped",[115]],[[384,384],"valid"],[[385,385],"mapped",[595]],[[386,386],"mapped",[387]],[[387,387],"valid"],[[388,388],"mapped",[389]],[[389,389],"valid"],[[390,390],"mapped",[596]],[[391,391],"mapped",[392]],[[392,392],"valid"],[[393,393],"mapped",[598]],[[394,394],"mapped",[599]],[[395,395],"mapped",[396]],[[396,397],"valid"],[[398,398],"mapped",[477]],[[399,399],"mapped",[601]],[[400,400],"mapped",[603]],[[401,401],"mapped",[402]],[[402,402],"valid"],[[403,403],"mapped",[608]],[[404,404],"mapped",[611]],[[405,405],"valid"],[[406,406],"mapped",[617]],[[407,407],"mapped",[616]],[[408,408],"mapped",[409]],[[409,411],"valid"],[[412,412],"mapped",[623]],[[413,413],"mapped",[626]],[[414,414],"valid"],[[415,415],"mapped",[629]],[[416,416],"mapped",[417]],[[417,417],"valid"],[[418,418],"mapped",[419]],[[419,419],"valid"],[[420,420],"mapped",[421]],[[421,421],"valid"],[[422,422],"mapped",[640]],[[423,423],"mapped",[424]],[[424,424],"valid"],[[425,425],"mapped",[643]],[[426,427],"valid"],[[428,428],"mapped",[429]],[[429,429],"valid"],[[430,430],"mapped",[648]],[[431,431],"mapped",[432]],[[432,432],"valid"],[[433,433],"mapped",[650]],[[434,434],"mapped",[651]],[[435,435],"mapped",[436]],[[436,436],"valid"],[[437,437],"mapped",[438]],[[438,438],"valid"],[[439,439],"mapped",[658]],[[440,440],"mapped",[441]],[[441,443],"valid"],[[444,444],"mapped",[445]],[[445,451],"valid"],[[452,454],"mapped",[100,382]],[[455,457],"mapped",[108,106]],[[458,460],"mapped",[110,106]],[[461,461],"mapped",[462]],[[462,462],"valid"],[[463,463],"mapped",[464]],[[464,464],"valid"],[[465,465],"mapped",[466]],[[466,466],"valid"],[[467,467],"mapped",[468]],[[468,468],"valid"],[[469,469],"mapped",[470]],[[470,470],"valid"],[[471,471],"mapped",[472]],[[472,472],"valid"],[[473,473],"mapped",[474]],[[474,474],"valid"],[[475,475],"mapped",[476]],[[476,477],"valid"],[[478,478],"mapped",[479]],[[479,479],"valid"],[[480,480],"mapped",[481]],[[481,481],"valid"],[[482,482],"mapped",[483]],[[483,483],"valid"],[[484,484],"mapped",[485]],[[485,485],"valid"],[[486,486],"mapped",[487]],[[487,487],"valid"],[[488,488],"mapped",[489]],[[489,489],"valid"],[[490,490],"mapped",[491]],[[491,491],"valid"],[[492,492],"mapped",[493]],[[493,493],"valid"],[[494,494],"mapped",[495]],[[495,496],"valid"],[[497,499],"mapped",[100,122]],[[500,500],"mapped",[501]],[[501,501],"valid"],[[502,502],"mapped",[405]],[[503,503],"mapped",[447]],[[504,504],"mapped",[505]],[[505,505],"valid"],[[506,506],"mapped",[507]],[[507,507],"valid"],[[508,508],"mapped",[509]],[[509,509],"valid"],[[510,510],"mapped",[511]],[[511,511],"valid"],[[512,512],"mapped",[513]],[[513,513],"valid"],[[514,514],"mapped",[515]],[[515,515],"valid"],[[516,516],"mapped",[517]],[[517,517],"valid"],[[518,518],"mapped",[519]],[[519,519],"valid"],[[520,520],"mapped",[521]],[[521,521],"valid"],[[522,522],"mapped",[523]],[[523,523],"valid"],[[524,524],"mapped",[525]],[[525,525],"valid"],[[526,526],"mapped",[527]],[[527,527],"valid"],[[528,528],"mapped",[529]],[[529,529],"valid"],[[530,530],"mapped",[531]],[[531,531],"valid"],[[532,532],"mapped",[533]],[[533,533],"valid"],[[534,534],"mapped",[535]],[[535,535],"valid"],[[536,536],"mapped",[537]],[[537,537],"valid"],[[538,538],"mapped",[539]],[[539,539],"valid"],[[540,540],"mapped",[541]],[[541,541],"valid"],[[542,542],"mapped",[543]],[[543,543],"valid"],[[544,544],"mapped",[414]],[[545,545],"valid"],[[546,546],"mapped",[547]],[[547,547],"valid"],[[548,548],"mapped",[549]],[[549,549],"valid"],[[550,550],"mapped",[551]],[[551,551],"valid"],[[552,552],"mapped",[553]],[[553,553],"valid"],[[554,554],"mapped",[555]],[[555,555],"valid"],[[556,556],"mapped",[557]],[[557,557],"valid"],[[558,558],"mapped",[559]],[[559,559],"valid"],[[560,560],"mapped",[561]],[[561,561],"valid"],[[562,562],"mapped",[563]],[[563,563],"valid"],[[564,566],"valid"],[[567,569],"valid"],[[570,570],"mapped",[11365]],[[571,571],"mapped",[572]],[[572,572],"valid"],[[573,573],"mapped",[410]],[[574,574],"mapped",[11366]],[[575,576],"valid"],[[577,577],"mapped",[578]],[[578,578],"valid"],[[579,579],"mapped",[384]],[[580,580],"mapped",[649]],[[581,581],"mapped",[652]],[[582,582],"mapped",[583]],[[583,583],"valid"],[[584,584],"mapped",[585]],[[585,585],"valid"],[[586,586],"mapped",[587]],[[587,587],"valid"],[[588,588],"mapped",[589]],[[589,589],"valid"],[[590,590],"mapped",[591]],[[591,591],"valid"],[[592,680],"valid"],[[681,685],"valid"],[[686,687],"valid"],[[688,688],"mapped",[104]],[[689,689],"mapped",[614]],[[690,690],"mapped",[106]],[[691,691],"mapped",[114]],[[692,692],"mapped",[633]],[[693,693],"mapped",[635]],[[694,694],"mapped",[641]],[[695,695],"mapped",[119]],[[696,696],"mapped",[121]],[[697,705],"valid"],[[706,709],"valid",[],"NV8"],[[710,721],"valid"],[[722,727],"valid",[],"NV8"],[[728,728],"disallowed_STD3_mapped",[32,774]],[[729,729],"disallowed_STD3_mapped",[32,775]],[[730,730],"disallowed_STD3_mapped",[32,778]],[[731,731],"disallowed_STD3_mapped",[32,808]],[[732,732],"disallowed_STD3_mapped",[32,771]],[[733,733],"disallowed_STD3_mapped",[32,779]],[[734,734],"valid",[],"NV8"],[[735,735],"valid",[],"NV8"],[[736,736],"mapped",[611]],[[737,737],"mapped",[108]],[[738,738],"mapped",[115]],[[739,739],"mapped",[120]],[[740,740],"mapped",[661]],[[741,745],"valid",[],"NV8"],[[746,747],"valid",[],"NV8"],[[748,748],"valid"],[[749,749],"valid",[],"NV8"],[[750,750],"valid"],[[751,767],"valid",[],"NV8"],[[768,831],"valid"],[[832,832],"mapped",[768]],[[833,833],"mapped",[769]],[[834,834],"valid"],[[835,835],"mapped",[787]],[[836,836],"mapped",[776,769]],[[837,837],"mapped",[953]],[[838,846],"valid"],[[847,847],"ignored"],[[848,855],"valid"],[[856,860],"valid"],[[861,863],"valid"],[[864,865],"valid"],[[866,866],"valid"],[[867,879],"valid"],[[880,880],"mapped",[881]],[[881,881],"valid"],[[882,882],"mapped",[883]],[[883,883],"valid"],[[884,884],"mapped",[697]],[[885,885],"valid"],[[886,886],"mapped",[887]],[[887,887],"valid"],[[888,889],"disallowed"],[[890,890],"disallowed_STD3_mapped",[32,953]],[[891,893],"valid"],[[894,894],"disallowed_STD3_mapped",[59]],[[895,895],"mapped",[1011]],[[896,899],"disallowed"],[[900,900],"disallowed_STD3_mapped",[32,769]],[[901,901],"disallowed_STD3_mapped",[32,776,769]],[[902,902],"mapped",[940]],[[903,903],"mapped",[183]],[[904,904],"mapped",[941]],[[905,905],"mapped",[942]],[[906,906],"mapped",[943]],[[907,907],"disallowed"],[[908,908],"mapped",[972]],[[909,909],"disallowed"],[[910,910],"mapped",[973]],[[911,911],"mapped",[974]],[[912,912],"valid"],[[913,913],"mapped",[945]],[[914,914],"mapped",[946]],[[915,915],"mapped",[947]],[[916,916],"mapped",[948]],[[917,917],"mapped",[949]],[[918,918],"mapped",[950]],[[919,919],"mapped",[951]],[[920,920],"mapped",[952]],[[921,921],"mapped",[953]],[[922,922],"mapped",[954]],[[923,923],"mapped",[955]],[[924,924],"mapped",[956]],[[925,925],"mapped",[957]],[[926,926],"mapped",[958]],[[927,927],"mapped",[959]],[[928,928],"mapped",[960]],[[929,929],"mapped",[961]],[[930,930],"disallowed"],[[931,931],"mapped",[963]],[[932,932],"mapped",[964]],[[933,933],"mapped",[965]],[[934,934],"mapped",[966]],[[935,935],"mapped",[967]],[[936,936],"mapped",[968]],[[937,937],"mapped",[969]],[[938,938],"mapped",[970]],[[939,939],"mapped",[971]],[[940,961],"valid"],[[962,962],"deviation",[963]],[[963,974],"valid"],[[975,975],"mapped",[983]],[[976,976],"mapped",[946]],[[977,977],"mapped",[952]],[[978,978],"mapped",[965]],[[979,979],"mapped",[973]],[[980,980],"mapped",[971]],[[981,981],"mapped",[966]],[[982,982],"mapped",[960]],[[983,983],"valid"],[[984,984],"mapped",[985]],[[985,985],"valid"],[[986,986],"mapped",[987]],[[987,987],"valid"],[[988,988],"mapped",[989]],[[989,989],"valid"],[[990,990],"mapped",[991]],[[991,991],"valid"],[[992,992],"mapped",[993]],[[993,993],"valid"],[[994,994],"mapped",[995]],[[995,995],"valid"],[[996,996],"mapped",[997]],[[997,997],"valid"],[[998,998],"mapped",[999]],[[999,999],"valid"],[[1000,1000],"mapped",[1001]],[[1001,1001],"valid"],[[1002,1002],"mapped",[1003]],[[1003,1003],"valid"],[[1004,1004],"mapped",[1005]],[[1005,1005],"valid"],[[1006,1006],"mapped",[1007]],[[1007,1007],"valid"],[[1008,1008],"mapped",[954]],[[1009,1009],"mapped",[961]],[[1010,1010],"mapped",[963]],[[1011,1011],"valid"],[[1012,1012],"mapped",[952]],[[1013,1013],"mapped",[949]],[[1014,1014],"valid",[],"NV8"],[[1015,1015],"mapped",[1016]],[[1016,1016],"valid"],[[1017,1017],"mapped",[963]],[[1018,1018],"mapped",[1019]],[[1019,1019],"valid"],[[1020,1020],"valid"],[[1021,1021],"mapped",[891]],[[1022,1022],"mapped",[892]],[[1023,1023],"mapped",[893]],[[1024,1024],"mapped",[1104]],[[1025,1025],"mapped",[1105]],[[1026,1026],"mapped",[1106]],[[1027,1027],"mapped",[1107]],[[1028,1028],"mapped",[1108]],[[1029,1029],"mapped",[1109]],[[1030,1030],"mapped",[1110]],[[1031,1031],"mapped",[1111]],[[1032,1032],"mapped",[1112]],[[1033,1033],"mapped",[1113]],[[1034,1034],"mapped",[1114]],[[1035,1035],"mapped",[1115]],[[1036,1036],"mapped",[1116]],[[1037,1037],"mapped",[1117]],[[1038,1038],"mapped",[1118]],[[1039,1039],"mapped",[1119]],[[1040,1040],"mapped",[1072]],[[1041,1041],"mapped",[1073]],[[1042,1042],"mapped",[1074]],[[1043,1043],"mapped",[1075]],[[1044,1044],"mapped",[1076]],[[1045,1045],"mapped",[1077]],[[1046,1046],"mapped",[1078]],[[1047,1047],"mapped",[1079]],[[1048,1048],"mapped",[1080]],[[1049,1049],"mapped",[1081]],[[1050,1050],"mapped",[1082]],[[1051,1051],"mapped",[1083]],[[1052,1052],"mapped",[1084]],[[1053,1053],"mapped",[1085]],[[1054,1054],"mapped",[1086]],[[1055,1055],"mapped",[1087]],[[1056,1056],"mapped",[1088]],[[1057,1057],"mapped",[1089]],[[1058,1058],"mapped",[1090]],[[1059,1059],"mapped",[1091]],[[1060,1060],"mapped",[1092]],[[1061,1061],"mapped",[1093]],[[1062,1062],"mapped",[1094]],[[1063,1063],"mapped",[1095]],[[1064,1064],"mapped",[1096]],[[1065,1065],"mapped",[1097]],[[1066,1066],"mapped",[1098]],[[1067,1067],"mapped",[1099]],[[1068,1068],"mapped",[1100]],[[1069,1069],"mapped",[1101]],[[1070,1070],"mapped",[1102]],[[1071,1071],"mapped",[1103]],[[1072,1103],"valid"],[[1104,1104],"valid"],[[1105,1116],"valid"],[[1117,1117],"valid"],[[1118,1119],"valid"],[[1120,1120],"mapped",[1121]],[[1121,1121],"valid"],[[1122,1122],"mapped",[1123]],[[1123,1123],"valid"],[[1124,1124],"mapped",[1125]],[[1125,1125],"valid"],[[1126,1126],"mapped",[1127]],[[1127,1127],"valid"],[[1128,1128],"mapped",[1129]],[[1129,1129],"valid"],[[1130,1130],"mapped",[1131]],[[1131,1131],"valid"],[[1132,1132],"mapped",[1133]],[[1133,1133],"valid"],[[1134,1134],"mapped",[1135]],[[1135,1135],"valid"],[[1136,1136],"mapped",[1137]],[[1137,1137],"valid"],[[1138,1138],"mapped",[1139]],[[1139,1139],"valid"],[[1140,1140],"mapped",[1141]],[[1141,1141],"valid"],[[1142,1142],"mapped",[1143]],[[1143,1143],"valid"],[[1144,1144],"mapped",[1145]],[[1145,1145],"valid"],[[1146,1146],"mapped",[1147]],[[1147,1147],"valid"],[[1148,1148],"mapped",[1149]],[[1149,1149],"valid"],[[1150,1150],"mapped",[1151]],[[1151,1151],"valid"],[[1152,1152],"mapped",[1153]],[[1153,1153],"valid"],[[1154,1154],"valid",[],"NV8"],[[1155,1158],"valid"],[[1159,1159],"valid"],[[1160,1161],"valid",[],"NV8"],[[1162,1162],"mapped",[1163]],[[1163,1163],"valid"],[[1164,1164],"mapped",[1165]],[[1165,1165],"valid"],[[1166,1166],"mapped",[1167]],[[1167,1167],"valid"],[[1168,1168],"mapped",[1169]],[[1169,1169],"valid"],[[1170,1170],"mapped",[1171]],[[1171,1171],"valid"],[[1172,1172],"mapped",[1173]],[[1173,1173],"valid"],[[1174,1174],"mapped",[1175]],[[1175,1175],"valid"],[[1176,1176],"mapped",[1177]],[[1177,1177],"valid"],[[1178,1178],"mapped",[1179]],[[1179,1179],"valid"],[[1180,1180],"mapped",[1181]],[[1181,1181],"valid"],[[1182,1182],"mapped",[1183]],[[1183,1183],"valid"],[[1184,1184],"mapped",[1185]],[[1185,1185],"valid"],[[1186,1186],"mapped",[1187]],[[1187,1187],"valid"],[[1188,1188],"mapped",[1189]],[[1189,1189],"valid"],[[1190,1190],"mapped",[1191]],[[1191,1191],"valid"],[[1192,1192],"mapped",[1193]],[[1193,1193],"valid"],[[1194,1194],"mapped",[1195]],[[1195,1195],"valid"],[[1196,1196],"mapped",[1197]],[[1197,1197],"valid"],[[1198,1198],"mapped",[1199]],[[1199,1199],"valid"],[[1200,1200],"mapped",[1201]],[[1201,1201],"valid"],[[1202,1202],"mapped",[1203]],[[1203,1203],"valid"],[[1204,1204],"mapped",[1205]],[[1205,1205],"valid"],[[1206,1206],"mapped",[1207]],[[1207,1207],"valid"],[[1208,1208],"mapped",[1209]],[[1209,1209],"valid"],[[1210,1210],"mapped",[1211]],[[1211,1211],"valid"],[[1212,1212],"mapped",[1213]],[[1213,1213],"valid"],[[1214,1214],"mapped",[1215]],[[1215,1215],"valid"],[[1216,1216],"disallowed"],[[1217,1217],"mapped",[1218]],[[1218,1218],"valid"],[[1219,1219],"mapped",[1220]],[[1220,1220],"valid"],[[1221,1221],"mapped",[1222]],[[1222,1222],"valid"],[[1223,1223],"mapped",[1224]],[[1224,1224],"valid"],[[1225,1225],"mapped",[1226]],[[1226,1226],"valid"],[[1227,1227],"mapped",[1228]],[[1228,1228],"valid"],[[1229,1229],"mapped",[1230]],[[1230,1230],"valid"],[[1231,1231],"valid"],[[1232,1232],"mapped",[1233]],[[1233,1233],"valid"],[[1234,1234],"mapped",[1235]],[[1235,1235],"valid"],[[1236,1236],"mapped",[1237]],[[1237,1237],"valid"],[[1238,1238],"mapped",[1239]],[[1239,1239],"valid"],[[1240,1240],"mapped",[1241]],[[1241,1241],"valid"],[[1242,1242],"mapped",[1243]],[[1243,1243],"valid"],[[1244,1244],"mapped",[1245]],[[1245,1245],"valid"],[[1246,1246],"mapped",[1247]],[[1247,1247],"valid"],[[1248,1248],"mapped",[1249]],[[1249,1249],"valid"],[[1250,1250],"mapped",[1251]],[[1251,1251],"valid"],[[1252,1252],"mapped",[1253]],[[1253,1253],"valid"],[[1254,1254],"mapped",[1255]],[[1255,1255],"valid"],[[1256,1256],"mapped",[1257]],[[1257,1257],"valid"],[[1258,1258],"mapped",[1259]],[[1259,1259],"valid"],[[1260,1260],"mapped",[1261]],[[1261,1261],"valid"],[[1262,1262],"mapped",[1263]],[[1263,1263],"valid"],[[1264,1264],"mapped",[1265]],[[1265,1265],"valid"],[[1266,1266],"mapped",[1267]],[[1267,1267],"valid"],[[1268,1268],"mapped",[1269]],[[1269,1269],"valid"],[[1270,1270],"mapped",[1271]],[[1271,1271],"valid"],[[1272,1272],"mapped",[1273]],[[1273,1273],"valid"],[[1274,1274],"mapped",[1275]],[[1275,1275],"valid"],[[1276,1276],"mapped",[1277]],[[1277,1277],"valid"],[[1278,1278],"mapped",[1279]],[[1279,1279],"valid"],[[1280,1280],"mapped",[1281]],[[1281,1281],"valid"],[[1282,1282],"mapped",[1283]],[[1283,1283],"valid"],[[1284,1284],"mapped",[1285]],[[1285,1285],"valid"],[[1286,1286],"mapped",[1287]],[[1287,1287],"valid"],[[1288,1288],"mapped",[1289]],[[1289,1289],"valid"],[[1290,1290],"mapped",[1291]],[[1291,1291],"valid"],[[1292,1292],"mapped",[1293]],[[1293,1293],"valid"],[[1294,1294],"mapped",[1295]],[[1295,1295],"valid"],[[1296,1296],"mapped",[1297]],[[1297,1297],"valid"],[[1298,1298],"mapped",[1299]],[[1299,1299],"valid"],[[1300,1300],"mapped",[1301]],[[1301,1301],"valid"],[[1302,1302],"mapped",[1303]],[[1303,1303],"valid"],[[1304,1304],"mapped",[1305]],[[1305,1305],"valid"],[[1306,1306],"mapped",[1307]],[[1307,1307],"valid"],[[1308,1308],"mapped",[1309]],[[1309,1309],"valid"],[[1310,1310],"mapped",[1311]],[[1311,1311],"valid"],[[1312,1312],"mapped",[1313]],[[1313,1313],"valid"],[[1314,1314],"mapped",[1315]],[[1315,1315],"valid"],[[1316,1316],"mapped",[1317]],[[1317,1317],"valid"],[[1318,1318],"mapped",[1319]],[[1319,1319],"valid"],[[1320,1320],"mapped",[1321]],[[1321,1321],"valid"],[[1322,1322],"mapped",[1323]],[[1323,1323],"valid"],[[1324,1324],"mapped",[1325]],[[1325,1325],"valid"],[[1326,1326],"mapped",[1327]],[[1327,1327],"valid"],[[1328,1328],"disallowed"],[[1329,1329],"mapped",[1377]],[[1330,1330],"mapped",[1378]],[[1331,1331],"mapped",[1379]],[[1332,1332],"mapped",[1380]],[[1333,1333],"mapped",[1381]],[[1334,1334],"mapped",[1382]],[[1335,1335],"mapped",[1383]],[[1336,1336],"mapped",[1384]],[[1337,1337],"mapped",[1385]],[[1338,1338],"mapped",[1386]],[[1339,1339],"mapped",[1387]],[[1340,1340],"mapped",[1388]],[[1341,1341],"mapped",[1389]],[[1342,1342],"mapped",[1390]],[[1343,1343],"mapped",[1391]],[[1344,1344],"mapped",[1392]],[[1345,1345],"mapped",[1393]],[[1346,1346],"mapped",[1394]],[[1347,1347],"mapped",[1395]],[[1348,1348],"mapped",[1396]],[[1349,1349],"mapped",[1397]],[[1350,1350],"mapped",[1398]],[[1351,1351],"mapped",[1399]],[[1352,1352],"mapped",[1400]],[[1353,1353],"mapped",[1401]],[[1354,1354],"mapped",[1402]],[[1355,1355],"mapped",[1403]],[[1356,1356],"mapped",[1404]],[[1357,1357],"mapped",[1405]],[[1358,1358],"mapped",[1406]],[[1359,1359],"mapped",[1407]],[[1360,1360],"mapped",[1408]],[[1361,1361],"mapped",[1409]],[[1362,1362],"mapped",[1410]],[[1363,1363],"mapped",[1411]],[[1364,1364],"mapped",[1412]],[[1365,1365],"mapped",[1413]],[[1366,1366],"mapped",[1414]],[[1367,1368],"disallowed"],[[1369,1369],"valid"],[[1370,1375],"valid",[],"NV8"],[[1376,1376],"disallowed"],[[1377,1414],"valid"],[[1415,1415],"mapped",[1381,1410]],[[1416,1416],"disallowed"],[[1417,1417],"valid",[],"NV8"],[[1418,1418],"valid",[],"NV8"],[[1419,1420],"disallowed"],[[1421,1422],"valid",[],"NV8"],[[1423,1423],"valid",[],"NV8"],[[1424,1424],"disallowed"],[[1425,1441],"valid"],[[1442,1442],"valid"],[[1443,1455],"valid"],[[1456,1465],"valid"],[[1466,1466],"valid"],[[1467,1469],"valid"],[[1470,1470],"valid",[],"NV8"],[[1471,1471],"valid"],[[1472,1472],"valid",[],"NV8"],[[1473,1474],"valid"],[[1475,1475],"valid",[],"NV8"],[[1476,1476],"valid"],[[1477,1477],"valid"],[[1478,1478],"valid",[],"NV8"],[[1479,1479],"valid"],[[1480,1487],"disallowed"],[[1488,1514],"valid"],[[1515,1519],"disallowed"],[[1520,1524],"valid"],[[1525,1535],"disallowed"],[[1536,1539],"disallowed"],[[1540,1540],"disallowed"],[[1541,1541],"disallowed"],[[1542,1546],"valid",[],"NV8"],[[1547,1547],"valid",[],"NV8"],[[1548,1548],"valid",[],"NV8"],[[1549,1551],"valid",[],"NV8"],[[1552,1557],"valid"],[[1558,1562],"valid"],[[1563,1563],"valid",[],"NV8"],[[1564,1564],"disallowed"],[[1565,1565],"disallowed"],[[1566,1566],"valid",[],"NV8"],[[1567,1567],"valid",[],"NV8"],[[1568,1568],"valid"],[[1569,1594],"valid"],[[1595,1599],"valid"],[[1600,1600],"valid",[],"NV8"],[[1601,1618],"valid"],[[1619,1621],"valid"],[[1622,1624],"valid"],[[1625,1630],"valid"],[[1631,1631],"valid"],[[1632,1641],"valid"],[[1642,1645],"valid",[],"NV8"],[[1646,1647],"valid"],[[1648,1652],"valid"],[[1653,1653],"mapped",[1575,1652]],[[1654,1654],"mapped",[1608,1652]],[[1655,1655],"mapped",[1735,1652]],[[1656,1656],"mapped",[1610,1652]],[[1657,1719],"valid"],[[1720,1721],"valid"],[[1722,1726],"valid"],[[1727,1727],"valid"],[[1728,1742],"valid"],[[1743,1743],"valid"],[[1744,1747],"valid"],[[1748,1748],"valid",[],"NV8"],[[1749,1756],"valid"],[[1757,1757],"disallowed"],[[1758,1758],"valid",[],"NV8"],[[1759,1768],"valid"],[[1769,1769],"valid",[],"NV8"],[[1770,1773],"valid"],[[1774,1775],"valid"],[[1776,1785],"valid"],[[1786,1790],"valid"],[[1791,1791],"valid"],[[1792,1805],"valid",[],"NV8"],[[1806,1806],"disallowed"],[[1807,1807],"disallowed"],[[1808,1836],"valid"],[[1837,1839],"valid"],[[1840,1866],"valid"],[[1867,1868],"disallowed"],[[1869,1871],"valid"],[[1872,1901],"valid"],[[1902,1919],"valid"],[[1920,1968],"valid"],[[1969,1969],"valid"],[[1970,1983],"disallowed"],[[1984,2037],"valid"],[[2038,2042],"valid",[],"NV8"],[[2043,2047],"disallowed"],[[2048,2093],"valid"],[[2094,2095],"disallowed"],[[2096,2110],"valid",[],"NV8"],[[2111,2111],"disallowed"],[[2112,2139],"valid"],[[2140,2141],"disallowed"],[[2142,2142],"valid",[],"NV8"],[[2143,2207],"disallowed"],[[2208,2208],"valid"],[[2209,2209],"valid"],[[2210,2220],"valid"],[[2221,2226],"valid"],[[2227,2228],"valid"],[[2229,2274],"disallowed"],[[2275,2275],"valid"],[[2276,2302],"valid"],[[2303,2303],"valid"],[[2304,2304],"valid"],[[2305,2307],"valid"],[[2308,2308],"valid"],[[2309,2361],"valid"],[[2362,2363],"valid"],[[2364,2381],"valid"],[[2382,2382],"valid"],[[2383,2383],"valid"],[[2384,2388],"valid"],[[2389,2389],"valid"],[[2390,2391],"valid"],[[2392,2392],"mapped",[2325,2364]],[[2393,2393],"mapped",[2326,2364]],[[2394,2394],"mapped",[2327,2364]],[[2395,2395],"mapped",[2332,2364]],[[2396,2396],"mapped",[2337,2364]],[[2397,2397],"mapped",[2338,2364]],[[2398,2398],"mapped",[2347,2364]],[[2399,2399],"mapped",[2351,2364]],[[2400,2403],"valid"],[[2404,2405],"valid",[],"NV8"],[[2406,2415],"valid"],[[2416,2416],"valid",[],"NV8"],[[2417,2418],"valid"],[[2419,2423],"valid"],[[2424,2424],"valid"],[[2425,2426],"valid"],[[2427,2428],"valid"],[[2429,2429],"valid"],[[2430,2431],"valid"],[[2432,2432],"valid"],[[2433,2435],"valid"],[[2436,2436],"disallowed"],[[2437,2444],"valid"],[[2445,2446],"disallowed"],[[2447,2448],"valid"],[[2449,2450],"disallowed"],[[2451,2472],"valid"],[[2473,2473],"disallowed"],[[2474,2480],"valid"],[[2481,2481],"disallowed"],[[2482,2482],"valid"],[[2483,2485],"disallowed"],[[2486,2489],"valid"],[[2490,2491],"disallowed"],[[2492,2492],"valid"],[[2493,2493],"valid"],[[2494,2500],"valid"],[[2501,2502],"disallowed"],[[2503,2504],"valid"],[[2505,2506],"disallowed"],[[2507,2509],"valid"],[[2510,2510],"valid"],[[2511,2518],"disallowed"],[[2519,2519],"valid"],[[2520,2523],"disallowed"],[[2524,2524],"mapped",[2465,2492]],[[2525,2525],"mapped",[2466,2492]],[[2526,2526],"disallowed"],[[2527,2527],"mapped",[2479,2492]],[[2528,2531],"valid"],[[2532,2533],"disallowed"],[[2534,2545],"valid"],[[2546,2554],"valid",[],"NV8"],[[2555,2555],"valid",[],"NV8"],[[2556,2560],"disallowed"],[[2561,2561],"valid"],[[2562,2562],"valid"],[[2563,2563],"valid"],[[2564,2564],"disallowed"],[[2565,2570],"valid"],[[2571,2574],"disallowed"],[[2575,2576],"valid"],[[2577,2578],"disallowed"],[[2579,2600],"valid"],[[2601,2601],"disallowed"],[[2602,2608],"valid"],[[2609,2609],"disallowed"],[[2610,2610],"valid"],[[2611,2611],"mapped",[2610,2620]],[[2612,2612],"disallowed"],[[2613,2613],"valid"],[[2614,2614],"mapped",[2616,2620]],[[2615,2615],"disallowed"],[[2616,2617],"valid"],[[2618,2619],"disallowed"],[[2620,2620],"valid"],[[2621,2621],"disallowed"],[[2622,2626],"valid"],[[2627,2630],"disallowed"],[[2631,2632],"valid"],[[2633,2634],"disallowed"],[[2635,2637],"valid"],[[2638,2640],"disallowed"],[[2641,2641],"valid"],[[2642,2648],"disallowed"],[[2649,2649],"mapped",[2582,2620]],[[2650,2650],"mapped",[2583,2620]],[[2651,2651],"mapped",[2588,2620]],[[2652,2652],"valid"],[[2653,2653],"disallowed"],[[2654,2654],"mapped",[2603,2620]],[[2655,2661],"disallowed"],[[2662,2676],"valid"],[[2677,2677],"valid"],[[2678,2688],"disallowed"],[[2689,2691],"valid"],[[2692,2692],"disallowed"],[[2693,2699],"valid"],[[2700,2700],"valid"],[[2701,2701],"valid"],[[2702,2702],"disallowed"],[[2703,2705],"valid"],[[2706,2706],"disallowed"],[[2707,2728],"valid"],[[2729,2729],"disallowed"],[[2730,2736],"valid"],[[2737,2737],"disallowed"],[[2738,2739],"valid"],[[2740,2740],"disallowed"],[[2741,2745],"valid"],[[2746,2747],"disallowed"],[[2748,2757],"valid"],[[2758,2758],"disallowed"],[[2759,2761],"valid"],[[2762,2762],"disallowed"],[[2763,2765],"valid"],[[2766,2767],"disallowed"],[[2768,2768],"valid"],[[2769,2783],"disallowed"],[[2784,2784],"valid"],[[2785,2787],"valid"],[[2788,2789],"disallowed"],[[2790,2799],"valid"],[[2800,2800],"valid",[],"NV8"],[[2801,2801],"valid",[],"NV8"],[[2802,2808],"disallowed"],[[2809,2809],"valid"],[[2810,2816],"disallowed"],[[2817,2819],"valid"],[[2820,2820],"disallowed"],[[2821,2828],"valid"],[[2829,2830],"disallowed"],[[2831,2832],"valid"],[[2833,2834],"disallowed"],[[2835,2856],"valid"],[[2857,2857],"disallowed"],[[2858,2864],"valid"],[[2865,2865],"disallowed"],[[2866,2867],"valid"],[[2868,2868],"disallowed"],[[2869,2869],"valid"],[[2870,2873],"valid"],[[2874,2875],"disallowed"],[[2876,2883],"valid"],[[2884,2884],"valid"],[[2885,2886],"disallowed"],[[2887,2888],"valid"],[[2889,2890],"disallowed"],[[2891,2893],"valid"],[[2894,2901],"disallowed"],[[2902,2903],"valid"],[[2904,2907],"disallowed"],[[2908,2908],"mapped",[2849,2876]],[[2909,2909],"mapped",[2850,2876]],[[2910,2910],"disallowed"],[[2911,2913],"valid"],[[2914,2915],"valid"],[[2916,2917],"disallowed"],[[2918,2927],"valid"],[[2928,2928],"valid",[],"NV8"],[[2929,2929],"valid"],[[2930,2935],"valid",[],"NV8"],[[2936,2945],"disallowed"],[[2946,2947],"valid"],[[2948,2948],"disallowed"],[[2949,2954],"valid"],[[2955,2957],"disallowed"],[[2958,2960],"valid"],[[2961,2961],"disallowed"],[[2962,2965],"valid"],[[2966,2968],"disallowed"],[[2969,2970],"valid"],[[2971,2971],"disallowed"],[[2972,2972],"valid"],[[2973,2973],"disallowed"],[[2974,2975],"valid"],[[2976,2978],"disallowed"],[[2979,2980],"valid"],[[2981,2983],"disallowed"],[[2984,2986],"valid"],[[2987,2989],"disallowed"],[[2990,2997],"valid"],[[2998,2998],"valid"],[[2999,3001],"valid"],[[3002,3005],"disallowed"],[[3006,3010],"valid"],[[3011,3013],"disallowed"],[[3014,3016],"valid"],[[3017,3017],"disallowed"],[[3018,3021],"valid"],[[3022,3023],"disallowed"],[[3024,3024],"valid"],[[3025,3030],"disallowed"],[[3031,3031],"valid"],[[3032,3045],"disallowed"],[[3046,3046],"valid"],[[3047,3055],"valid"],[[3056,3058],"valid",[],"NV8"],[[3059,3066],"valid",[],"NV8"],[[3067,3071],"disallowed"],[[3072,3072],"valid"],[[3073,3075],"valid"],[[3076,3076],"disallowed"],[[3077,3084],"valid"],[[3085,3085],"disallowed"],[[3086,3088],"valid"],[[3089,3089],"disallowed"],[[3090,3112],"valid"],[[3113,3113],"disallowed"],[[3114,3123],"valid"],[[3124,3124],"valid"],[[3125,3129],"valid"],[[3130,3132],"disallowed"],[[3133,3133],"valid"],[[3134,3140],"valid"],[[3141,3141],"disallowed"],[[3142,3144],"valid"],[[3145,3145],"disallowed"],[[3146,3149],"valid"],[[3150,3156],"disallowed"],[[3157,3158],"valid"],[[3159,3159],"disallowed"],[[3160,3161],"valid"],[[3162,3162],"valid"],[[3163,3167],"disallowed"],[[3168,3169],"valid"],[[3170,3171],"valid"],[[3172,3173],"disallowed"],[[3174,3183],"valid"],[[3184,3191],"disallowed"],[[3192,3199],"valid",[],"NV8"],[[3200,3200],"disallowed"],[[3201,3201],"valid"],[[3202,3203],"valid"],[[3204,3204],"disallowed"],[[3205,3212],"valid"],[[3213,3213],"disallowed"],[[3214,3216],"valid"],[[3217,3217],"disallowed"],[[3218,3240],"valid"],[[3241,3241],"disallowed"],[[3242,3251],"valid"],[[3252,3252],"disallowed"],[[3253,3257],"valid"],[[3258,3259],"disallowed"],[[3260,3261],"valid"],[[3262,3268],"valid"],[[3269,3269],"disallowed"],[[3270,3272],"valid"],[[3273,3273],"disallowed"],[[3274,3277],"valid"],[[3278,3284],"disallowed"],[[3285,3286],"valid"],[[3287,3293],"disallowed"],[[3294,3294],"valid"],[[3295,3295],"disallowed"],[[3296,3297],"valid"],[[3298,3299],"valid"],[[3300,3301],"disallowed"],[[3302,3311],"valid"],[[3312,3312],"disallowed"],[[3313,3314],"valid"],[[3315,3328],"disallowed"],[[3329,3329],"valid"],[[3330,3331],"valid"],[[3332,3332],"disallowed"],[[3333,3340],"valid"],[[3341,3341],"disallowed"],[[3342,3344],"valid"],[[3345,3345],"disallowed"],[[3346,3368],"valid"],[[3369,3369],"valid"],[[3370,3385],"valid"],[[3386,3386],"valid"],[[3387,3388],"disallowed"],[[3389,3389],"valid"],[[3390,3395],"valid"],[[3396,3396],"valid"],[[3397,3397],"disallowed"],[[3398,3400],"valid"],[[3401,3401],"disallowed"],[[3402,3405],"valid"],[[3406,3406],"valid"],[[3407,3414],"disallowed"],[[3415,3415],"valid"],[[3416,3422],"disallowed"],[[3423,3423],"valid"],[[3424,3425],"valid"],[[3426,3427],"valid"],[[3428,3429],"disallowed"],[[3430,3439],"valid"],[[3440,3445],"valid",[],"NV8"],[[3446,3448],"disallowed"],[[3449,3449],"valid",[],"NV8"],[[3450,3455],"valid"],[[3456,3457],"disallowed"],[[3458,3459],"valid"],[[3460,3460],"disallowed"],[[3461,3478],"valid"],[[3479,3481],"disallowed"],[[3482,3505],"valid"],[[3506,3506],"disallowed"],[[3507,3515],"valid"],[[3516,3516],"disallowed"],[[3517,3517],"valid"],[[3518,3519],"disallowed"],[[3520,3526],"valid"],[[3527,3529],"disallowed"],[[3530,3530],"valid"],[[3531,3534],"disallowed"],[[3535,3540],"valid"],[[3541,3541],"disallowed"],[[3542,3542],"valid"],[[3543,3543],"disallowed"],[[3544,3551],"valid"],[[3552,3557],"disallowed"],[[3558,3567],"valid"],[[3568,3569],"disallowed"],[[3570,3571],"valid"],[[3572,3572],"valid",[],"NV8"],[[3573,3584],"disallowed"],[[3585,3634],"valid"],[[3635,3635],"mapped",[3661,3634]],[[3636,3642],"valid"],[[3643,3646],"disallowed"],[[3647,3647],"valid",[],"NV8"],[[3648,3662],"valid"],[[3663,3663],"valid",[],"NV8"],[[3664,3673],"valid"],[[3674,3675],"valid",[],"NV8"],[[3676,3712],"disallowed"],[[3713,3714],"valid"],[[3715,3715],"disallowed"],[[3716,3716],"valid"],[[3717,3718],"disallowed"],[[3719,3720],"valid"],[[3721,3721],"disallowed"],[[3722,3722],"valid"],[[3723,3724],"disallowed"],[[3725,3725],"valid"],[[3726,3731],"disallowed"],[[3732,3735],"valid"],[[3736,3736],"disallowed"],[[3737,3743],"valid"],[[3744,3744],"disallowed"],[[3745,3747],"valid"],[[3748,3748],"disallowed"],[[3749,3749],"valid"],[[3750,3750],"disallowed"],[[3751,3751],"valid"],[[3752,3753],"disallowed"],[[3754,3755],"valid"],[[3756,3756],"disallowed"],[[3757,3762],"valid"],[[3763,3763],"mapped",[3789,3762]],[[3764,3769],"valid"],[[3770,3770],"disallowed"],[[3771,3773],"valid"],[[3774,3775],"disallowed"],[[3776,3780],"valid"],[[3781,3781],"disallowed"],[[3782,3782],"valid"],[[3783,3783],"disallowed"],[[3784,3789],"valid"],[[3790,3791],"disallowed"],[[3792,3801],"valid"],[[3802,3803],"disallowed"],[[3804,3804],"mapped",[3755,3737]],[[3805,3805],"mapped",[3755,3745]],[[3806,3807],"valid"],[[3808,3839],"disallowed"],[[3840,3840],"valid"],[[3841,3850],"valid",[],"NV8"],[[3851,3851],"valid"],[[3852,3852],"mapped",[3851]],[[3853,3863],"valid",[],"NV8"],[[3864,3865],"valid"],[[3866,3871],"valid",[],"NV8"],[[3872,3881],"valid"],[[3882,3892],"valid",[],"NV8"],[[3893,3893],"valid"],[[3894,3894],"valid",[],"NV8"],[[3895,3895],"valid"],[[3896,3896],"valid",[],"NV8"],[[3897,3897],"valid"],[[3898,3901],"valid",[],"NV8"],[[3902,3906],"valid"],[[3907,3907],"mapped",[3906,4023]],[[3908,3911],"valid"],[[3912,3912],"disallowed"],[[3913,3916],"valid"],[[3917,3917],"mapped",[3916,4023]],[[3918,3921],"valid"],[[3922,3922],"mapped",[3921,4023]],[[3923,3926],"valid"],[[3927,3927],"mapped",[3926,4023]],[[3928,3931],"valid"],[[3932,3932],"mapped",[3931,4023]],[[3933,3944],"valid"],[[3945,3945],"mapped",[3904,4021]],[[3946,3946],"valid"],[[3947,3948],"valid"],[[3949,3952],"disallowed"],[[3953,3954],"valid"],[[3955,3955],"mapped",[3953,3954]],[[3956,3956],"valid"],[[3957,3957],"mapped",[3953,3956]],[[3958,3958],"mapped",[4018,3968]],[[3959,3959],"mapped",[4018,3953,3968]],[[3960,3960],"mapped",[4019,3968]],[[3961,3961],"mapped",[4019,3953,3968]],[[3962,3968],"valid"],[[3969,3969],"mapped",[3953,3968]],[[3970,3972],"valid"],[[3973,3973],"valid",[],"NV8"],[[3974,3979],"valid"],[[3980,3983],"valid"],[[3984,3986],"valid"],[[3987,3987],"mapped",[3986,4023]],[[3988,3989],"valid"],[[3990,3990],"valid"],[[3991,3991],"valid"],[[3992,3992],"disallowed"],[[3993,3996],"valid"],[[3997,3997],"mapped",[3996,4023]],[[3998,4001],"valid"],[[4002,4002],"mapped",[4001,4023]],[[4003,4006],"valid"],[[4007,4007],"mapped",[4006,4023]],[[4008,4011],"valid"],[[4012,4012],"mapped",[4011,4023]],[[4013,4013],"valid"],[[4014,4016],"valid"],[[4017,4023],"valid"],[[4024,4024],"valid"],[[4025,4025],"mapped",[3984,4021]],[[4026,4028],"valid"],[[4029,4029],"disallowed"],[[4030,4037],"valid",[],"NV8"],[[4038,4038],"valid"],[[4039,4044],"valid",[],"NV8"],[[4045,4045],"disallowed"],[[4046,4046],"valid",[],"NV8"],[[4047,4047],"valid",[],"NV8"],[[4048,4049],"valid",[],"NV8"],[[4050,4052],"valid",[],"NV8"],[[4053,4056],"valid",[],"NV8"],[[4057,4058],"valid",[],"NV8"],[[4059,4095],"disallowed"],[[4096,4129],"valid"],[[4130,4130],"valid"],[[4131,4135],"valid"],[[4136,4136],"valid"],[[4137,4138],"valid"],[[4139,4139],"valid"],[[4140,4146],"valid"],[[4147,4149],"valid"],[[4150,4153],"valid"],[[4154,4159],"valid"],[[4160,4169],"valid"],[[4170,4175],"valid",[],"NV8"],[[4176,4185],"valid"],[[4186,4249],"valid"],[[4250,4253],"valid"],[[4254,4255],"valid",[],"NV8"],[[4256,4293],"disallowed"],[[4294,4294],"disallowed"],[[4295,4295],"mapped",[11559]],[[4296,4300],"disallowed"],[[4301,4301],"mapped",[11565]],[[4302,4303],"disallowed"],[[4304,4342],"valid"],[[4343,4344],"valid"],[[4345,4346],"valid"],[[4347,4347],"valid",[],"NV8"],[[4348,4348],"mapped",[4316]],[[4349,4351],"valid"],[[4352,4441],"valid",[],"NV8"],[[4442,4446],"valid",[],"NV8"],[[4447,4448],"disallowed"],[[4449,4514],"valid",[],"NV8"],[[4515,4519],"valid",[],"NV8"],[[4520,4601],"valid",[],"NV8"],[[4602,4607],"valid",[],"NV8"],[[4608,4614],"valid"],[[4615,4615],"valid"],[[4616,4678],"valid"],[[4679,4679],"valid"],[[4680,4680],"valid"],[[4681,4681],"disallowed"],[[4682,4685],"valid"],[[4686,4687],"disallowed"],[[4688,4694],"valid"],[[4695,4695],"disallowed"],[[4696,4696],"valid"],[[4697,4697],"disallowed"],[[4698,4701],"valid"],[[4702,4703],"disallowed"],[[4704,4742],"valid"],[[4743,4743],"valid"],[[4744,4744],"valid"],[[4745,4745],"disallowed"],[[4746,4749],"valid"],[[4750,4751],"disallowed"],[[4752,4782],"valid"],[[4783,4783],"valid"],[[4784,4784],"valid"],[[4785,4785],"disallowed"],[[4786,4789],"valid"],[[4790,4791],"disallowed"],[[4792,4798],"valid"],[[4799,4799],"disallowed"],[[4800,4800],"valid"],[[4801,4801],"disallowed"],[[4802,4805],"valid"],[[4806,4807],"disallowed"],[[4808,4814],"valid"],[[4815,4815],"valid"],[[4816,4822],"valid"],[[4823,4823],"disallowed"],[[4824,4846],"valid"],[[4847,4847],"valid"],[[4848,4878],"valid"],[[4879,4879],"valid"],[[4880,4880],"valid"],[[4881,4881],"disallowed"],[[4882,4885],"valid"],[[4886,4887],"disallowed"],[[4888,4894],"valid"],[[4895,4895],"valid"],[[4896,4934],"valid"],[[4935,4935],"valid"],[[4936,4954],"valid"],[[4955,4956],"disallowed"],[[4957,4958],"valid"],[[4959,4959],"valid"],[[4960,4960],"valid",[],"NV8"],[[4961,4988],"valid",[],"NV8"],[[4989,4991],"disallowed"],[[4992,5007],"valid"],[[5008,5017],"valid",[],"NV8"],[[5018,5023],"disallowed"],[[5024,5108],"valid"],[[5109,5109],"valid"],[[5110,5111],"disallowed"],[[5112,5112],"mapped",[5104]],[[5113,5113],"mapped",[5105]],[[5114,5114],"mapped",[5106]],[[5115,5115],"mapped",[5107]],[[5116,5116],"mapped",[5108]],[[5117,5117],"mapped",[5109]],[[5118,5119],"disallowed"],[[5120,5120],"valid",[],"NV8"],[[5121,5740],"valid"],[[5741,5742],"valid",[],"NV8"],[[5743,5750],"valid"],[[5751,5759],"valid"],[[5760,5760],"disallowed"],[[5761,5786],"valid"],[[5787,5788],"valid",[],"NV8"],[[5789,5791],"disallowed"],[[5792,5866],"valid"],[[5867,5872],"valid",[],"NV8"],[[5873,5880],"valid"],[[5881,5887],"disallowed"],[[5888,5900],"valid"],[[5901,5901],"disallowed"],[[5902,5908],"valid"],[[5909,5919],"disallowed"],[[5920,5940],"valid"],[[5941,5942],"valid",[],"NV8"],[[5943,5951],"disallowed"],[[5952,5971],"valid"],[[5972,5983],"disallowed"],[[5984,5996],"valid"],[[5997,5997],"disallowed"],[[5998,6000],"valid"],[[6001,6001],"disallowed"],[[6002,6003],"valid"],[[6004,6015],"disallowed"],[[6016,6067],"valid"],[[6068,6069],"disallowed"],[[6070,6099],"valid"],[[6100,6102],"valid",[],"NV8"],[[6103,6103],"valid"],[[6104,6107],"valid",[],"NV8"],[[6108,6108],"valid"],[[6109,6109],"valid"],[[6110,6111],"disallowed"],[[6112,6121],"valid"],[[6122,6127],"disallowed"],[[6128,6137],"valid",[],"NV8"],[[6138,6143],"disallowed"],[[6144,6149],"valid",[],"NV8"],[[6150,6150],"disallowed"],[[6151,6154],"valid",[],"NV8"],[[6155,6157],"ignored"],[[6158,6158],"disallowed"],[[6159,6159],"disallowed"],[[6160,6169],"valid"],[[6170,6175],"disallowed"],[[6176,6263],"valid"],[[6264,6271],"disallowed"],[[6272,6313],"valid"],[[6314,6314],"valid"],[[6315,6319],"disallowed"],[[6320,6389],"valid"],[[6390,6399],"disallowed"],[[6400,6428],"valid"],[[6429,6430],"valid"],[[6431,6431],"disallowed"],[[6432,6443],"valid"],[[6444,6447],"disallowed"],[[6448,6459],"valid"],[[6460,6463],"disallowed"],[[6464,6464],"valid",[],"NV8"],[[6465,6467],"disallowed"],[[6468,6469],"valid",[],"NV8"],[[6470,6509],"valid"],[[6510,6511],"disallowed"],[[6512,6516],"valid"],[[6517,6527],"disallowed"],[[6528,6569],"valid"],[[6570,6571],"valid"],[[6572,6575],"disallowed"],[[6576,6601],"valid"],[[6602,6607],"disallowed"],[[6608,6617],"valid"],[[6618,6618],"valid",[],"XV8"],[[6619,6621],"disallowed"],[[6622,6623],"valid",[],"NV8"],[[6624,6655],"valid",[],"NV8"],[[6656,6683],"valid"],[[6684,6685],"disallowed"],[[6686,6687],"valid",[],"NV8"],[[6688,6750],"valid"],[[6751,6751],"disallowed"],[[6752,6780],"valid"],[[6781,6782],"disallowed"],[[6783,6793],"valid"],[[6794,6799],"disallowed"],[[6800,6809],"valid"],[[6810,6815],"disallowed"],[[6816,6822],"valid",[],"NV8"],[[6823,6823],"valid"],[[6824,6829],"valid",[],"NV8"],[[6830,6831],"disallowed"],[[6832,6845],"valid"],[[6846,6846],"valid",[],"NV8"],[[6847,6911],"disallowed"],[[6912,6987],"valid"],[[6988,6991],"disallowed"],[[6992,7001],"valid"],[[7002,7018],"valid",[],"NV8"],[[7019,7027],"valid"],[[7028,7036],"valid",[],"NV8"],[[7037,7039],"disallowed"],[[7040,7082],"valid"],[[7083,7085],"valid"],[[7086,7097],"valid"],[[7098,7103],"valid"],[[7104,7155],"valid"],[[7156,7163],"disallowed"],[[7164,7167],"valid",[],"NV8"],[[7168,7223],"valid"],[[7224,7226],"disallowed"],[[7227,7231],"valid",[],"NV8"],[[7232,7241],"valid"],[[7242,7244],"disallowed"],[[7245,7293],"valid"],[[7294,7295],"valid",[],"NV8"],[[7296,7359],"disallowed"],[[7360,7367],"valid",[],"NV8"],[[7368,7375],"disallowed"],[[7376,7378],"valid"],[[7379,7379],"valid",[],"NV8"],[[7380,7410],"valid"],[[7411,7414],"valid"],[[7415,7415],"disallowed"],[[7416,7417],"valid"],[[7418,7423],"disallowed"],[[7424,7467],"valid"],[[7468,7468],"mapped",[97]],[[7469,7469],"mapped",[230]],[[7470,7470],"mapped",[98]],[[7471,7471],"valid"],[[7472,7472],"mapped",[100]],[[7473,7473],"mapped",[101]],[[7474,7474],"mapped",[477]],[[7475,7475],"mapped",[103]],[[7476,7476],"mapped",[104]],[[7477,7477],"mapped",[105]],[[7478,7478],"mapped",[106]],[[7479,7479],"mapped",[107]],[[7480,7480],"mapped",[108]],[[7481,7481],"mapped",[109]],[[7482,7482],"mapped",[110]],[[7483,7483],"valid"],[[7484,7484],"mapped",[111]],[[7485,7485],"mapped",[547]],[[7486,7486],"mapped",[112]],[[7487,7487],"mapped",[114]],[[7488,7488],"mapped",[116]],[[7489,7489],"mapped",[117]],[[7490,7490],"mapped",[119]],[[7491,7491],"mapped",[97]],[[7492,7492],"mapped",[592]],[[7493,7493],"mapped",[593]],[[7494,7494],"mapped",[7426]],[[7495,7495],"mapped",[98]],[[7496,7496],"mapped",[100]],[[7497,7497],"mapped",[101]],[[7498,7498],"mapped",[601]],[[7499,7499],"mapped",[603]],[[7500,7500],"mapped",[604]],[[7501,7501],"mapped",[103]],[[7502,7502],"valid"],[[7503,7503],"mapped",[107]],[[7504,7504],"mapped",[109]],[[7505,7505],"mapped",[331]],[[7506,7506],"mapped",[111]],[[7507,7507],"mapped",[596]],[[7508,7508],"mapped",[7446]],[[7509,7509],"mapped",[7447]],[[7510,7510],"mapped",[112]],[[7511,7511],"mapped",[116]],[[7512,7512],"mapped",[117]],[[7513,7513],"mapped",[7453]],[[7514,7514],"mapped",[623]],[[7515,7515],"mapped",[118]],[[7516,7516],"mapped",[7461]],[[7517,7517],"mapped",[946]],[[7518,7518],"mapped",[947]],[[7519,7519],"mapped",[948]],[[7520,7520],"mapped",[966]],[[7521,7521],"mapped",[967]],[[7522,7522],"mapped",[105]],[[7523,7523],"mapped",[114]],[[7524,7524],"mapped",[117]],[[7525,7525],"mapped",[118]],[[7526,7526],"mapped",[946]],[[7527,7527],"mapped",[947]],[[7528,7528],"mapped",[961]],[[7529,7529],"mapped",[966]],[[7530,7530],"mapped",[967]],[[7531,7531],"valid"],[[7532,7543],"valid"],[[7544,7544],"mapped",[1085]],[[7545,7578],"valid"],[[7579,7579],"mapped",[594]],[[7580,7580],"mapped",[99]],[[7581,7581],"mapped",[597]],[[7582,7582],"mapped",[240]],[[7583,7583],"mapped",[604]],[[7584,7584],"mapped",[102]],[[7585,7585],"mapped",[607]],[[7586,7586],"mapped",[609]],[[7587,7587],"mapped",[613]],[[7588,7588],"mapped",[616]],[[7589,7589],"mapped",[617]],[[7590,7590],"mapped",[618]],[[7591,7591],"mapped",[7547]],[[7592,7592],"mapped",[669]],[[7593,7593],"mapped",[621]],[[7594,7594],"mapped",[7557]],[[7595,7595],"mapped",[671]],[[7596,7596],"mapped",[625]],[[7597,7597],"mapped",[624]],[[7598,7598],"mapped",[626]],[[7599,7599],"mapped",[627]],[[7600,7600],"mapped",[628]],[[7601,7601],"mapped",[629]],[[7602,7602],"mapped",[632]],[[7603,7603],"mapped",[642]],[[7604,7604],"mapped",[643]],[[7605,7605],"mapped",[427]],[[7606,7606],"mapped",[649]],[[7607,7607],"mapped",[650]],[[7608,7608],"mapped",[7452]],[[7609,7609],"mapped",[651]],[[7610,7610],"mapped",[652]],[[7611,7611],"mapped",[122]],[[7612,7612],"mapped",[656]],[[7613,7613],"mapped",[657]],[[7614,7614],"mapped",[658]],[[7615,7615],"mapped",[952]],[[7616,7619],"valid"],[[7620,7626],"valid"],[[7627,7654],"valid"],[[7655,7669],"valid"],[[7670,7675],"disallowed"],[[7676,7676],"valid"],[[7677,7677],"valid"],[[7678,7679],"valid"],[[7680,7680],"mapped",[7681]],[[7681,7681],"valid"],[[7682,7682],"mapped",[7683]],[[7683,7683],"valid"],[[7684,7684],"mapped",[7685]],[[7685,7685],"valid"],[[7686,7686],"mapped",[7687]],[[7687,7687],"valid"],[[7688,7688],"mapped",[7689]],[[7689,7689],"valid"],[[7690,7690],"mapped",[7691]],[[7691,7691],"valid"],[[7692,7692],"mapped",[7693]],[[7693,7693],"valid"],[[7694,7694],"mapped",[7695]],[[7695,7695],"valid"],[[7696,7696],"mapped",[7697]],[[7697,7697],"valid"],[[7698,7698],"mapped",[7699]],[[7699,7699],"valid"],[[7700,7700],"mapped",[7701]],[[7701,7701],"valid"],[[7702,7702],"mapped",[7703]],[[7703,7703],"valid"],[[7704,7704],"mapped",[7705]],[[7705,7705],"valid"],[[7706,7706],"mapped",[7707]],[[7707,7707],"valid"],[[7708,7708],"mapped",[7709]],[[7709,7709],"valid"],[[7710,7710],"mapped",[7711]],[[7711,7711],"valid"],[[7712,7712],"mapped",[7713]],[[7713,7713],"valid"],[[7714,7714],"mapped",[7715]],[[7715,7715],"valid"],[[7716,7716],"mapped",[7717]],[[7717,7717],"valid"],[[7718,7718],"mapped",[7719]],[[7719,7719],"valid"],[[7720,7720],"mapped",[7721]],[[7721,7721],"valid"],[[7722,7722],"mapped",[7723]],[[7723,7723],"valid"],[[7724,7724],"mapped",[7725]],[[7725,7725],"valid"],[[7726,7726],"mapped",[7727]],[[7727,7727],"valid"],[[7728,7728],"mapped",[7729]],[[7729,7729],"valid"],[[7730,7730],"mapped",[7731]],[[7731,7731],"valid"],[[7732,7732],"mapped",[7733]],[[7733,7733],"valid"],[[7734,7734],"mapped",[7735]],[[7735,7735],"valid"],[[7736,7736],"mapped",[7737]],[[7737,7737],"valid"],[[7738,7738],"mapped",[7739]],[[7739,7739],"valid"],[[7740,7740],"mapped",[7741]],[[7741,7741],"valid"],[[7742,7742],"mapped",[7743]],[[7743,7743],"valid"],[[7744,7744],"mapped",[7745]],[[7745,7745],"valid"],[[7746,7746],"mapped",[7747]],[[7747,7747],"valid"],[[7748,7748],"mapped",[7749]],[[7749,7749],"valid"],[[7750,7750],"mapped",[7751]],[[7751,7751],"valid"],[[7752,7752],"mapped",[7753]],[[7753,7753],"valid"],[[7754,7754],"mapped",[7755]],[[7755,7755],"valid"],[[7756,7756],"mapped",[7757]],[[7757,7757],"valid"],[[7758,7758],"mapped",[7759]],[[7759,7759],"valid"],[[7760,7760],"mapped",[7761]],[[7761,7761],"valid"],[[7762,7762],"mapped",[7763]],[[7763,7763],"valid"],[[7764,7764],"mapped",[7765]],[[7765,7765],"valid"],[[7766,7766],"mapped",[7767]],[[7767,7767],"valid"],[[7768,7768],"mapped",[7769]],[[7769,7769],"valid"],[[7770,7770],"mapped",[7771]],[[7771,7771],"valid"],[[7772,7772],"mapped",[7773]],[[7773,7773],"valid"],[[7774,7774],"mapped",[7775]],[[7775,7775],"valid"],[[7776,7776],"mapped",[7777]],[[7777,7777],"valid"],[[7778,7778],"mapped",[7779]],[[7779,7779],"valid"],[[7780,7780],"mapped",[7781]],[[7781,7781],"valid"],[[7782,7782],"mapped",[7783]],[[7783,7783],"valid"],[[7784,7784],"mapped",[7785]],[[7785,7785],"valid"],[[7786,7786],"mapped",[7787]],[[7787,7787],"valid"],[[7788,7788],"mapped",[7789]],[[7789,7789],"valid"],[[7790,7790],"mapped",[7791]],[[7791,7791],"valid"],[[7792,7792],"mapped",[7793]],[[7793,7793],"valid"],[[7794,7794],"mapped",[7795]],[[7795,7795],"valid"],[[7796,7796],"mapped",[7797]],[[7797,7797],"valid"],[[7798,7798],"mapped",[7799]],[[7799,7799],"valid"],[[7800,7800],"mapped",[7801]],[[7801,7801],"valid"],[[7802,7802],"mapped",[7803]],[[7803,7803],"valid"],[[7804,7804],"mapped",[7805]],[[7805,7805],"valid"],[[7806,7806],"mapped",[7807]],[[7807,7807],"valid"],[[7808,7808],"mapped",[7809]],[[7809,7809],"valid"],[[7810,7810],"mapped",[7811]],[[7811,7811],"valid"],[[7812,7812],"mapped",[7813]],[[7813,7813],"valid"],[[7814,7814],"mapped",[7815]],[[7815,7815],"valid"],[[7816,7816],"mapped",[7817]],[[7817,7817],"valid"],[[7818,7818],"mapped",[7819]],[[7819,7819],"valid"],[[7820,7820],"mapped",[7821]],[[7821,7821],"valid"],[[7822,7822],"mapped",[7823]],[[7823,7823],"valid"],[[7824,7824],"mapped",[7825]],[[7825,7825],"valid"],[[7826,7826],"mapped",[7827]],[[7827,7827],"valid"],[[7828,7828],"mapped",[7829]],[[7829,7833],"valid"],[[7834,7834],"mapped",[97,702]],[[7835,7835],"mapped",[7777]],[[7836,7837],"valid"],[[7838,7838],"mapped",[115,115]],[[7839,7839],"valid"],[[7840,7840],"mapped",[7841]],[[7841,7841],"valid"],[[7842,7842],"mapped",[7843]],[[7843,7843],"valid"],[[7844,7844],"mapped",[7845]],[[7845,7845],"valid"],[[7846,7846],"mapped",[7847]],[[7847,7847],"valid"],[[7848,7848],"mapped",[7849]],[[7849,7849],"valid"],[[7850,7850],"mapped",[7851]],[[7851,7851],"valid"],[[7852,7852],"mapped",[7853]],[[7853,7853],"valid"],[[7854,7854],"mapped",[7855]],[[7855,7855],"valid"],[[7856,7856],"mapped",[7857]],[[7857,7857],"valid"],[[7858,7858],"mapped",[7859]],[[7859,7859],"valid"],[[7860,7860],"mapped",[7861]],[[7861,7861],"valid"],[[7862,7862],"mapped",[7863]],[[7863,7863],"valid"],[[7864,7864],"mapped",[7865]],[[7865,7865],"valid"],[[7866,7866],"mapped",[7867]],[[7867,7867],"valid"],[[7868,7868],"mapped",[7869]],[[7869,7869],"valid"],[[7870,7870],"mapped",[7871]],[[7871,7871],"valid"],[[7872,7872],"mapped",[7873]],[[7873,7873],"valid"],[[7874,7874],"mapped",[7875]],[[7875,7875],"valid"],[[7876,7876],"mapped",[7877]],[[7877,7877],"valid"],[[7878,7878],"mapped",[7879]],[[7879,7879],"valid"],[[7880,7880],"mapped",[7881]],[[7881,7881],"valid"],[[7882,7882],"mapped",[7883]],[[7883,7883],"valid"],[[7884,7884],"mapped",[7885]],[[7885,7885],"valid"],[[7886,7886],"mapped",[7887]],[[7887,7887],"valid"],[[7888,7888],"mapped",[7889]],[[7889,7889],"valid"],[[7890,7890],"mapped",[7891]],[[7891,7891],"valid"],[[7892,7892],"mapped",[7893]],[[7893,7893],"valid"],[[7894,7894],"mapped",[7895]],[[7895,7895],"valid"],[[7896,7896],"mapped",[7897]],[[7897,7897],"valid"],[[7898,7898],"mapped",[7899]],[[7899,7899],"valid"],[[7900,7900],"mapped",[7901]],[[7901,7901],"valid"],[[7902,7902],"mapped",[7903]],[[7903,7903],"valid"],[[7904,7904],"mapped",[7905]],[[7905,7905],"valid"],[[7906,7906],"mapped",[7907]],[[7907,7907],"valid"],[[7908,7908],"mapped",[7909]],[[7909,7909],"valid"],[[7910,7910],"mapped",[7911]],[[7911,7911],"valid"],[[7912,7912],"mapped",[7913]],[[7913,7913],"valid"],[[7914,7914],"mapped",[7915]],[[7915,7915],"valid"],[[7916,7916],"mapped",[7917]],[[7917,7917],"valid"],[[7918,7918],"mapped",[7919]],[[7919,7919],"valid"],[[7920,7920],"mapped",[7921]],[[7921,7921],"valid"],[[7922,7922],"mapped",[7923]],[[7923,7923],"valid"],[[7924,7924],"mapped",[7925]],[[7925,7925],"valid"],[[7926,7926],"mapped",[7927]],[[7927,7927],"valid"],[[7928,7928],"mapped",[7929]],[[7929,7929],"valid"],[[7930,7930],"mapped",[7931]],[[7931,7931],"valid"],[[7932,7932],"mapped",[7933]],[[7933,7933],"valid"],[[7934,7934],"mapped",[7935]],[[7935,7935],"valid"],[[7936,7943],"valid"],[[7944,7944],"mapped",[7936]],[[7945,7945],"mapped",[7937]],[[7946,7946],"mapped",[7938]],[[7947,7947],"mapped",[7939]],[[7948,7948],"mapped",[7940]],[[7949,7949],"mapped",[7941]],[[7950,7950],"mapped",[7942]],[[7951,7951],"mapped",[7943]],[[7952,7957],"valid"],[[7958,7959],"disallowed"],[[7960,7960],"mapped",[7952]],[[7961,7961],"mapped",[7953]],[[7962,7962],"mapped",[7954]],[[7963,7963],"mapped",[7955]],[[7964,7964],"mapped",[7956]],[[7965,7965],"mapped",[7957]],[[7966,7967],"disallowed"],[[7968,7975],"valid"],[[7976,7976],"mapped",[7968]],[[7977,7977],"mapped",[7969]],[[7978,7978],"mapped",[7970]],[[7979,7979],"mapped",[7971]],[[7980,7980],"mapped",[7972]],[[7981,7981],"mapped",[7973]],[[7982,7982],"mapped",[7974]],[[7983,7983],"mapped",[7975]],[[7984,7991],"valid"],[[7992,7992],"mapped",[7984]],[[7993,7993],"mapped",[7985]],[[7994,7994],"mapped",[7986]],[[7995,7995],"mapped",[7987]],[[7996,7996],"mapped",[7988]],[[7997,7997],"mapped",[7989]],[[7998,7998],"mapped",[7990]],[[7999,7999],"mapped",[7991]],[[8000,8005],"valid"],[[8006,8007],"disallowed"],[[8008,8008],"mapped",[8000]],[[8009,8009],"mapped",[8001]],[[8010,8010],"mapped",[8002]],[[8011,8011],"mapped",[8003]],[[8012,8012],"mapped",[8004]],[[8013,8013],"mapped",[8005]],[[8014,8015],"disallowed"],[[8016,8023],"valid"],[[8024,8024],"disallowed"],[[8025,8025],"mapped",[8017]],[[8026,8026],"disallowed"],[[8027,8027],"mapped",[8019]],[[8028,8028],"disallowed"],[[8029,8029],"mapped",[8021]],[[8030,8030],"disallowed"],[[8031,8031],"mapped",[8023]],[[8032,8039],"valid"],[[8040,8040],"mapped",[8032]],[[8041,8041],"mapped",[8033]],[[8042,8042],"mapped",[8034]],[[8043,8043],"mapped",[8035]],[[8044,8044],"mapped",[8036]],[[8045,8045],"mapped",[8037]],[[8046,8046],"mapped",[8038]],[[8047,8047],"mapped",[8039]],[[8048,8048],"valid"],[[8049,8049],"mapped",[940]],[[8050,8050],"valid"],[[8051,8051],"mapped",[941]],[[8052,8052],"valid"],[[8053,8053],"mapped",[942]],[[8054,8054],"valid"],[[8055,8055],"mapped",[943]],[[8056,8056],"valid"],[[8057,8057],"mapped",[972]],[[8058,8058],"valid"],[[8059,8059],"mapped",[973]],[[8060,8060],"valid"],[[8061,8061],"mapped",[974]],[[8062,8063],"disallowed"],[[8064,8064],"mapped",[7936,953]],[[8065,8065],"mapped",[7937,953]],[[8066,8066],"mapped",[7938,953]],[[8067,8067],"mapped",[7939,953]],[[8068,8068],"mapped",[7940,953]],[[8069,8069],"mapped",[7941,953]],[[8070,8070],"mapped",[7942,953]],[[8071,8071],"mapped",[7943,953]],[[8072,8072],"mapped",[7936,953]],[[8073,8073],"mapped",[7937,953]],[[8074,8074],"mapped",[7938,953]],[[8075,8075],"mapped",[7939,953]],[[8076,8076],"mapped",[7940,953]],[[8077,8077],"mapped",[7941,953]],[[8078,8078],"mapped",[7942,953]],[[8079,8079],"mapped",[7943,953]],[[8080,8080],"mapped",[7968,953]],[[8081,8081],"mapped",[7969,953]],[[8082,8082],"mapped",[7970,953]],[[8083,8083],"mapped",[7971,953]],[[8084,8084],"mapped",[7972,953]],[[8085,8085],"mapped",[7973,953]],[[8086,8086],"mapped",[7974,953]],[[8087,8087],"mapped",[7975,953]],[[8088,8088],"mapped",[7968,953]],[[8089,8089],"mapped",[7969,953]],[[8090,8090],"mapped",[7970,953]],[[8091,8091],"mapped",[7971,953]],[[8092,8092],"mapped",[7972,953]],[[8093,8093],"mapped",[7973,953]],[[8094,8094],"mapped",[7974,953]],[[8095,8095],"mapped",[7975,953]],[[8096,8096],"mapped",[8032,953]],[[8097,8097],"mapped",[8033,953]],[[8098,8098],"mapped",[8034,953]],[[8099,8099],"mapped",[8035,953]],[[8100,8100],"mapped",[8036,953]],[[8101,8101],"mapped",[8037,953]],[[8102,8102],"mapped",[8038,953]],[[8103,8103],"mapped",[8039,953]],[[8104,8104],"mapped",[8032,953]],[[8105,8105],"mapped",[8033,953]],[[8106,8106],"mapped",[8034,953]],[[8107,8107],"mapped",[8035,953]],[[8108,8108],"mapped",[8036,953]],[[8109,8109],"mapped",[8037,953]],[[8110,8110],"mapped",[8038,953]],[[8111,8111],"mapped",[8039,953]],[[8112,8113],"valid"],[[8114,8114],"mapped",[8048,953]],[[8115,8115],"mapped",[945,953]],[[8116,8116],"mapped",[940,953]],[[8117,8117],"disallowed"],[[8118,8118],"valid"],[[8119,8119],"mapped",[8118,953]],[[8120,8120],"mapped",[8112]],[[8121,8121],"mapped",[8113]],[[8122,8122],"mapped",[8048]],[[8123,8123],"mapped",[940]],[[8124,8124],"mapped",[945,953]],[[8125,8125],"disallowed_STD3_mapped",[32,787]],[[8126,8126],"mapped",[953]],[[8127,8127],"disallowed_STD3_mapped",[32,787]],[[8128,8128],"disallowed_STD3_mapped",[32,834]],[[8129,8129],"disallowed_STD3_mapped",[32,776,834]],[[8130,8130],"mapped",[8052,953]],[[8131,8131],"mapped",[951,953]],[[8132,8132],"mapped",[942,953]],[[8133,8133],"disallowed"],[[8134,8134],"valid"],[[8135,8135],"mapped",[8134,953]],[[8136,8136],"mapped",[8050]],[[8137,8137],"mapped",[941]],[[8138,8138],"mapped",[8052]],[[8139,8139],"mapped",[942]],[[8140,8140],"mapped",[951,953]],[[8141,8141],"disallowed_STD3_mapped",[32,787,768]],[[8142,8142],"disallowed_STD3_mapped",[32,787,769]],[[8143,8143],"disallowed_STD3_mapped",[32,787,834]],[[8144,8146],"valid"],[[8147,8147],"mapped",[912]],[[8148,8149],"disallowed"],[[8150,8151],"valid"],[[8152,8152],"mapped",[8144]],[[8153,8153],"mapped",[8145]],[[8154,8154],"mapped",[8054]],[[8155,8155],"mapped",[943]],[[8156,8156],"disallowed"],[[8157,8157],"disallowed_STD3_mapped",[32,788,768]],[[8158,8158],"disallowed_STD3_mapped",[32,788,769]],[[8159,8159],"disallowed_STD3_mapped",[32,788,834]],[[8160,8162],"valid"],[[8163,8163],"mapped",[944]],[[8164,8167],"valid"],[[8168,8168],"mapped",[8160]],[[8169,8169],"mapped",[8161]],[[8170,8170],"mapped",[8058]],[[8171,8171],"mapped",[973]],[[8172,8172],"mapped",[8165]],[[8173,8173],"disallowed_STD3_mapped",[32,776,768]],[[8174,8174],"disallowed_STD3_mapped",[32,776,769]],[[8175,8175],"disallowed_STD3_mapped",[96]],[[8176,8177],"disallowed"],[[8178,8178],"mapped",[8060,953]],[[8179,8179],"mapped",[969,953]],[[8180,8180],"mapped",[974,953]],[[8181,8181],"disallowed"],[[8182,8182],"valid"],[[8183,8183],"mapped",[8182,953]],[[8184,8184],"mapped",[8056]],[[8185,8185],"mapped",[972]],[[8186,8186],"mapped",[8060]],[[8187,8187],"mapped",[974]],[[8188,8188],"mapped",[969,953]],[[8189,8189],"disallowed_STD3_mapped",[32,769]],[[8190,8190],"disallowed_STD3_mapped",[32,788]],[[8191,8191],"disallowed"],[[8192,8202],"disallowed_STD3_mapped",[32]],[[8203,8203],"ignored"],[[8204,8205],"deviation",[]],[[8206,8207],"disallowed"],[[8208,8208],"valid",[],"NV8"],[[8209,8209],"mapped",[8208]],[[8210,8214],"valid",[],"NV8"],[[8215,8215],"disallowed_STD3_mapped",[32,819]],[[8216,8227],"valid",[],"NV8"],[[8228,8230],"disallowed"],[[8231,8231],"valid",[],"NV8"],[[8232,8238],"disallowed"],[[8239,8239],"disallowed_STD3_mapped",[32]],[[8240,8242],"valid",[],"NV8"],[[8243,8243],"mapped",[8242,8242]],[[8244,8244],"mapped",[8242,8242,8242]],[[8245,8245],"valid",[],"NV8"],[[8246,8246],"mapped",[8245,8245]],[[8247,8247],"mapped",[8245,8245,8245]],[[8248,8251],"valid",[],"NV8"],[[8252,8252],"disallowed_STD3_mapped",[33,33]],[[8253,8253],"valid",[],"NV8"],[[8254,8254],"disallowed_STD3_mapped",[32,773]],[[8255,8262],"valid",[],"NV8"],[[8263,8263],"disallowed_STD3_mapped",[63,63]],[[8264,8264],"disallowed_STD3_mapped",[63,33]],[[8265,8265],"disallowed_STD3_mapped",[33,63]],[[8266,8269],"valid",[],"NV8"],[[8270,8274],"valid",[],"NV8"],[[8275,8276],"valid",[],"NV8"],[[8277,8278],"valid",[],"NV8"],[[8279,8279],"mapped",[8242,8242,8242,8242]],[[8280,8286],"valid",[],"NV8"],[[8287,8287],"disallowed_STD3_mapped",[32]],[[8288,8288],"ignored"],[[8289,8291],"disallowed"],[[8292,8292],"ignored"],[[8293,8293],"disallowed"],[[8294,8297],"disallowed"],[[8298,8303],"disallowed"],[[8304,8304],"mapped",[48]],[[8305,8305],"mapped",[105]],[[8306,8307],"disallowed"],[[8308,8308],"mapped",[52]],[[8309,8309],"mapped",[53]],[[8310,8310],"mapped",[54]],[[8311,8311],"mapped",[55]],[[8312,8312],"mapped",[56]],[[8313,8313],"mapped",[57]],[[8314,8314],"disallowed_STD3_mapped",[43]],[[8315,8315],"mapped",[8722]],[[8316,8316],"disallowed_STD3_mapped",[61]],[[8317,8317],"disallowed_STD3_mapped",[40]],[[8318,8318],"disallowed_STD3_mapped",[41]],[[8319,8319],"mapped",[110]],[[8320,8320],"mapped",[48]],[[8321,8321],"mapped",[49]],[[8322,8322],"mapped",[50]],[[8323,8323],"mapped",[51]],[[8324,8324],"mapped",[52]],[[8325,8325],"mapped",[53]],[[8326,8326],"mapped",[54]],[[8327,8327],"mapped",[55]],[[8328,8328],"mapped",[56]],[[8329,8329],"mapped",[57]],[[8330,8330],"disallowed_STD3_mapped",[43]],[[8331,8331],"mapped",[8722]],[[8332,8332],"disallowed_STD3_mapped",[61]],[[8333,8333],"disallowed_STD3_mapped",[40]],[[8334,8334],"disallowed_STD3_mapped",[41]],[[8335,8335],"disallowed"],[[8336,8336],"mapped",[97]],[[8337,8337],"mapped",[101]],[[8338,8338],"mapped",[111]],[[8339,8339],"mapped",[120]],[[8340,8340],"mapped",[601]],[[8341,8341],"mapped",[104]],[[8342,8342],"mapped",[107]],[[8343,8343],"mapped",[108]],[[8344,8344],"mapped",[109]],[[8345,8345],"mapped",[110]],[[8346,8346],"mapped",[112]],[[8347,8347],"mapped",[115]],[[8348,8348],"mapped",[116]],[[8349,8351],"disallowed"],[[8352,8359],"valid",[],"NV8"],[[8360,8360],"mapped",[114,115]],[[8361,8362],"valid",[],"NV8"],[[8363,8363],"valid",[],"NV8"],[[8364,8364],"valid",[],"NV8"],[[8365,8367],"valid",[],"NV8"],[[8368,8369],"valid",[],"NV8"],[[8370,8373],"valid",[],"NV8"],[[8374,8376],"valid",[],"NV8"],[[8377,8377],"valid",[],"NV8"],[[8378,8378],"valid",[],"NV8"],[[8379,8381],"valid",[],"NV8"],[[8382,8382],"valid",[],"NV8"],[[8383,8399],"disallowed"],[[8400,8417],"valid",[],"NV8"],[[8418,8419],"valid",[],"NV8"],[[8420,8426],"valid",[],"NV8"],[[8427,8427],"valid",[],"NV8"],[[8428,8431],"valid",[],"NV8"],[[8432,8432],"valid",[],"NV8"],[[8433,8447],"disallowed"],[[8448,8448],"disallowed_STD3_mapped",[97,47,99]],[[8449,8449],"disallowed_STD3_mapped",[97,47,115]],[[8450,8450],"mapped",[99]],[[8451,8451],"mapped",[176,99]],[[8452,8452],"valid",[],"NV8"],[[8453,8453],"disallowed_STD3_mapped",[99,47,111]],[[8454,8454],"disallowed_STD3_mapped",[99,47,117]],[[8455,8455],"mapped",[603]],[[8456,8456],"valid",[],"NV8"],[[8457,8457],"mapped",[176,102]],[[8458,8458],"mapped",[103]],[[8459,8462],"mapped",[104]],[[8463,8463],"mapped",[295]],[[8464,8465],"mapped",[105]],[[8466,8467],"mapped",[108]],[[8468,8468],"valid",[],"NV8"],[[8469,8469],"mapped",[110]],[[8470,8470],"mapped",[110,111]],[[8471,8472],"valid",[],"NV8"],[[8473,8473],"mapped",[112]],[[8474,8474],"mapped",[113]],[[8475,8477],"mapped",[114]],[[8478,8479],"valid",[],"NV8"],[[8480,8480],"mapped",[115,109]],[[8481,8481],"mapped",[116,101,108]],[[8482,8482],"mapped",[116,109]],[[8483,8483],"valid",[],"NV8"],[[8484,8484],"mapped",[122]],[[8485,8485],"valid",[],"NV8"],[[8486,8486],"mapped",[969]],[[8487,8487],"valid",[],"NV8"],[[8488,8488],"mapped",[122]],[[8489,8489],"valid",[],"NV8"],[[8490,8490],"mapped",[107]],[[8491,8491],"mapped",[229]],[[8492,8492],"mapped",[98]],[[8493,8493],"mapped",[99]],[[8494,8494],"valid",[],"NV8"],[[8495,8496],"mapped",[101]],[[8497,8497],"mapped",[102]],[[8498,8498],"disallowed"],[[8499,8499],"mapped",[109]],[[8500,8500],"mapped",[111]],[[8501,8501],"mapped",[1488]],[[8502,8502],"mapped",[1489]],[[8503,8503],"mapped",[1490]],[[8504,8504],"mapped",[1491]],[[8505,8505],"mapped",[105]],[[8506,8506],"valid",[],"NV8"],[[8507,8507],"mapped",[102,97,120]],[[8508,8508],"mapped",[960]],[[8509,8510],"mapped",[947]],[[8511,8511],"mapped",[960]],[[8512,8512],"mapped",[8721]],[[8513,8516],"valid",[],"NV8"],[[8517,8518],"mapped",[100]],[[8519,8519],"mapped",[101]],[[8520,8520],"mapped",[105]],[[8521,8521],"mapped",[106]],[[8522,8523],"valid",[],"NV8"],[[8524,8524],"valid",[],"NV8"],[[8525,8525],"valid",[],"NV8"],[[8526,8526],"valid"],[[8527,8527],"valid",[],"NV8"],[[8528,8528],"mapped",[49,8260,55]],[[8529,8529],"mapped",[49,8260,57]],[[8530,8530],"mapped",[49,8260,49,48]],[[8531,8531],"mapped",[49,8260,51]],[[8532,8532],"mapped",[50,8260,51]],[[8533,8533],"mapped",[49,8260,53]],[[8534,8534],"mapped",[50,8260,53]],[[8535,8535],"mapped",[51,8260,53]],[[8536,8536],"mapped",[52,8260,53]],[[8537,8537],"mapped",[49,8260,54]],[[8538,8538],"mapped",[53,8260,54]],[[8539,8539],"mapped",[49,8260,56]],[[8540,8540],"mapped",[51,8260,56]],[[8541,8541],"mapped",[53,8260,56]],[[8542,8542],"mapped",[55,8260,56]],[[8543,8543],"mapped",[49,8260]],[[8544,8544],"mapped",[105]],[[8545,8545],"mapped",[105,105]],[[8546,8546],"mapped",[105,105,105]],[[8547,8547],"mapped",[105,118]],[[8548,8548],"mapped",[118]],[[8549,8549],"mapped",[118,105]],[[8550,8550],"mapped",[118,105,105]],[[8551,8551],"mapped",[118,105,105,105]],[[8552,8552],"mapped",[105,120]],[[8553,8553],"mapped",[120]],[[8554,8554],"mapped",[120,105]],[[8555,8555],"mapped",[120,105,105]],[[8556,8556],"mapped",[108]],[[8557,8557],"mapped",[99]],[[8558,8558],"mapped",[100]],[[8559,8559],"mapped",[109]],[[8560,8560],"mapped",[105]],[[8561,8561],"mapped",[105,105]],[[8562,8562],"mapped",[105,105,105]],[[8563,8563],"mapped",[105,118]],[[8564,8564],"mapped",[118]],[[8565,8565],"mapped",[118,105]],[[8566,8566],"mapped",[118,105,105]],[[8567,8567],"mapped",[118,105,105,105]],[[8568,8568],"mapped",[105,120]],[[8569,8569],"mapped",[120]],[[8570,8570],"mapped",[120,105]],[[8571,8571],"mapped",[120,105,105]],[[8572,8572],"mapped",[108]],[[8573,8573],"mapped",[99]],[[8574,8574],"mapped",[100]],[[8575,8575],"mapped",[109]],[[8576,8578],"valid",[],"NV8"],[[8579,8579],"disallowed"],[[8580,8580],"valid"],[[8581,8584],"valid",[],"NV8"],[[8585,8585],"mapped",[48,8260,51]],[[8586,8587],"valid",[],"NV8"],[[8588,8591],"disallowed"],[[8592,8682],"valid",[],"NV8"],[[8683,8691],"valid",[],"NV8"],[[8692,8703],"valid",[],"NV8"],[[8704,8747],"valid",[],"NV8"],[[8748,8748],"mapped",[8747,8747]],[[8749,8749],"mapped",[8747,8747,8747]],[[8750,8750],"valid",[],"NV8"],[[8751,8751],"mapped",[8750,8750]],[[8752,8752],"mapped",[8750,8750,8750]],[[8753,8799],"valid",[],"NV8"],[[8800,8800],"disallowed_STD3_valid"],[[8801,8813],"valid",[],"NV8"],[[8814,8815],"disallowed_STD3_valid"],[[8816,8945],"valid",[],"NV8"],[[8946,8959],"valid",[],"NV8"],[[8960,8960],"valid",[],"NV8"],[[8961,8961],"valid",[],"NV8"],[[8962,9000],"valid",[],"NV8"],[[9001,9001],"mapped",[12296]],[[9002,9002],"mapped",[12297]],[[9003,9082],"valid",[],"NV8"],[[9083,9083],"valid",[],"NV8"],[[9084,9084],"valid",[],"NV8"],[[9085,9114],"valid",[],"NV8"],[[9115,9166],"valid",[],"NV8"],[[9167,9168],"valid",[],"NV8"],[[9169,9179],"valid",[],"NV8"],[[9180,9191],"valid",[],"NV8"],[[9192,9192],"valid",[],"NV8"],[[9193,9203],"valid",[],"NV8"],[[9204,9210],"valid",[],"NV8"],[[9211,9215],"disallowed"],[[9216,9252],"valid",[],"NV8"],[[9253,9254],"valid",[],"NV8"],[[9255,9279],"disallowed"],[[9280,9290],"valid",[],"NV8"],[[9291,9311],"disallowed"],[[9312,9312],"mapped",[49]],[[9313,9313],"mapped",[50]],[[9314,9314],"mapped",[51]],[[9315,9315],"mapped",[52]],[[9316,9316],"mapped",[53]],[[9317,9317],"mapped",[54]],[[9318,9318],"mapped",[55]],[[9319,9319],"mapped",[56]],[[9320,9320],"mapped",[57]],[[9321,9321],"mapped",[49,48]],[[9322,9322],"mapped",[49,49]],[[9323,9323],"mapped",[49,50]],[[9324,9324],"mapped",[49,51]],[[9325,9325],"mapped",[49,52]],[[9326,9326],"mapped",[49,53]],[[9327,9327],"mapped",[49,54]],[[9328,9328],"mapped",[49,55]],[[9329,9329],"mapped",[49,56]],[[9330,9330],"mapped",[49,57]],[[9331,9331],"mapped",[50,48]],[[9332,9332],"disallowed_STD3_mapped",[40,49,41]],[[9333,9333],"disallowed_STD3_mapped",[40,50,41]],[[9334,9334],"disallowed_STD3_mapped",[40,51,41]],[[9335,9335],"disallowed_STD3_mapped",[40,52,41]],[[9336,9336],"disallowed_STD3_mapped",[40,53,41]],[[9337,9337],"disallowed_STD3_mapped",[40,54,41]],[[9338,9338],"disallowed_STD3_mapped",[40,55,41]],[[9339,9339],"disallowed_STD3_mapped",[40,56,41]],[[9340,9340],"disallowed_STD3_mapped",[40,57,41]],[[9341,9341],"disallowed_STD3_mapped",[40,49,48,41]],[[9342,9342],"disallowed_STD3_mapped",[40,49,49,41]],[[9343,9343],"disallowed_STD3_mapped",[40,49,50,41]],[[9344,9344],"disallowed_STD3_mapped",[40,49,51,41]],[[9345,9345],"disallowed_STD3_mapped",[40,49,52,41]],[[9346,9346],"disallowed_STD3_mapped",[40,49,53,41]],[[9347,9347],"disallowed_STD3_mapped",[40,49,54,41]],[[9348,9348],"disallowed_STD3_mapped",[40,49,55,41]],[[9349,9349],"disallowed_STD3_mapped",[40,49,56,41]],[[9350,9350],"disallowed_STD3_mapped",[40,49,57,41]],[[9351,9351],"disallowed_STD3_mapped",[40,50,48,41]],[[9352,9371],"disallowed"],[[9372,9372],"disallowed_STD3_mapped",[40,97,41]],[[9373,9373],"disallowed_STD3_mapped",[40,98,41]],[[9374,9374],"disallowed_STD3_mapped",[40,99,41]],[[9375,9375],"disallowed_STD3_mapped",[40,100,41]],[[9376,9376],"disallowed_STD3_mapped",[40,101,41]],[[9377,9377],"disallowed_STD3_mapped",[40,102,41]],[[9378,9378],"disallowed_STD3_mapped",[40,103,41]],[[9379,9379],"disallowed_STD3_mapped",[40,104,41]],[[9380,9380],"disallowed_STD3_mapped",[40,105,41]],[[9381,9381],"disallowed_STD3_mapped",[40,106,41]],[[9382,9382],"disallowed_STD3_mapped",[40,107,41]],[[9383,9383],"disallowed_STD3_mapped",[40,108,41]],[[9384,9384],"disallowed_STD3_mapped",[40,109,41]],[[9385,9385],"disallowed_STD3_mapped",[40,110,41]],[[9386,9386],"disallowed_STD3_mapped",[40,111,41]],[[9387,9387],"disallowed_STD3_mapped",[40,112,41]],[[9388,9388],"disallowed_STD3_mapped",[40,113,41]],[[9389,9389],"disallowed_STD3_mapped",[40,114,41]],[[9390,9390],"disallowed_STD3_mapped",[40,115,41]],[[9391,9391],"disallowed_STD3_mapped",[40,116,41]],[[9392,9392],"disallowed_STD3_mapped",[40,117,41]],[[9393,9393],"disallowed_STD3_mapped",[40,118,41]],[[9394,9394],"disallowed_STD3_mapped",[40,119,41]],[[9395,9395],"disallowed_STD3_mapped",[40,120,41]],[[9396,9396],"disallowed_STD3_mapped",[40,121,41]],[[9397,9397],"disallowed_STD3_mapped",[40,122,41]],[[9398,9398],"mapped",[97]],[[9399,9399],"mapped",[98]],[[9400,9400],"mapped",[99]],[[9401,9401],"mapped",[100]],[[9402,9402],"mapped",[101]],[[9403,9403],"mapped",[102]],[[9404,9404],"mapped",[103]],[[9405,9405],"mapped",[104]],[[9406,9406],"mapped",[105]],[[9407,9407],"mapped",[106]],[[9408,9408],"mapped",[107]],[[9409,9409],"mapped",[108]],[[9410,9410],"mapped",[109]],[[9411,9411],"mapped",[110]],[[9412,9412],"mapped",[111]],[[9413,9413],"mapped",[112]],[[9414,9414],"mapped",[113]],[[9415,9415],"mapped",[114]],[[9416,9416],"mapped",[115]],[[9417,9417],"mapped",[116]],[[9418,9418],"mapped",[117]],[[9419,9419],"mapped",[118]],[[9420,9420],"mapped",[119]],[[9421,9421],"mapped",[120]],[[9422,9422],"mapped",[121]],[[9423,9423],"mapped",[122]],[[9424,9424],"mapped",[97]],[[9425,9425],"mapped",[98]],[[9426,9426],"mapped",[99]],[[9427,9427],"mapped",[100]],[[9428,9428],"mapped",[101]],[[9429,9429],"mapped",[102]],[[9430,9430],"mapped",[103]],[[9431,9431],"mapped",[104]],[[9432,9432],"mapped",[105]],[[9433,9433],"mapped",[106]],[[9434,9434],"mapped",[107]],[[9435,9435],"mapped",[108]],[[9436,9436],"mapped",[109]],[[9437,9437],"mapped",[110]],[[9438,9438],"mapped",[111]],[[9439,9439],"mapped",[112]],[[9440,9440],"mapped",[113]],[[9441,9441],"mapped",[114]],[[9442,9442],"mapped",[115]],[[9443,9443],"mapped",[116]],[[9444,9444],"mapped",[117]],[[9445,9445],"mapped",[118]],[[9446,9446],"mapped",[119]],[[9447,9447],"mapped",[120]],[[9448,9448],"mapped",[121]],[[9449,9449],"mapped",[122]],[[9450,9450],"mapped",[48]],[[9451,9470],"valid",[],"NV8"],[[9471,9471],"valid",[],"NV8"],[[9472,9621],"valid",[],"NV8"],[[9622,9631],"valid",[],"NV8"],[[9632,9711],"valid",[],"NV8"],[[9712,9719],"valid",[],"NV8"],[[9720,9727],"valid",[],"NV8"],[[9728,9747],"valid",[],"NV8"],[[9748,9749],"valid",[],"NV8"],[[9750,9751],"valid",[],"NV8"],[[9752,9752],"valid",[],"NV8"],[[9753,9753],"valid",[],"NV8"],[[9754,9839],"valid",[],"NV8"],[[9840,9841],"valid",[],"NV8"],[[9842,9853],"valid",[],"NV8"],[[9854,9855],"valid",[],"NV8"],[[9856,9865],"valid",[],"NV8"],[[9866,9873],"valid",[],"NV8"],[[9874,9884],"valid",[],"NV8"],[[9885,9885],"valid",[],"NV8"],[[9886,9887],"valid",[],"NV8"],[[9888,9889],"valid",[],"NV8"],[[9890,9905],"valid",[],"NV8"],[[9906,9906],"valid",[],"NV8"],[[9907,9916],"valid",[],"NV8"],[[9917,9919],"valid",[],"NV8"],[[9920,9923],"valid",[],"NV8"],[[9924,9933],"valid",[],"NV8"],[[9934,9934],"valid",[],"NV8"],[[9935,9953],"valid",[],"NV8"],[[9954,9954],"valid",[],"NV8"],[[9955,9955],"valid",[],"NV8"],[[9956,9959],"valid",[],"NV8"],[[9960,9983],"valid",[],"NV8"],[[9984,9984],"valid",[],"NV8"],[[9985,9988],"valid",[],"NV8"],[[9989,9989],"valid",[],"NV8"],[[9990,9993],"valid",[],"NV8"],[[9994,9995],"valid",[],"NV8"],[[9996,10023],"valid",[],"NV8"],[[10024,10024],"valid",[],"NV8"],[[10025,10059],"valid",[],"NV8"],[[10060,10060],"valid",[],"NV8"],[[10061,10061],"valid",[],"NV8"],[[10062,10062],"valid",[],"NV8"],[[10063,10066],"valid",[],"NV8"],[[10067,10069],"valid",[],"NV8"],[[10070,10070],"valid",[],"NV8"],[[10071,10071],"valid",[],"NV8"],[[10072,10078],"valid",[],"NV8"],[[10079,10080],"valid",[],"NV8"],[[10081,10087],"valid",[],"NV8"],[[10088,10101],"valid",[],"NV8"],[[10102,10132],"valid",[],"NV8"],[[10133,10135],"valid",[],"NV8"],[[10136,10159],"valid",[],"NV8"],[[10160,10160],"valid",[],"NV8"],[[10161,10174],"valid",[],"NV8"],[[10175,10175],"valid",[],"NV8"],[[10176,10182],"valid",[],"NV8"],[[10183,10186],"valid",[],"NV8"],[[10187,10187],"valid",[],"NV8"],[[10188,10188],"valid",[],"NV8"],[[10189,10189],"valid",[],"NV8"],[[10190,10191],"valid",[],"NV8"],[[10192,10219],"valid",[],"NV8"],[[10220,10223],"valid",[],"NV8"],[[10224,10239],"valid",[],"NV8"],[[10240,10495],"valid",[],"NV8"],[[10496,10763],"valid",[],"NV8"],[[10764,10764],"mapped",[8747,8747,8747,8747]],[[10765,10867],"valid",[],"NV8"],[[10868,10868],"disallowed_STD3_mapped",[58,58,61]],[[10869,10869],"disallowed_STD3_mapped",[61,61]],[[10870,10870],"disallowed_STD3_mapped",[61,61,61]],[[10871,10971],"valid",[],"NV8"],[[10972,10972],"mapped",[10973,824]],[[10973,11007],"valid",[],"NV8"],[[11008,11021],"valid",[],"NV8"],[[11022,11027],"valid",[],"NV8"],[[11028,11034],"valid",[],"NV8"],[[11035,11039],"valid",[],"NV8"],[[11040,11043],"valid",[],"NV8"],[[11044,11084],"valid",[],"NV8"],[[11085,11087],"valid",[],"NV8"],[[11088,11092],"valid",[],"NV8"],[[11093,11097],"valid",[],"NV8"],[[11098,11123],"valid",[],"NV8"],[[11124,11125],"disallowed"],[[11126,11157],"valid",[],"NV8"],[[11158,11159],"disallowed"],[[11160,11193],"valid",[],"NV8"],[[11194,11196],"disallowed"],[[11197,11208],"valid",[],"NV8"],[[11209,11209],"disallowed"],[[11210,11217],"valid",[],"NV8"],[[11218,11243],"disallowed"],[[11244,11247],"valid",[],"NV8"],[[11248,11263],"disallowed"],[[11264,11264],"mapped",[11312]],[[11265,11265],"mapped",[11313]],[[11266,11266],"mapped",[11314]],[[11267,11267],"mapped",[11315]],[[11268,11268],"mapped",[11316]],[[11269,11269],"mapped",[11317]],[[11270,11270],"mapped",[11318]],[[11271,11271],"mapped",[11319]],[[11272,11272],"mapped",[11320]],[[11273,11273],"mapped",[11321]],[[11274,11274],"mapped",[11322]],[[11275,11275],"mapped",[11323]],[[11276,11276],"mapped",[11324]],[[11277,11277],"mapped",[11325]],[[11278,11278],"mapped",[11326]],[[11279,11279],"mapped",[11327]],[[11280,11280],"mapped",[11328]],[[11281,11281],"mapped",[11329]],[[11282,11282],"mapped",[11330]],[[11283,11283],"mapped",[11331]],[[11284,11284],"mapped",[11332]],[[11285,11285],"mapped",[11333]],[[11286,11286],"mapped",[11334]],[[11287,11287],"mapped",[11335]],[[11288,11288],"mapped",[11336]],[[11289,11289],"mapped",[11337]],[[11290,11290],"mapped",[11338]],[[11291,11291],"mapped",[11339]],[[11292,11292],"mapped",[11340]],[[11293,11293],"mapped",[11341]],[[11294,11294],"mapped",[11342]],[[11295,11295],"mapped",[11343]],[[11296,11296],"mapped",[11344]],[[11297,11297],"mapped",[11345]],[[11298,11298],"mapped",[11346]],[[11299,11299],"mapped",[11347]],[[11300,11300],"mapped",[11348]],[[11301,11301],"mapped",[11349]],[[11302,11302],"mapped",[11350]],[[11303,11303],"mapped",[11351]],[[11304,11304],"mapped",[11352]],[[11305,11305],"mapped",[11353]],[[11306,11306],"mapped",[11354]],[[11307,11307],"mapped",[11355]],[[11308,11308],"mapped",[11356]],[[11309,11309],"mapped",[11357]],[[11310,11310],"mapped",[11358]],[[11311,11311],"disallowed"],[[11312,11358],"valid"],[[11359,11359],"disallowed"],[[11360,11360],"mapped",[11361]],[[11361,11361],"valid"],[[11362,11362],"mapped",[619]],[[11363,11363],"mapped",[7549]],[[11364,11364],"mapped",[637]],[[11365,11366],"valid"],[[11367,11367],"mapped",[11368]],[[11368,11368],"valid"],[[11369,11369],"mapped",[11370]],[[11370,11370],"valid"],[[11371,11371],"mapped",[11372]],[[11372,11372],"valid"],[[11373,11373],"mapped",[593]],[[11374,11374],"mapped",[625]],[[11375,11375],"mapped",[592]],[[11376,11376],"mapped",[594]],[[11377,11377],"valid"],[[11378,11378],"mapped",[11379]],[[11379,11379],"valid"],[[11380,11380],"valid"],[[11381,11381],"mapped",[11382]],[[11382,11383],"valid"],[[11384,11387],"valid"],[[11388,11388],"mapped",[106]],[[11389,11389],"mapped",[118]],[[11390,11390],"mapped",[575]],[[11391,11391],"mapped",[576]],[[11392,11392],"mapped",[11393]],[[11393,11393],"valid"],[[11394,11394],"mapped",[11395]],[[11395,11395],"valid"],[[11396,11396],"mapped",[11397]],[[11397,11397],"valid"],[[11398,11398],"mapped",[11399]],[[11399,11399],"valid"],[[11400,11400],"mapped",[11401]],[[11401,11401],"valid"],[[11402,11402],"mapped",[11403]],[[11403,11403],"valid"],[[11404,11404],"mapped",[11405]],[[11405,11405],"valid"],[[11406,11406],"mapped",[11407]],[[11407,11407],"valid"],[[11408,11408],"mapped",[11409]],[[11409,11409],"valid"],[[11410,11410],"mapped",[11411]],[[11411,11411],"valid"],[[11412,11412],"mapped",[11413]],[[11413,11413],"valid"],[[11414,11414],"mapped",[11415]],[[11415,11415],"valid"],[[11416,11416],"mapped",[11417]],[[11417,11417],"valid"],[[11418,11418],"mapped",[11419]],[[11419,11419],"valid"],[[11420,11420],"mapped",[11421]],[[11421,11421],"valid"],[[11422,11422],"mapped",[11423]],[[11423,11423],"valid"],[[11424,11424],"mapped",[11425]],[[11425,11425],"valid"],[[11426,11426],"mapped",[11427]],[[11427,11427],"valid"],[[11428,11428],"mapped",[11429]],[[11429,11429],"valid"],[[11430,11430],"mapped",[11431]],[[11431,11431],"valid"],[[11432,11432],"mapped",[11433]],[[11433,11433],"valid"],[[11434,11434],"mapped",[11435]],[[11435,11435],"valid"],[[11436,11436],"mapped",[11437]],[[11437,11437],"valid"],[[11438,11438],"mapped",[11439]],[[11439,11439],"valid"],[[11440,11440],"mapped",[11441]],[[11441,11441],"valid"],[[11442,11442],"mapped",[11443]],[[11443,11443],"valid"],[[11444,11444],"mapped",[11445]],[[11445,11445],"valid"],[[11446,11446],"mapped",[11447]],[[11447,11447],"valid"],[[11448,11448],"mapped",[11449]],[[11449,11449],"valid"],[[11450,11450],"mapped",[11451]],[[11451,11451],"valid"],[[11452,11452],"mapped",[11453]],[[11453,11453],"valid"],[[11454,11454],"mapped",[11455]],[[11455,11455],"valid"],[[11456,11456],"mapped",[11457]],[[11457,11457],"valid"],[[11458,11458],"mapped",[11459]],[[11459,11459],"valid"],[[11460,11460],"mapped",[11461]],[[11461,11461],"valid"],[[11462,11462],"mapped",[11463]],[[11463,11463],"valid"],[[11464,11464],"mapped",[11465]],[[11465,11465],"valid"],[[11466,11466],"mapped",[11467]],[[11467,11467],"valid"],[[11468,11468],"mapped",[11469]],[[11469,11469],"valid"],[[11470,11470],"mapped",[11471]],[[11471,11471],"valid"],[[11472,11472],"mapped",[11473]],[[11473,11473],"valid"],[[11474,11474],"mapped",[11475]],[[11475,11475],"valid"],[[11476,11476],"mapped",[11477]],[[11477,11477],"valid"],[[11478,11478],"mapped",[11479]],[[11479,11479],"valid"],[[11480,11480],"mapped",[11481]],[[11481,11481],"valid"],[[11482,11482],"mapped",[11483]],[[11483,11483],"valid"],[[11484,11484],"mapped",[11485]],[[11485,11485],"valid"],[[11486,11486],"mapped",[11487]],[[11487,11487],"valid"],[[11488,11488],"mapped",[11489]],[[11489,11489],"valid"],[[11490,11490],"mapped",[11491]],[[11491,11492],"valid"],[[11493,11498],"valid",[],"NV8"],[[11499,11499],"mapped",[11500]],[[11500,11500],"valid"],[[11501,11501],"mapped",[11502]],[[11502,11505],"valid"],[[11506,11506],"mapped",[11507]],[[11507,11507],"valid"],[[11508,11512],"disallowed"],[[11513,11519],"valid",[],"NV8"],[[11520,11557],"valid"],[[11558,11558],"disallowed"],[[11559,11559],"valid"],[[11560,11564],"disallowed"],[[11565,11565],"valid"],[[11566,11567],"disallowed"],[[11568,11621],"valid"],[[11622,11623],"valid"],[[11624,11630],"disallowed"],[[11631,11631],"mapped",[11617]],[[11632,11632],"valid",[],"NV8"],[[11633,11646],"disallowed"],[[11647,11647],"valid"],[[11648,11670],"valid"],[[11671,11679],"disallowed"],[[11680,11686],"valid"],[[11687,11687],"disallowed"],[[11688,11694],"valid"],[[11695,11695],"disallowed"],[[11696,11702],"valid"],[[11703,11703],"disallowed"],[[11704,11710],"valid"],[[11711,11711],"disallowed"],[[11712,11718],"valid"],[[11719,11719],"disallowed"],[[11720,11726],"valid"],[[11727,11727],"disallowed"],[[11728,11734],"valid"],[[11735,11735],"disallowed"],[[11736,11742],"valid"],[[11743,11743],"disallowed"],[[11744,11775],"valid"],[[11776,11799],"valid",[],"NV8"],[[11800,11803],"valid",[],"NV8"],[[11804,11805],"valid",[],"NV8"],[[11806,11822],"valid",[],"NV8"],[[11823,11823],"valid"],[[11824,11824],"valid",[],"NV8"],[[11825,11825],"valid",[],"NV8"],[[11826,11835],"valid",[],"NV8"],[[11836,11842],"valid",[],"NV8"],[[11843,11903],"disallowed"],[[11904,11929],"valid",[],"NV8"],[[11930,11930],"disallowed"],[[11931,11934],"valid",[],"NV8"],[[11935,11935],"mapped",[27597]],[[11936,12018],"valid",[],"NV8"],[[12019,12019],"mapped",[40863]],[[12020,12031],"disallowed"],[[12032,12032],"mapped",[19968]],[[12033,12033],"mapped",[20008]],[[12034,12034],"mapped",[20022]],[[12035,12035],"mapped",[20031]],[[12036,12036],"mapped",[20057]],[[12037,12037],"mapped",[20101]],[[12038,12038],"mapped",[20108]],[[12039,12039],"mapped",[20128]],[[12040,12040],"mapped",[20154]],[[12041,12041],"mapped",[20799]],[[12042,12042],"mapped",[20837]],[[12043,12043],"mapped",[20843]],[[12044,12044],"mapped",[20866]],[[12045,12045],"mapped",[20886]],[[12046,12046],"mapped",[20907]],[[12047,12047],"mapped",[20960]],[[12048,12048],"mapped",[20981]],[[12049,12049],"mapped",[20992]],[[12050,12050],"mapped",[21147]],[[12051,12051],"mapped",[21241]],[[12052,12052],"mapped",[21269]],[[12053,12053],"mapped",[21274]],[[12054,12054],"mapped",[21304]],[[12055,12055],"mapped",[21313]],[[12056,12056],"mapped",[21340]],[[12057,12057],"mapped",[21353]],[[12058,12058],"mapped",[21378]],[[12059,12059],"mapped",[21430]],[[12060,12060],"mapped",[21448]],[[12061,12061],"mapped",[21475]],[[12062,12062],"mapped",[22231]],[[12063,12063],"mapped",[22303]],[[12064,12064],"mapped",[22763]],[[12065,12065],"mapped",[22786]],[[12066,12066],"mapped",[22794]],[[12067,12067],"mapped",[22805]],[[12068,12068],"mapped",[22823]],[[12069,12069],"mapped",[22899]],[[12070,12070],"mapped",[23376]],[[12071,12071],"mapped",[23424]],[[12072,12072],"mapped",[23544]],[[12073,12073],"mapped",[23567]],[[12074,12074],"mapped",[23586]],[[12075,12075],"mapped",[23608]],[[12076,12076],"mapped",[23662]],[[12077,12077],"mapped",[23665]],[[12078,12078],"mapped",[24027]],[[12079,12079],"mapped",[24037]],[[12080,12080],"mapped",[24049]],[[12081,12081],"mapped",[24062]],[[12082,12082],"mapped",[24178]],[[12083,12083],"mapped",[24186]],[[12084,12084],"mapped",[24191]],[[12085,12085],"mapped",[24308]],[[12086,12086],"mapped",[24318]],[[12087,12087],"mapped",[24331]],[[12088,12088],"mapped",[24339]],[[12089,12089],"mapped",[24400]],[[12090,12090],"mapped",[24417]],[[12091,12091],"mapped",[24435]],[[12092,12092],"mapped",[24515]],[[12093,12093],"mapped",[25096]],[[12094,12094],"mapped",[25142]],[[12095,12095],"mapped",[25163]],[[12096,12096],"mapped",[25903]],[[12097,12097],"mapped",[25908]],[[12098,12098],"mapped",[25991]],[[12099,12099],"mapped",[26007]],[[12100,12100],"mapped",[26020]],[[12101,12101],"mapped",[26041]],[[12102,12102],"mapped",[26080]],[[12103,12103],"mapped",[26085]],[[12104,12104],"mapped",[26352]],[[12105,12105],"mapped",[26376]],[[12106,12106],"mapped",[26408]],[[12107,12107],"mapped",[27424]],[[12108,12108],"mapped",[27490]],[[12109,12109],"mapped",[27513]],[[12110,12110],"mapped",[27571]],[[12111,12111],"mapped",[27595]],[[12112,12112],"mapped",[27604]],[[12113,12113],"mapped",[27611]],[[12114,12114],"mapped",[27663]],[[12115,12115],"mapped",[27668]],[[12116,12116],"mapped",[27700]],[[12117,12117],"mapped",[28779]],[[12118,12118],"mapped",[29226]],[[12119,12119],"mapped",[29238]],[[12120,12120],"mapped",[29243]],[[12121,12121],"mapped",[29247]],[[12122,12122],"mapped",[29255]],[[12123,12123],"mapped",[29273]],[[12124,12124],"mapped",[29275]],[[12125,12125],"mapped",[29356]],[[12126,12126],"mapped",[29572]],[[12127,12127],"mapped",[29577]],[[12128,12128],"mapped",[29916]],[[12129,12129],"mapped",[29926]],[[12130,12130],"mapped",[29976]],[[12131,12131],"mapped",[29983]],[[12132,12132],"mapped",[29992]],[[12133,12133],"mapped",[30000]],[[12134,12134],"mapped",[30091]],[[12135,12135],"mapped",[30098]],[[12136,12136],"mapped",[30326]],[[12137,12137],"mapped",[30333]],[[12138,12138],"mapped",[30382]],[[12139,12139],"mapped",[30399]],[[12140,12140],"mapped",[30446]],[[12141,12141],"mapped",[30683]],[[12142,12142],"mapped",[30690]],[[12143,12143],"mapped",[30707]],[[12144,12144],"mapped",[31034]],[[12145,12145],"mapped",[31160]],[[12146,12146],"mapped",[31166]],[[12147,12147],"mapped",[31348]],[[12148,12148],"mapped",[31435]],[[12149,12149],"mapped",[31481]],[[12150,12150],"mapped",[31859]],[[12151,12151],"mapped",[31992]],[[12152,12152],"mapped",[32566]],[[12153,12153],"mapped",[32593]],[[12154,12154],"mapped",[32650]],[[12155,12155],"mapped",[32701]],[[12156,12156],"mapped",[32769]],[[12157,12157],"mapped",[32780]],[[12158,12158],"mapped",[32786]],[[12159,12159],"mapped",[32819]],[[12160,12160],"mapped",[32895]],[[12161,12161],"mapped",[32905]],[[12162,12162],"mapped",[33251]],[[12163,12163],"mapped",[33258]],[[12164,12164],"mapped",[33267]],[[12165,12165],"mapped",[33276]],[[12166,12166],"mapped",[33292]],[[12167,12167],"mapped",[33307]],[[12168,12168],"mapped",[33311]],[[12169,12169],"mapped",[33390]],[[12170,12170],"mapped",[33394]],[[12171,12171],"mapped",[33400]],[[12172,12172],"mapped",[34381]],[[12173,12173],"mapped",[34411]],[[12174,12174],"mapped",[34880]],[[12175,12175],"mapped",[34892]],[[12176,12176],"mapped",[34915]],[[12177,12177],"mapped",[35198]],[[12178,12178],"mapped",[35211]],[[12179,12179],"mapped",[35282]],[[12180,12180],"mapped",[35328]],[[12181,12181],"mapped",[35895]],[[12182,12182],"mapped",[35910]],[[12183,12183],"mapped",[35925]],[[12184,12184],"mapped",[35960]],[[12185,12185],"mapped",[35997]],[[12186,12186],"mapped",[36196]],[[12187,12187],"mapped",[36208]],[[12188,12188],"mapped",[36275]],[[12189,12189],"mapped",[36523]],[[12190,12190],"mapped",[36554]],[[12191,12191],"mapped",[36763]],[[12192,12192],"mapped",[36784]],[[12193,12193],"mapped",[36789]],[[12194,12194],"mapped",[37009]],[[12195,12195],"mapped",[37193]],[[12196,12196],"mapped",[37318]],[[12197,12197],"mapped",[37324]],[[12198,12198],"mapped",[37329]],[[12199,12199],"mapped",[38263]],[[12200,12200],"mapped",[38272]],[[12201,12201],"mapped",[38428]],[[12202,12202],"mapped",[38582]],[[12203,12203],"mapped",[38585]],[[12204,12204],"mapped",[38632]],[[12205,12205],"mapped",[38737]],[[12206,12206],"mapped",[38750]],[[12207,12207],"mapped",[38754]],[[12208,12208],"mapped",[38761]],[[12209,12209],"mapped",[38859]],[[12210,12210],"mapped",[38893]],[[12211,12211],"mapped",[38899]],[[12212,12212],"mapped",[38913]],[[12213,12213],"mapped",[39080]],[[12214,12214],"mapped",[39131]],[[12215,12215],"mapped",[39135]],[[12216,12216],"mapped",[39318]],[[12217,12217],"mapped",[39321]],[[12218,12218],"mapped",[39340]],[[12219,12219],"mapped",[39592]],[[12220,12220],"mapped",[39640]],[[12221,12221],"mapped",[39647]],[[12222,12222],"mapped",[39717]],[[12223,12223],"mapped",[39727]],[[12224,12224],"mapped",[39730]],[[12225,12225],"mapped",[39740]],[[12226,12226],"mapped",[39770]],[[12227,12227],"mapped",[40165]],[[12228,12228],"mapped",[40565]],[[12229,12229],"mapped",[40575]],[[12230,12230],"mapped",[40613]],[[12231,12231],"mapped",[40635]],[[12232,12232],"mapped",[40643]],[[12233,12233],"mapped",[40653]],[[12234,12234],"mapped",[40657]],[[12235,12235],"mapped",[40697]],[[12236,12236],"mapped",[40701]],[[12237,12237],"mapped",[40718]],[[12238,12238],"mapped",[40723]],[[12239,12239],"mapped",[40736]],[[12240,12240],"mapped",[40763]],[[12241,12241],"mapped",[40778]],[[12242,12242],"mapped",[40786]],[[12243,12243],"mapped",[40845]],[[12244,12244],"mapped",[40860]],[[12245,12245],"mapped",[40864]],[[12246,12271],"disallowed"],[[12272,12283],"disallowed"],[[12284,12287],"disallowed"],[[12288,12288],"disallowed_STD3_mapped",[32]],[[12289,12289],"valid",[],"NV8"],[[12290,12290],"mapped",[46]],[[12291,12292],"valid",[],"NV8"],[[12293,12295],"valid"],[[12296,12329],"valid",[],"NV8"],[[12330,12333],"valid"],[[12334,12341],"valid",[],"NV8"],[[12342,12342],"mapped",[12306]],[[12343,12343],"valid",[],"NV8"],[[12344,12344],"mapped",[21313]],[[12345,12345],"mapped",[21316]],[[12346,12346],"mapped",[21317]],[[12347,12347],"valid",[],"NV8"],[[12348,12348],"valid"],[[12349,12349],"valid",[],"NV8"],[[12350,12350],"valid",[],"NV8"],[[12351,12351],"valid",[],"NV8"],[[12352,12352],"disallowed"],[[12353,12436],"valid"],[[12437,12438],"valid"],[[12439,12440],"disallowed"],[[12441,12442],"valid"],[[12443,12443],"disallowed_STD3_mapped",[32,12441]],[[12444,12444],"disallowed_STD3_mapped",[32,12442]],[[12445,12446],"valid"],[[12447,12447],"mapped",[12424,12426]],[[12448,12448],"valid",[],"NV8"],[[12449,12542],"valid"],[[12543,12543],"mapped",[12467,12488]],[[12544,12548],"disallowed"],[[12549,12588],"valid"],[[12589,12589],"valid"],[[12590,12592],"disallowed"],[[12593,12593],"mapped",[4352]],[[12594,12594],"mapped",[4353]],[[12595,12595],"mapped",[4522]],[[12596,12596],"mapped",[4354]],[[12597,12597],"mapped",[4524]],[[12598,12598],"mapped",[4525]],[[12599,12599],"mapped",[4355]],[[12600,12600],"mapped",[4356]],[[12601,12601],"mapped",[4357]],[[12602,12602],"mapped",[4528]],[[12603,12603],"mapped",[4529]],[[12604,12604],"mapped",[4530]],[[12605,12605],"mapped",[4531]],[[12606,12606],"mapped",[4532]],[[12607,12607],"mapped",[4533]],[[12608,12608],"mapped",[4378]],[[12609,12609],"mapped",[4358]],[[12610,12610],"mapped",[4359]],[[12611,12611],"mapped",[4360]],[[12612,12612],"mapped",[4385]],[[12613,12613],"mapped",[4361]],[[12614,12614],"mapped",[4362]],[[12615,12615],"mapped",[4363]],[[12616,12616],"mapped",[4364]],[[12617,12617],"mapped",[4365]],[[12618,12618],"mapped",[4366]],[[12619,12619],"mapped",[4367]],[[12620,12620],"mapped",[4368]],[[12621,12621],"mapped",[4369]],[[12622,12622],"mapped",[4370]],[[12623,12623],"mapped",[4449]],[[12624,12624],"mapped",[4450]],[[12625,12625],"mapped",[4451]],[[12626,12626],"mapped",[4452]],[[12627,12627],"mapped",[4453]],[[12628,12628],"mapped",[4454]],[[12629,12629],"mapped",[4455]],[[12630,12630],"mapped",[4456]],[[12631,12631],"mapped",[4457]],[[12632,12632],"mapped",[4458]],[[12633,12633],"mapped",[4459]],[[12634,12634],"mapped",[4460]],[[12635,12635],"mapped",[4461]],[[12636,12636],"mapped",[4462]],[[12637,12637],"mapped",[4463]],[[12638,12638],"mapped",[4464]],[[12639,12639],"mapped",[4465]],[[12640,12640],"mapped",[4466]],[[12641,12641],"mapped",[4467]],[[12642,12642],"mapped",[4468]],[[12643,12643],"mapped",[4469]],[[12644,12644],"disallowed"],[[12645,12645],"mapped",[4372]],[[12646,12646],"mapped",[4373]],[[12647,12647],"mapped",[4551]],[[12648,12648],"mapped",[4552]],[[12649,12649],"mapped",[4556]],[[12650,12650],"mapped",[4558]],[[12651,12651],"mapped",[4563]],[[12652,12652],"mapped",[4567]],[[12653,12653],"mapped",[4569]],[[12654,12654],"mapped",[4380]],[[12655,12655],"mapped",[4573]],[[12656,12656],"mapped",[4575]],[[12657,12657],"mapped",[4381]],[[12658,12658],"mapped",[4382]],[[12659,12659],"mapped",[4384]],[[12660,12660],"mapped",[4386]],[[12661,12661],"mapped",[4387]],[[12662,12662],"mapped",[4391]],[[12663,12663],"mapped",[4393]],[[12664,12664],"mapped",[4395]],[[12665,12665],"mapped",[4396]],[[12666,12666],"mapped",[4397]],[[12667,12667],"mapped",[4398]],[[12668,12668],"mapped",[4399]],[[12669,12669],"mapped",[4402]],[[12670,12670],"mapped",[4406]],[[12671,12671],"mapped",[4416]],[[12672,12672],"mapped",[4423]],[[12673,12673],"mapped",[4428]],[[12674,12674],"mapped",[4593]],[[12675,12675],"mapped",[4594]],[[12676,12676],"mapped",[4439]],[[12677,12677],"mapped",[4440]],[[12678,12678],"mapped",[4441]],[[12679,12679],"mapped",[4484]],[[12680,12680],"mapped",[4485]],[[12681,12681],"mapped",[4488]],[[12682,12682],"mapped",[4497]],[[12683,12683],"mapped",[4498]],[[12684,12684],"mapped",[4500]],[[12685,12685],"mapped",[4510]],[[12686,12686],"mapped",[4513]],[[12687,12687],"disallowed"],[[12688,12689],"valid",[],"NV8"],[[12690,12690],"mapped",[19968]],[[12691,12691],"mapped",[20108]],[[12692,12692],"mapped",[19977]],[[12693,12693],"mapped",[22235]],[[12694,12694],"mapped",[19978]],[[12695,12695],"mapped",[20013]],[[12696,12696],"mapped",[19979]],[[12697,12697],"mapped",[30002]],[[12698,12698],"mapped",[20057]],[[12699,12699],"mapped",[19993]],[[12700,12700],"mapped",[19969]],[[12701,12701],"mapped",[22825]],[[12702,12702],"mapped",[22320]],[[12703,12703],"mapped",[20154]],[[12704,12727],"valid"],[[12728,12730],"valid"],[[12731,12735],"disallowed"],[[12736,12751],"valid",[],"NV8"],[[12752,12771],"valid",[],"NV8"],[[12772,12783],"disallowed"],[[12784,12799],"valid"],[[12800,12800],"disallowed_STD3_mapped",[40,4352,41]],[[12801,12801],"disallowed_STD3_mapped",[40,4354,41]],[[12802,12802],"disallowed_STD3_mapped",[40,4355,41]],[[12803,12803],"disallowed_STD3_mapped",[40,4357,41]],[[12804,12804],"disallowed_STD3_mapped",[40,4358,41]],[[12805,12805],"disallowed_STD3_mapped",[40,4359,41]],[[12806,12806],"disallowed_STD3_mapped",[40,4361,41]],[[12807,12807],"disallowed_STD3_mapped",[40,4363,41]],[[12808,12808],"disallowed_STD3_mapped",[40,4364,41]],[[12809,12809],"disallowed_STD3_mapped",[40,4366,41]],[[12810,12810],"disallowed_STD3_mapped",[40,4367,41]],[[12811,12811],"disallowed_STD3_mapped",[40,4368,41]],[[12812,12812],"disallowed_STD3_mapped",[40,4369,41]],[[12813,12813],"disallowed_STD3_mapped",[40,4370,41]],[[12814,12814],"disallowed_STD3_mapped",[40,44032,41]],[[12815,12815],"disallowed_STD3_mapped",[40,45208,41]],[[12816,12816],"disallowed_STD3_mapped",[40,45796,41]],[[12817,12817],"disallowed_STD3_mapped",[40,46972,41]],[[12818,12818],"disallowed_STD3_mapped",[40,47560,41]],[[12819,12819],"disallowed_STD3_mapped",[40,48148,41]],[[12820,12820],"disallowed_STD3_mapped",[40,49324,41]],[[12821,12821],"disallowed_STD3_mapped",[40,50500,41]],[[12822,12822],"disallowed_STD3_mapped",[40,51088,41]],[[12823,12823],"disallowed_STD3_mapped",[40,52264,41]],[[12824,12824],"disallowed_STD3_mapped",[40,52852,41]],[[12825,12825],"disallowed_STD3_mapped",[40,53440,41]],[[12826,12826],"disallowed_STD3_mapped",[40,54028,41]],[[12827,12827],"disallowed_STD3_mapped",[40,54616,41]],[[12828,12828],"disallowed_STD3_mapped",[40,51452,41]],[[12829,12829],"disallowed_STD3_mapped",[40,50724,51204,41]],[[12830,12830],"disallowed_STD3_mapped",[40,50724,54980,41]],[[12831,12831],"disallowed"],[[12832,12832],"disallowed_STD3_mapped",[40,19968,41]],[[12833,12833],"disallowed_STD3_mapped",[40,20108,41]],[[12834,12834],"disallowed_STD3_mapped",[40,19977,41]],[[12835,12835],"disallowed_STD3_mapped",[40,22235,41]],[[12836,12836],"disallowed_STD3_mapped",[40,20116,41]],[[12837,12837],"disallowed_STD3_mapped",[40,20845,41]],[[12838,12838],"disallowed_STD3_mapped",[40,19971,41]],[[12839,12839],"disallowed_STD3_mapped",[40,20843,41]],[[12840,12840],"disallowed_STD3_mapped",[40,20061,41]],[[12841,12841],"disallowed_STD3_mapped",[40,21313,41]],[[12842,12842],"disallowed_STD3_mapped",[40,26376,41]],[[12843,12843],"disallowed_STD3_mapped",[40,28779,41]],[[12844,12844],"disallowed_STD3_mapped",[40,27700,41]],[[12845,12845],"disallowed_STD3_mapped",[40,26408,41]],[[12846,12846],"disallowed_STD3_mapped",[40,37329,41]],[[12847,12847],"disallowed_STD3_mapped",[40,22303,41]],[[12848,12848],"disallowed_STD3_mapped",[40,26085,41]],[[12849,12849],"disallowed_STD3_mapped",[40,26666,41]],[[12850,12850],"disallowed_STD3_mapped",[40,26377,41]],[[12851,12851],"disallowed_STD3_mapped",[40,31038,41]],[[12852,12852],"disallowed_STD3_mapped",[40,21517,41]],[[12853,12853],"disallowed_STD3_mapped",[40,29305,41]],[[12854,12854],"disallowed_STD3_mapped",[40,36001,41]],[[12855,12855],"disallowed_STD3_mapped",[40,31069,41]],[[12856,12856],"disallowed_STD3_mapped",[40,21172,41]],[[12857,12857],"disallowed_STD3_mapped",[40,20195,41]],[[12858,12858],"disallowed_STD3_mapped",[40,21628,41]],[[12859,12859],"disallowed_STD3_mapped",[40,23398,41]],[[12860,12860],"disallowed_STD3_mapped",[40,30435,41]],[[12861,12861],"disallowed_STD3_mapped",[40,20225,41]],[[12862,12862],"disallowed_STD3_mapped",[40,36039,41]],[[12863,12863],"disallowed_STD3_mapped",[40,21332,41]],[[12864,12864],"disallowed_STD3_mapped",[40,31085,41]],[[12865,12865],"disallowed_STD3_mapped",[40,20241,41]],[[12866,12866],"disallowed_STD3_mapped",[40,33258,41]],[[12867,12867],"disallowed_STD3_mapped",[40,33267,41]],[[12868,12868],"mapped",[21839]],[[12869,12869],"mapped",[24188]],[[12870,12870],"mapped",[25991]],[[12871,12871],"mapped",[31631]],[[12872,12879],"valid",[],"NV8"],[[12880,12880],"mapped",[112,116,101]],[[12881,12881],"mapped",[50,49]],[[12882,12882],"mapped",[50,50]],[[12883,12883],"mapped",[50,51]],[[12884,12884],"mapped",[50,52]],[[12885,12885],"mapped",[50,53]],[[12886,12886],"mapped",[50,54]],[[12887,12887],"mapped",[50,55]],[[12888,12888],"mapped",[50,56]],[[12889,12889],"mapped",[50,57]],[[12890,12890],"mapped",[51,48]],[[12891,12891],"mapped",[51,49]],[[12892,12892],"mapped",[51,50]],[[12893,12893],"mapped",[51,51]],[[12894,12894],"mapped",[51,52]],[[12895,12895],"mapped",[51,53]],[[12896,12896],"mapped",[4352]],[[12897,12897],"mapped",[4354]],[[12898,12898],"mapped",[4355]],[[12899,12899],"mapped",[4357]],[[12900,12900],"mapped",[4358]],[[12901,12901],"mapped",[4359]],[[12902,12902],"mapped",[4361]],[[12903,12903],"mapped",[4363]],[[12904,12904],"mapped",[4364]],[[12905,12905],"mapped",[4366]],[[12906,12906],"mapped",[4367]],[[12907,12907],"mapped",[4368]],[[12908,12908],"mapped",[4369]],[[12909,12909],"mapped",[4370]],[[12910,12910],"mapped",[44032]],[[12911,12911],"mapped",[45208]],[[12912,12912],"mapped",[45796]],[[12913,12913],"mapped",[46972]],[[12914,12914],"mapped",[47560]],[[12915,12915],"mapped",[48148]],[[12916,12916],"mapped",[49324]],[[12917,12917],"mapped",[50500]],[[12918,12918],"mapped",[51088]],[[12919,12919],"mapped",[52264]],[[12920,12920],"mapped",[52852]],[[12921,12921],"mapped",[53440]],[[12922,12922],"mapped",[54028]],[[12923,12923],"mapped",[54616]],[[12924,12924],"mapped",[52280,44256]],[[12925,12925],"mapped",[51452,51032]],[[12926,12926],"mapped",[50864]],[[12927,12927],"valid",[],"NV8"],[[12928,12928],"mapped",[19968]],[[12929,12929],"mapped",[20108]],[[12930,12930],"mapped",[19977]],[[12931,12931],"mapped",[22235]],[[12932,12932],"mapped",[20116]],[[12933,12933],"mapped",[20845]],[[12934,12934],"mapped",[19971]],[[12935,12935],"mapped",[20843]],[[12936,12936],"mapped",[20061]],[[12937,12937],"mapped",[21313]],[[12938,12938],"mapped",[26376]],[[12939,12939],"mapped",[28779]],[[12940,12940],"mapped",[27700]],[[12941,12941],"mapped",[26408]],[[12942,12942],"mapped",[37329]],[[12943,12943],"mapped",[22303]],[[12944,12944],"mapped",[26085]],[[12945,12945],"mapped",[26666]],[[12946,12946],"mapped",[26377]],[[12947,12947],"mapped",[31038]],[[12948,12948],"mapped",[21517]],[[12949,12949],"mapped",[29305]],[[12950,12950],"mapped",[36001]],[[12951,12951],"mapped",[31069]],[[12952,12952],"mapped",[21172]],[[12953,12953],"mapped",[31192]],[[12954,12954],"mapped",[30007]],[[12955,12955],"mapped",[22899]],[[12956,12956],"mapped",[36969]],[[12957,12957],"mapped",[20778]],[[12958,12958],"mapped",[21360]],[[12959,12959],"mapped",[27880]],[[12960,12960],"mapped",[38917]],[[12961,12961],"mapped",[20241]],[[12962,12962],"mapped",[20889]],[[12963,12963],"mapped",[27491]],[[12964,12964],"mapped",[19978]],[[12965,12965],"mapped",[20013]],[[12966,12966],"mapped",[19979]],[[12967,12967],"mapped",[24038]],[[12968,12968],"mapped",[21491]],[[12969,12969],"mapped",[21307]],[[12970,12970],"mapped",[23447]],[[12971,12971],"mapped",[23398]],[[12972,12972],"mapped",[30435]],[[12973,12973],"mapped",[20225]],[[12974,12974],"mapped",[36039]],[[12975,12975],"mapped",[21332]],[[12976,12976],"mapped",[22812]],[[12977,12977],"mapped",[51,54]],[[12978,12978],"mapped",[51,55]],[[12979,12979],"mapped",[51,56]],[[12980,12980],"mapped",[51,57]],[[12981,12981],"mapped",[52,48]],[[12982,12982],"mapped",[52,49]],[[12983,12983],"mapped",[52,50]],[[12984,12984],"mapped",[52,51]],[[12985,12985],"mapped",[52,52]],[[12986,12986],"mapped",[52,53]],[[12987,12987],"mapped",[52,54]],[[12988,12988],"mapped",[52,55]],[[12989,12989],"mapped",[52,56]],[[12990,12990],"mapped",[52,57]],[[12991,12991],"mapped",[53,48]],[[12992,12992],"mapped",[49,26376]],[[12993,12993],"mapped",[50,26376]],[[12994,12994],"mapped",[51,26376]],[[12995,12995],"mapped",[52,26376]],[[12996,12996],"mapped",[53,26376]],[[12997,12997],"mapped",[54,26376]],[[12998,12998],"mapped",[55,26376]],[[12999,12999],"mapped",[56,26376]],[[13000,13000],"mapped",[57,26376]],[[13001,13001],"mapped",[49,48,26376]],[[13002,13002],"mapped",[49,49,26376]],[[13003,13003],"mapped",[49,50,26376]],[[13004,13004],"mapped",[104,103]],[[13005,13005],"mapped",[101,114,103]],[[13006,13006],"mapped",[101,118]],[[13007,13007],"mapped",[108,116,100]],[[13008,13008],"mapped",[12450]],[[13009,13009],"mapped",[12452]],[[13010,13010],"mapped",[12454]],[[13011,13011],"mapped",[12456]],[[13012,13012],"mapped",[12458]],[[13013,13013],"mapped",[12459]],[[13014,13014],"mapped",[12461]],[[13015,13015],"mapped",[12463]],[[13016,13016],"mapped",[12465]],[[13017,13017],"mapped",[12467]],[[13018,13018],"mapped",[12469]],[[13019,13019],"mapped",[12471]],[[13020,13020],"mapped",[12473]],[[13021,13021],"mapped",[12475]],[[13022,13022],"mapped",[12477]],[[13023,13023],"mapped",[12479]],[[13024,13024],"mapped",[12481]],[[13025,13025],"mapped",[12484]],[[13026,13026],"mapped",[12486]],[[13027,13027],"mapped",[12488]],[[13028,13028],"mapped",[12490]],[[13029,13029],"mapped",[12491]],[[13030,13030],"mapped",[12492]],[[13031,13031],"mapped",[12493]],[[13032,13032],"mapped",[12494]],[[13033,13033],"mapped",[12495]],[[13034,13034],"mapped",[12498]],[[13035,13035],"mapped",[12501]],[[13036,13036],"mapped",[12504]],[[13037,13037],"mapped",[12507]],[[13038,13038],"mapped",[12510]],[[13039,13039],"mapped",[12511]],[[13040,13040],"mapped",[12512]],[[13041,13041],"mapped",[12513]],[[13042,13042],"mapped",[12514]],[[13043,13043],"mapped",[12516]],[[13044,13044],"mapped",[12518]],[[13045,13045],"mapped",[12520]],[[13046,13046],"mapped",[12521]],[[13047,13047],"mapped",[12522]],[[13048,13048],"mapped",[12523]],[[13049,13049],"mapped",[12524]],[[13050,13050],"mapped",[12525]],[[13051,13051],"mapped",[12527]],[[13052,13052],"mapped",[12528]],[[13053,13053],"mapped",[12529]],[[13054,13054],"mapped",[12530]],[[13055,13055],"disallowed"],[[13056,13056],"mapped",[12450,12497,12540,12488]],[[13057,13057],"mapped",[12450,12523,12501,12449]],[[13058,13058],"mapped",[12450,12531,12506,12450]],[[13059,13059],"mapped",[12450,12540,12523]],[[13060,13060],"mapped",[12452,12491,12531,12464]],[[13061,13061],"mapped",[12452,12531,12481]],[[13062,13062],"mapped",[12454,12457,12531]],[[13063,13063],"mapped",[12456,12473,12463,12540,12489]],[[13064,13064],"mapped",[12456,12540,12459,12540]],[[13065,13065],"mapped",[12458,12531,12473]],[[13066,13066],"mapped",[12458,12540,12512]],[[13067,13067],"mapped",[12459,12452,12522]],[[13068,13068],"mapped",[12459,12521,12483,12488]],[[13069,13069],"mapped",[12459,12525,12522,12540]],[[13070,13070],"mapped",[12460,12525,12531]],[[13071,13071],"mapped",[12460,12531,12510]],[[13072,13072],"mapped",[12462,12460]],[[13073,13073],"mapped",[12462,12491,12540]],[[13074,13074],"mapped",[12461,12517,12522,12540]],[[13075,13075],"mapped",[12462,12523,12480,12540]],[[13076,13076],"mapped",[12461,12525]],[[13077,13077],"mapped",[12461,12525,12464,12521,12512]],[[13078,13078],"mapped",[12461,12525,12513,12540,12488,12523]],[[13079,13079],"mapped",[12461,12525,12527,12483,12488]],[[13080,13080],"mapped",[12464,12521,12512]],[[13081,13081],"mapped",[12464,12521,12512,12488,12531]],[[13082,13082],"mapped",[12463,12523,12476,12452,12525]],[[13083,13083],"mapped",[12463,12525,12540,12493]],[[13084,13084],"mapped",[12465,12540,12473]],[[13085,13085],"mapped",[12467,12523,12490]],[[13086,13086],"mapped",[12467,12540,12509]],[[13087,13087],"mapped",[12469,12452,12463,12523]],[[13088,13088],"mapped",[12469,12531,12481,12540,12512]],[[13089,13089],"mapped",[12471,12522,12531,12464]],[[13090,13090],"mapped",[12475,12531,12481]],[[13091,13091],"mapped",[12475,12531,12488]],[[13092,13092],"mapped",[12480,12540,12473]],[[13093,13093],"mapped",[12487,12471]],[[13094,13094],"mapped",[12489,12523]],[[13095,13095],"mapped",[12488,12531]],[[13096,13096],"mapped",[12490,12494]],[[13097,13097],"mapped",[12494,12483,12488]],[[13098,13098],"mapped",[12495,12452,12484]],[[13099,13099],"mapped",[12497,12540,12475,12531,12488]],[[13100,13100],"mapped",[12497,12540,12484]],[[13101,13101],"mapped",[12496,12540,12524,12523]],[[13102,13102],"mapped",[12500,12450,12473,12488,12523]],[[13103,13103],"mapped",[12500,12463,12523]],[[13104,13104],"mapped",[12500,12467]],[[13105,13105],"mapped",[12499,12523]],[[13106,13106],"mapped",[12501,12449,12521,12483,12489]],[[13107,13107],"mapped",[12501,12451,12540,12488]],[[13108,13108],"mapped",[12502,12483,12471,12455,12523]],[[13109,13109],"mapped",[12501,12521,12531]],[[13110,13110],"mapped",[12504,12463,12479,12540,12523]],[[13111,13111],"mapped",[12506,12477]],[[13112,13112],"mapped",[12506,12491,12498]],[[13113,13113],"mapped",[12504,12523,12484]],[[13114,13114],"mapped",[12506,12531,12473]],[[13115,13115],"mapped",[12506,12540,12472]],[[13116,13116],"mapped",[12505,12540,12479]],[[13117,13117],"mapped",[12509,12452,12531,12488]],[[13118,13118],"mapped",[12508,12523,12488]],[[13119,13119],"mapped",[12507,12531]],[[13120,13120],"mapped",[12509,12531,12489]],[[13121,13121],"mapped",[12507,12540,12523]],[[13122,13122],"mapped",[12507,12540,12531]],[[13123,13123],"mapped",[12510,12452,12463,12525]],[[13124,13124],"mapped",[12510,12452,12523]],[[13125,13125],"mapped",[12510,12483,12495]],[[13126,13126],"mapped",[12510,12523,12463]],[[13127,13127],"mapped",[12510,12531,12471,12519,12531]],[[13128,13128],"mapped",[12511,12463,12525,12531]],[[13129,13129],"mapped",[12511,12522]],[[13130,13130],"mapped",[12511,12522,12496,12540,12523]],[[13131,13131],"mapped",[12513,12460]],[[13132,13132],"mapped",[12513,12460,12488,12531]],[[13133,13133],"mapped",[12513,12540,12488,12523]],[[13134,13134],"mapped",[12516,12540,12489]],[[13135,13135],"mapped",[12516,12540,12523]],[[13136,13136],"mapped",[12518,12450,12531]],[[13137,13137],"mapped",[12522,12483,12488,12523]],[[13138,13138],"mapped",[12522,12521]],[[13139,13139],"mapped",[12523,12500,12540]],[[13140,13140],"mapped",[12523,12540,12502,12523]],[[13141,13141],"mapped",[12524,12512]],[[13142,13142],"mapped",[12524,12531,12488,12466,12531]],[[13143,13143],"mapped",[12527,12483,12488]],[[13144,13144],"mapped",[48,28857]],[[13145,13145],"mapped",[49,28857]],[[13146,13146],"mapped",[50,28857]],[[13147,13147],"mapped",[51,28857]],[[13148,13148],"mapped",[52,28857]],[[13149,13149],"mapped",[53,28857]],[[13150,13150],"mapped",[54,28857]],[[13151,13151],"mapped",[55,28857]],[[13152,13152],"mapped",[56,28857]],[[13153,13153],"mapped",[57,28857]],[[13154,13154],"mapped",[49,48,28857]],[[13155,13155],"mapped",[49,49,28857]],[[13156,13156],"mapped",[49,50,28857]],[[13157,13157],"mapped",[49,51,28857]],[[13158,13158],"mapped",[49,52,28857]],[[13159,13159],"mapped",[49,53,28857]],[[13160,13160],"mapped",[49,54,28857]],[[13161,13161],"mapped",[49,55,28857]],[[13162,13162],"mapped",[49,56,28857]],[[13163,13163],"mapped",[49,57,28857]],[[13164,13164],"mapped",[50,48,28857]],[[13165,13165],"mapped",[50,49,28857]],[[13166,13166],"mapped",[50,50,28857]],[[13167,13167],"mapped",[50,51,28857]],[[13168,13168],"mapped",[50,52,28857]],[[13169,13169],"mapped",[104,112,97]],[[13170,13170],"mapped",[100,97]],[[13171,13171],"mapped",[97,117]],[[13172,13172],"mapped",[98,97,114]],[[13173,13173],"mapped",[111,118]],[[13174,13174],"mapped",[112,99]],[[13175,13175],"mapped",[100,109]],[[13176,13176],"mapped",[100,109,50]],[[13177,13177],"mapped",[100,109,51]],[[13178,13178],"mapped",[105,117]],[[13179,13179],"mapped",[24179,25104]],[[13180,13180],"mapped",[26157,21644]],[[13181,13181],"mapped",[22823,27491]],[[13182,13182],"mapped",[26126,27835]],[[13183,13183],"mapped",[26666,24335,20250,31038]],[[13184,13184],"mapped",[112,97]],[[13185,13185],"mapped",[110,97]],[[13186,13186],"mapped",[956,97]],[[13187,13187],"mapped",[109,97]],[[13188,13188],"mapped",[107,97]],[[13189,13189],"mapped",[107,98]],[[13190,13190],"mapped",[109,98]],[[13191,13191],"mapped",[103,98]],[[13192,13192],"mapped",[99,97,108]],[[13193,13193],"mapped",[107,99,97,108]],[[13194,13194],"mapped",[112,102]],[[13195,13195],"mapped",[110,102]],[[13196,13196],"mapped",[956,102]],[[13197,13197],"mapped",[956,103]],[[13198,13198],"mapped",[109,103]],[[13199,13199],"mapped",[107,103]],[[13200,13200],"mapped",[104,122]],[[13201,13201],"mapped",[107,104,122]],[[13202,13202],"mapped",[109,104,122]],[[13203,13203],"mapped",[103,104,122]],[[13204,13204],"mapped",[116,104,122]],[[13205,13205],"mapped",[956,108]],[[13206,13206],"mapped",[109,108]],[[13207,13207],"mapped",[100,108]],[[13208,13208],"mapped",[107,108]],[[13209,13209],"mapped",[102,109]],[[13210,13210],"mapped",[110,109]],[[13211,13211],"mapped",[956,109]],[[13212,13212],"mapped",[109,109]],[[13213,13213],"mapped",[99,109]],[[13214,13214],"mapped",[107,109]],[[13215,13215],"mapped",[109,109,50]],[[13216,13216],"mapped",[99,109,50]],[[13217,13217],"mapped",[109,50]],[[13218,13218],"mapped",[107,109,50]],[[13219,13219],"mapped",[109,109,51]],[[13220,13220],"mapped",[99,109,51]],[[13221,13221],"mapped",[109,51]],[[13222,13222],"mapped",[107,109,51]],[[13223,13223],"mapped",[109,8725,115]],[[13224,13224],"mapped",[109,8725,115,50]],[[13225,13225],"mapped",[112,97]],[[13226,13226],"mapped",[107,112,97]],[[13227,13227],"mapped",[109,112,97]],[[13228,13228],"mapped",[103,112,97]],[[13229,13229],"mapped",[114,97,100]],[[13230,13230],"mapped",[114,97,100,8725,115]],[[13231,13231],"mapped",[114,97,100,8725,115,50]],[[13232,13232],"mapped",[112,115]],[[13233,13233],"mapped",[110,115]],[[13234,13234],"mapped",[956,115]],[[13235,13235],"mapped",[109,115]],[[13236,13236],"mapped",[112,118]],[[13237,13237],"mapped",[110,118]],[[13238,13238],"mapped",[956,118]],[[13239,13239],"mapped",[109,118]],[[13240,13240],"mapped",[107,118]],[[13241,13241],"mapped",[109,118]],[[13242,13242],"mapped",[112,119]],[[13243,13243],"mapped",[110,119]],[[13244,13244],"mapped",[956,119]],[[13245,13245],"mapped",[109,119]],[[13246,13246],"mapped",[107,119]],[[13247,13247],"mapped",[109,119]],[[13248,13248],"mapped",[107,969]],[[13249,13249],"mapped",[109,969]],[[13250,13250],"disallowed"],[[13251,13251],"mapped",[98,113]],[[13252,13252],"mapped",[99,99]],[[13253,13253],"mapped",[99,100]],[[13254,13254],"mapped",[99,8725,107,103]],[[13255,13255],"disallowed"],[[13256,13256],"mapped",[100,98]],[[13257,13257],"mapped",[103,121]],[[13258,13258],"mapped",[104,97]],[[13259,13259],"mapped",[104,112]],[[13260,13260],"mapped",[105,110]],[[13261,13261],"mapped",[107,107]],[[13262,13262],"mapped",[107,109]],[[13263,13263],"mapped",[107,116]],[[13264,13264],"mapped",[108,109]],[[13265,13265],"mapped",[108,110]],[[13266,13266],"mapped",[108,111,103]],[[13267,13267],"mapped",[108,120]],[[13268,13268],"mapped",[109,98]],[[13269,13269],"mapped",[109,105,108]],[[13270,13270],"mapped",[109,111,108]],[[13271,13271],"mapped",[112,104]],[[13272,13272],"disallowed"],[[13273,13273],"mapped",[112,112,109]],[[13274,13274],"mapped",[112,114]],[[13275,13275],"mapped",[115,114]],[[13276,13276],"mapped",[115,118]],[[13277,13277],"mapped",[119,98]],[[13278,13278],"mapped",[118,8725,109]],[[13279,13279],"mapped",[97,8725,109]],[[13280,13280],"mapped",[49,26085]],[[13281,13281],"mapped",[50,26085]],[[13282,13282],"mapped",[51,26085]],[[13283,13283],"mapped",[52,26085]],[[13284,13284],"mapped",[53,26085]],[[13285,13285],"mapped",[54,26085]],[[13286,13286],"mapped",[55,26085]],[[13287,13287],"mapped",[56,26085]],[[13288,13288],"mapped",[57,26085]],[[13289,13289],"mapped",[49,48,26085]],[[13290,13290],"mapped",[49,49,26085]],[[13291,13291],"mapped",[49,50,26085]],[[13292,13292],"mapped",[49,51,26085]],[[13293,13293],"mapped",[49,52,26085]],[[13294,13294],"mapped",[49,53,26085]],[[13295,13295],"mapped",[49,54,26085]],[[13296,13296],"mapped",[49,55,26085]],[[13297,13297],"mapped",[49,56,26085]],[[13298,13298],"mapped",[49,57,26085]],[[13299,13299],"mapped",[50,48,26085]],[[13300,13300],"mapped",[50,49,26085]],[[13301,13301],"mapped",[50,50,26085]],[[13302,13302],"mapped",[50,51,26085]],[[13303,13303],"mapped",[50,52,26085]],[[13304,13304],"mapped",[50,53,26085]],[[13305,13305],"mapped",[50,54,26085]],[[13306,13306],"mapped",[50,55,26085]],[[13307,13307],"mapped",[50,56,26085]],[[13308,13308],"mapped",[50,57,26085]],[[13309,13309],"mapped",[51,48,26085]],[[13310,13310],"mapped",[51,49,26085]],[[13311,13311],"mapped",[103,97,108]],[[13312,19893],"valid"],[[19894,19903],"disallowed"],[[19904,19967],"valid",[],"NV8"],[[19968,40869],"valid"],[[40870,40891],"valid"],[[40892,40899],"valid"],[[40900,40907],"valid"],[[40908,40908],"valid"],[[40909,40917],"valid"],[[40918,40959],"disallowed"],[[40960,42124],"valid"],[[42125,42127],"disallowed"],[[42128,42145],"valid",[],"NV8"],[[42146,42147],"valid",[],"NV8"],[[42148,42163],"valid",[],"NV8"],[[42164,42164],"valid",[],"NV8"],[[42165,42176],"valid",[],"NV8"],[[42177,42177],"valid",[],"NV8"],[[42178,42180],"valid",[],"NV8"],[[42181,42181],"valid",[],"NV8"],[[42182,42182],"valid",[],"NV8"],[[42183,42191],"disallowed"],[[42192,42237],"valid"],[[42238,42239],"valid",[],"NV8"],[[42240,42508],"valid"],[[42509,42511],"valid",[],"NV8"],[[42512,42539],"valid"],[[42540,42559],"disallowed"],[[42560,42560],"mapped",[42561]],[[42561,42561],"valid"],[[42562,42562],"mapped",[42563]],[[42563,42563],"valid"],[[42564,42564],"mapped",[42565]],[[42565,42565],"valid"],[[42566,42566],"mapped",[42567]],[[42567,42567],"valid"],[[42568,42568],"mapped",[42569]],[[42569,42569],"valid"],[[42570,42570],"mapped",[42571]],[[42571,42571],"valid"],[[42572,42572],"mapped",[42573]],[[42573,42573],"valid"],[[42574,42574],"mapped",[42575]],[[42575,42575],"valid"],[[42576,42576],"mapped",[42577]],[[42577,42577],"valid"],[[42578,42578],"mapped",[42579]],[[42579,42579],"valid"],[[42580,42580],"mapped",[42581]],[[42581,42581],"valid"],[[42582,42582],"mapped",[42583]],[[42583,42583],"valid"],[[42584,42584],"mapped",[42585]],[[42585,42585],"valid"],[[42586,42586],"mapped",[42587]],[[42587,42587],"valid"],[[42588,42588],"mapped",[42589]],[[42589,42589],"valid"],[[42590,42590],"mapped",[42591]],[[42591,42591],"valid"],[[42592,42592],"mapped",[42593]],[[42593,42593],"valid"],[[42594,42594],"mapped",[42595]],[[42595,42595],"valid"],[[42596,42596],"mapped",[42597]],[[42597,42597],"valid"],[[42598,42598],"mapped",[42599]],[[42599,42599],"valid"],[[42600,42600],"mapped",[42601]],[[42601,42601],"valid"],[[42602,42602],"mapped",[42603]],[[42603,42603],"valid"],[[42604,42604],"mapped",[42605]],[[42605,42607],"valid"],[[42608,42611],"valid",[],"NV8"],[[42612,42619],"valid"],[[42620,42621],"valid"],[[42622,42622],"valid",[],"NV8"],[[42623,42623],"valid"],[[42624,42624],"mapped",[42625]],[[42625,42625],"valid"],[[42626,42626],"mapped",[42627]],[[42627,42627],"valid"],[[42628,42628],"mapped",[42629]],[[42629,42629],"valid"],[[42630,42630],"mapped",[42631]],[[42631,42631],"valid"],[[42632,42632],"mapped",[42633]],[[42633,42633],"valid"],[[42634,42634],"mapped",[42635]],[[42635,42635],"valid"],[[42636,42636],"mapped",[42637]],[[42637,42637],"valid"],[[42638,42638],"mapped",[42639]],[[42639,42639],"valid"],[[42640,42640],"mapped",[42641]],[[42641,42641],"valid"],[[42642,42642],"mapped",[42643]],[[42643,42643],"valid"],[[42644,42644],"mapped",[42645]],[[42645,42645],"valid"],[[42646,42646],"mapped",[42647]],[[42647,42647],"valid"],[[42648,42648],"mapped",[42649]],[[42649,42649],"valid"],[[42650,42650],"mapped",[42651]],[[42651,42651],"valid"],[[42652,42652],"mapped",[1098]],[[42653,42653],"mapped",[1100]],[[42654,42654],"valid"],[[42655,42655],"valid"],[[42656,42725],"valid"],[[42726,42735],"valid",[],"NV8"],[[42736,42737],"valid"],[[42738,42743],"valid",[],"NV8"],[[42744,42751],"disallowed"],[[42752,42774],"valid",[],"NV8"],[[42775,42778],"valid"],[[42779,42783],"valid"],[[42784,42785],"valid",[],"NV8"],[[42786,42786],"mapped",[42787]],[[42787,42787],"valid"],[[42788,42788],"mapped",[42789]],[[42789,42789],"valid"],[[42790,42790],"mapped",[42791]],[[42791,42791],"valid"],[[42792,42792],"mapped",[42793]],[[42793,42793],"valid"],[[42794,42794],"mapped",[42795]],[[42795,42795],"valid"],[[42796,42796],"mapped",[42797]],[[42797,42797],"valid"],[[42798,42798],"mapped",[42799]],[[42799,42801],"valid"],[[42802,42802],"mapped",[42803]],[[42803,42803],"valid"],[[42804,42804],"mapped",[42805]],[[42805,42805],"valid"],[[42806,42806],"mapped",[42807]],[[42807,42807],"valid"],[[42808,42808],"mapped",[42809]],[[42809,42809],"valid"],[[42810,42810],"mapped",[42811]],[[42811,42811],"valid"],[[42812,42812],"mapped",[42813]],[[42813,42813],"valid"],[[42814,42814],"mapped",[42815]],[[42815,42815],"valid"],[[42816,42816],"mapped",[42817]],[[42817,42817],"valid"],[[42818,42818],"mapped",[42819]],[[42819,42819],"valid"],[[42820,42820],"mapped",[42821]],[[42821,42821],"valid"],[[42822,42822],"mapped",[42823]],[[42823,42823],"valid"],[[42824,42824],"mapped",[42825]],[[42825,42825],"valid"],[[42826,42826],"mapped",[42827]],[[42827,42827],"valid"],[[42828,42828],"mapped",[42829]],[[42829,42829],"valid"],[[42830,42830],"mapped",[42831]],[[42831,42831],"valid"],[[42832,42832],"mapped",[42833]],[[42833,42833],"valid"],[[42834,42834],"mapped",[42835]],[[42835,42835],"valid"],[[42836,42836],"mapped",[42837]],[[42837,42837],"valid"],[[42838,42838],"mapped",[42839]],[[42839,42839],"valid"],[[42840,42840],"mapped",[42841]],[[42841,42841],"valid"],[[42842,42842],"mapped",[42843]],[[42843,42843],"valid"],[[42844,42844],"mapped",[42845]],[[42845,42845],"valid"],[[42846,42846],"mapped",[42847]],[[42847,42847],"valid"],[[42848,42848],"mapped",[42849]],[[42849,42849],"valid"],[[42850,42850],"mapped",[42851]],[[42851,42851],"valid"],[[42852,42852],"mapped",[42853]],[[42853,42853],"valid"],[[42854,42854],"mapped",[42855]],[[42855,42855],"valid"],[[42856,42856],"mapped",[42857]],[[42857,42857],"valid"],[[42858,42858],"mapped",[42859]],[[42859,42859],"valid"],[[42860,42860],"mapped",[42861]],[[42861,42861],"valid"],[[42862,42862],"mapped",[42863]],[[42863,42863],"valid"],[[42864,42864],"mapped",[42863]],[[42865,42872],"valid"],[[42873,42873],"mapped",[42874]],[[42874,42874],"valid"],[[42875,42875],"mapped",[42876]],[[42876,42876],"valid"],[[42877,42877],"mapped",[7545]],[[42878,42878],"mapped",[42879]],[[42879,42879],"valid"],[[42880,42880],"mapped",[42881]],[[42881,42881],"valid"],[[42882,42882],"mapped",[42883]],[[42883,42883],"valid"],[[42884,42884],"mapped",[42885]],[[42885,42885],"valid"],[[42886,42886],"mapped",[42887]],[[42887,42888],"valid"],[[42889,42890],"valid",[],"NV8"],[[42891,42891],"mapped",[42892]],[[42892,42892],"valid"],[[42893,42893],"mapped",[613]],[[42894,42894],"valid"],[[42895,42895],"valid"],[[42896,42896],"mapped",[42897]],[[42897,42897],"valid"],[[42898,42898],"mapped",[42899]],[[42899,42899],"valid"],[[42900,42901],"valid"],[[42902,42902],"mapped",[42903]],[[42903,42903],"valid"],[[42904,42904],"mapped",[42905]],[[42905,42905],"valid"],[[42906,42906],"mapped",[42907]],[[42907,42907],"valid"],[[42908,42908],"mapped",[42909]],[[42909,42909],"valid"],[[42910,42910],"mapped",[42911]],[[42911,42911],"valid"],[[42912,42912],"mapped",[42913]],[[42913,42913],"valid"],[[42914,42914],"mapped",[42915]],[[42915,42915],"valid"],[[42916,42916],"mapped",[42917]],[[42917,42917],"valid"],[[42918,42918],"mapped",[42919]],[[42919,42919],"valid"],[[42920,42920],"mapped",[42921]],[[42921,42921],"valid"],[[42922,42922],"mapped",[614]],[[42923,42923],"mapped",[604]],[[42924,42924],"mapped",[609]],[[42925,42925],"mapped",[620]],[[42926,42927],"disallowed"],[[42928,42928],"mapped",[670]],[[42929,42929],"mapped",[647]],[[42930,42930],"mapped",[669]],[[42931,42931],"mapped",[43859]],[[42932,42932],"mapped",[42933]],[[42933,42933],"valid"],[[42934,42934],"mapped",[42935]],[[42935,42935],"valid"],[[42936,42998],"disallowed"],[[42999,42999],"valid"],[[43000,43000],"mapped",[295]],[[43001,43001],"mapped",[339]],[[43002,43002],"valid"],[[43003,43007],"valid"],[[43008,43047],"valid"],[[43048,43051],"valid",[],"NV8"],[[43052,43055],"disallowed"],[[43056,43065],"valid",[],"NV8"],[[43066,43071],"disallowed"],[[43072,43123],"valid"],[[43124,43127],"valid",[],"NV8"],[[43128,43135],"disallowed"],[[43136,43204],"valid"],[[43205,43213],"disallowed"],[[43214,43215],"valid",[],"NV8"],[[43216,43225],"valid"],[[43226,43231],"disallowed"],[[43232,43255],"valid"],[[43256,43258],"valid",[],"NV8"],[[43259,43259],"valid"],[[43260,43260],"valid",[],"NV8"],[[43261,43261],"valid"],[[43262,43263],"disallowed"],[[43264,43309],"valid"],[[43310,43311],"valid",[],"NV8"],[[43312,43347],"valid"],[[43348,43358],"disallowed"],[[43359,43359],"valid",[],"NV8"],[[43360,43388],"valid",[],"NV8"],[[43389,43391],"disallowed"],[[43392,43456],"valid"],[[43457,43469],"valid",[],"NV8"],[[43470,43470],"disallowed"],[[43471,43481],"valid"],[[43482,43485],"disallowed"],[[43486,43487],"valid",[],"NV8"],[[43488,43518],"valid"],[[43519,43519],"disallowed"],[[43520,43574],"valid"],[[43575,43583],"disallowed"],[[43584,43597],"valid"],[[43598,43599],"disallowed"],[[43600,43609],"valid"],[[43610,43611],"disallowed"],[[43612,43615],"valid",[],"NV8"],[[43616,43638],"valid"],[[43639,43641],"valid",[],"NV8"],[[43642,43643],"valid"],[[43644,43647],"valid"],[[43648,43714],"valid"],[[43715,43738],"disallowed"],[[43739,43741],"valid"],[[43742,43743],"valid",[],"NV8"],[[43744,43759],"valid"],[[43760,43761],"valid",[],"NV8"],[[43762,43766],"valid"],[[43767,43776],"disallowed"],[[43777,43782],"valid"],[[43783,43784],"disallowed"],[[43785,43790],"valid"],[[43791,43792],"disallowed"],[[43793,43798],"valid"],[[43799,43807],"disallowed"],[[43808,43814],"valid"],[[43815,43815],"disallowed"],[[43816,43822],"valid"],[[43823,43823],"disallowed"],[[43824,43866],"valid"],[[43867,43867],"valid",[],"NV8"],[[43868,43868],"mapped",[42791]],[[43869,43869],"mapped",[43831]],[[43870,43870],"mapped",[619]],[[43871,43871],"mapped",[43858]],[[43872,43875],"valid"],[[43876,43877],"valid"],[[43878,43887],"disallowed"],[[43888,43888],"mapped",[5024]],[[43889,43889],"mapped",[5025]],[[43890,43890],"mapped",[5026]],[[43891,43891],"mapped",[5027]],[[43892,43892],"mapped",[5028]],[[43893,43893],"mapped",[5029]],[[43894,43894],"mapped",[5030]],[[43895,43895],"mapped",[5031]],[[43896,43896],"mapped",[5032]],[[43897,43897],"mapped",[5033]],[[43898,43898],"mapped",[5034]],[[43899,43899],"mapped",[5035]],[[43900,43900],"mapped",[5036]],[[43901,43901],"mapped",[5037]],[[43902,43902],"mapped",[5038]],[[43903,43903],"mapped",[5039]],[[43904,43904],"mapped",[5040]],[[43905,43905],"mapped",[5041]],[[43906,43906],"mapped",[5042]],[[43907,43907],"mapped",[5043]],[[43908,43908],"mapped",[5044]],[[43909,43909],"mapped",[5045]],[[43910,43910],"mapped",[5046]],[[43911,43911],"mapped",[5047]],[[43912,43912],"mapped",[5048]],[[43913,43913],"mapped",[5049]],[[43914,43914],"mapped",[5050]],[[43915,43915],"mapped",[5051]],[[43916,43916],"mapped",[5052]],[[43917,43917],"mapped",[5053]],[[43918,43918],"mapped",[5054]],[[43919,43919],"mapped",[5055]],[[43920,43920],"mapped",[5056]],[[43921,43921],"mapped",[5057]],[[43922,43922],"mapped",[5058]],[[43923,43923],"mapped",[5059]],[[43924,43924],"mapped",[5060]],[[43925,43925],"mapped",[5061]],[[43926,43926],"mapped",[5062]],[[43927,43927],"mapped",[5063]],[[43928,43928],"mapped",[5064]],[[43929,43929],"mapped",[5065]],[[43930,43930],"mapped",[5066]],[[43931,43931],"mapped",[5067]],[[43932,43932],"mapped",[5068]],[[43933,43933],"mapped",[5069]],[[43934,43934],"mapped",[5070]],[[43935,43935],"mapped",[5071]],[[43936,43936],"mapped",[5072]],[[43937,43937],"mapped",[5073]],[[43938,43938],"mapped",[5074]],[[43939,43939],"mapped",[5075]],[[43940,43940],"mapped",[5076]],[[43941,43941],"mapped",[5077]],[[43942,43942],"mapped",[5078]],[[43943,43943],"mapped",[5079]],[[43944,43944],"mapped",[5080]],[[43945,43945],"mapped",[5081]],[[43946,43946],"mapped",[5082]],[[43947,43947],"mapped",[5083]],[[43948,43948],"mapped",[5084]],[[43949,43949],"mapped",[5085]],[[43950,43950],"mapped",[5086]],[[43951,43951],"mapped",[5087]],[[43952,43952],"mapped",[5088]],[[43953,43953],"mapped",[5089]],[[43954,43954],"mapped",[5090]],[[43955,43955],"mapped",[5091]],[[43956,43956],"mapped",[5092]],[[43957,43957],"mapped",[5093]],[[43958,43958],"mapped",[5094]],[[43959,43959],"mapped",[5095]],[[43960,43960],"mapped",[5096]],[[43961,43961],"mapped",[5097]],[[43962,43962],"mapped",[5098]],[[43963,43963],"mapped",[5099]],[[43964,43964],"mapped",[5100]],[[43965,43965],"mapped",[5101]],[[43966,43966],"mapped",[5102]],[[43967,43967],"mapped",[5103]],[[43968,44010],"valid"],[[44011,44011],"valid",[],"NV8"],[[44012,44013],"valid"],[[44014,44015],"disallowed"],[[44016,44025],"valid"],[[44026,44031],"disallowed"],[[44032,55203],"valid"],[[55204,55215],"disallowed"],[[55216,55238],"valid",[],"NV8"],[[55239,55242],"disallowed"],[[55243,55291],"valid",[],"NV8"],[[55292,55295],"disallowed"],[[55296,57343],"disallowed"],[[57344,63743],"disallowed"],[[63744,63744],"mapped",[35912]],[[63745,63745],"mapped",[26356]],[[63746,63746],"mapped",[36554]],[[63747,63747],"mapped",[36040]],[[63748,63748],"mapped",[28369]],[[63749,63749],"mapped",[20018]],[[63750,63750],"mapped",[21477]],[[63751,63752],"mapped",[40860]],[[63753,63753],"mapped",[22865]],[[63754,63754],"mapped",[37329]],[[63755,63755],"mapped",[21895]],[[63756,63756],"mapped",[22856]],[[63757,63757],"mapped",[25078]],[[63758,63758],"mapped",[30313]],[[63759,63759],"mapped",[32645]],[[63760,63760],"mapped",[34367]],[[63761,63761],"mapped",[34746]],[[63762,63762],"mapped",[35064]],[[63763,63763],"mapped",[37007]],[[63764,63764],"mapped",[27138]],[[63765,63765],"mapped",[27931]],[[63766,63766],"mapped",[28889]],[[63767,63767],"mapped",[29662]],[[63768,63768],"mapped",[33853]],[[63769,63769],"mapped",[37226]],[[63770,63770],"mapped",[39409]],[[63771,63771],"mapped",[20098]],[[63772,63772],"mapped",[21365]],[[63773,63773],"mapped",[27396]],[[63774,63774],"mapped",[29211]],[[63775,63775],"mapped",[34349]],[[63776,63776],"mapped",[40478]],[[63777,63777],"mapped",[23888]],[[63778,63778],"mapped",[28651]],[[63779,63779],"mapped",[34253]],[[63780,63780],"mapped",[35172]],[[63781,63781],"mapped",[25289]],[[63782,63782],"mapped",[33240]],[[63783,63783],"mapped",[34847]],[[63784,63784],"mapped",[24266]],[[63785,63785],"mapped",[26391]],[[63786,63786],"mapped",[28010]],[[63787,63787],"mapped",[29436]],[[63788,63788],"mapped",[37070]],[[63789,63789],"mapped",[20358]],[[63790,63790],"mapped",[20919]],[[63791,63791],"mapped",[21214]],[[63792,63792],"mapped",[25796]],[[63793,63793],"mapped",[27347]],[[63794,63794],"mapped",[29200]],[[63795,63795],"mapped",[30439]],[[63796,63796],"mapped",[32769]],[[63797,63797],"mapped",[34310]],[[63798,63798],"mapped",[34396]],[[63799,63799],"mapped",[36335]],[[63800,63800],"mapped",[38706]],[[63801,63801],"mapped",[39791]],[[63802,63802],"mapped",[40442]],[[63803,63803],"mapped",[30860]],[[63804,63804],"mapped",[31103]],[[63805,63805],"mapped",[32160]],[[63806,63806],"mapped",[33737]],[[63807,63807],"mapped",[37636]],[[63808,63808],"mapped",[40575]],[[63809,63809],"mapped",[35542]],[[63810,63810],"mapped",[22751]],[[63811,63811],"mapped",[24324]],[[63812,63812],"mapped",[31840]],[[63813,63813],"mapped",[32894]],[[63814,63814],"mapped",[29282]],[[63815,63815],"mapped",[30922]],[[63816,63816],"mapped",[36034]],[[63817,63817],"mapped",[38647]],[[63818,63818],"mapped",[22744]],[[63819,63819],"mapped",[23650]],[[63820,63820],"mapped",[27155]],[[63821,63821],"mapped",[28122]],[[63822,63822],"mapped",[28431]],[[63823,63823],"mapped",[32047]],[[63824,63824],"mapped",[32311]],[[63825,63825],"mapped",[38475]],[[63826,63826],"mapped",[21202]],[[63827,63827],"mapped",[32907]],[[63828,63828],"mapped",[20956]],[[63829,63829],"mapped",[20940]],[[63830,63830],"mapped",[31260]],[[63831,63831],"mapped",[32190]],[[63832,63832],"mapped",[33777]],[[63833,63833],"mapped",[38517]],[[63834,63834],"mapped",[35712]],[[63835,63835],"mapped",[25295]],[[63836,63836],"mapped",[27138]],[[63837,63837],"mapped",[35582]],[[63838,63838],"mapped",[20025]],[[63839,63839],"mapped",[23527]],[[63840,63840],"mapped",[24594]],[[63841,63841],"mapped",[29575]],[[63842,63842],"mapped",[30064]],[[63843,63843],"mapped",[21271]],[[63844,63844],"mapped",[30971]],[[63845,63845],"mapped",[20415]],[[63846,63846],"mapped",[24489]],[[63847,63847],"mapped",[19981]],[[63848,63848],"mapped",[27852]],[[63849,63849],"mapped",[25976]],[[63850,63850],"mapped",[32034]],[[63851,63851],"mapped",[21443]],[[63852,63852],"mapped",[22622]],[[63853,63853],"mapped",[30465]],[[63854,63854],"mapped",[33865]],[[63855,63855],"mapped",[35498]],[[63856,63856],"mapped",[27578]],[[63857,63857],"mapped",[36784]],[[63858,63858],"mapped",[27784]],[[63859,63859],"mapped",[25342]],[[63860,63860],"mapped",[33509]],[[63861,63861],"mapped",[25504]],[[63862,63862],"mapped",[30053]],[[63863,63863],"mapped",[20142]],[[63864,63864],"mapped",[20841]],[[63865,63865],"mapped",[20937]],[[63866,63866],"mapped",[26753]],[[63867,63867],"mapped",[31975]],[[63868,63868],"mapped",[33391]],[[63869,63869],"mapped",[35538]],[[63870,63870],"mapped",[37327]],[[63871,63871],"mapped",[21237]],[[63872,63872],"mapped",[21570]],[[63873,63873],"mapped",[22899]],[[63874,63874],"mapped",[24300]],[[63875,63875],"mapped",[26053]],[[63876,63876],"mapped",[28670]],[[63877,63877],"mapped",[31018]],[[63878,63878],"mapped",[38317]],[[63879,63879],"mapped",[39530]],[[63880,63880],"mapped",[40599]],[[63881,63881],"mapped",[40654]],[[63882,63882],"mapped",[21147]],[[63883,63883],"mapped",[26310]],[[63884,63884],"mapped",[27511]],[[63885,63885],"mapped",[36706]],[[63886,63886],"mapped",[24180]],[[63887,63887],"mapped",[24976]],[[63888,63888],"mapped",[25088]],[[63889,63889],"mapped",[25754]],[[63890,63890],"mapped",[28451]],[[63891,63891],"mapped",[29001]],[[63892,63892],"mapped",[29833]],[[63893,63893],"mapped",[31178]],[[63894,63894],"mapped",[32244]],[[63895,63895],"mapped",[32879]],[[63896,63896],"mapped",[36646]],[[63897,63897],"mapped",[34030]],[[63898,63898],"mapped",[36899]],[[63899,63899],"mapped",[37706]],[[63900,63900],"mapped",[21015]],[[63901,63901],"mapped",[21155]],[[63902,63902],"mapped",[21693]],[[63903,63903],"mapped",[28872]],[[63904,63904],"mapped",[35010]],[[63905,63905],"mapped",[35498]],[[63906,63906],"mapped",[24265]],[[63907,63907],"mapped",[24565]],[[63908,63908],"mapped",[25467]],[[63909,63909],"mapped",[27566]],[[63910,63910],"mapped",[31806]],[[63911,63911],"mapped",[29557]],[[63912,63912],"mapped",[20196]],[[63913,63913],"mapped",[22265]],[[63914,63914],"mapped",[23527]],[[63915,63915],"mapped",[23994]],[[63916,63916],"mapped",[24604]],[[63917,63917],"mapped",[29618]],[[63918,63918],"mapped",[29801]],[[63919,63919],"mapped",[32666]],[[63920,63920],"mapped",[32838]],[[63921,63921],"mapped",[37428]],[[63922,63922],"mapped",[38646]],[[63923,63923],"mapped",[38728]],[[63924,63924],"mapped",[38936]],[[63925,63925],"mapped",[20363]],[[63926,63926],"mapped",[31150]],[[63927,63927],"mapped",[37300]],[[63928,63928],"mapped",[38584]],[[63929,63929],"mapped",[24801]],[[63930,63930],"mapped",[20102]],[[63931,63931],"mapped",[20698]],[[63932,63932],"mapped",[23534]],[[63933,63933],"mapped",[23615]],[[63934,63934],"mapped",[26009]],[[63935,63935],"mapped",[27138]],[[63936,63936],"mapped",[29134]],[[63937,63937],"mapped",[30274]],[[63938,63938],"mapped",[34044]],[[63939,63939],"mapped",[36988]],[[63940,63940],"mapped",[40845]],[[63941,63941],"mapped",[26248]],[[63942,63942],"mapped",[38446]],[[63943,63943],"mapped",[21129]],[[63944,63944],"mapped",[26491]],[[63945,63945],"mapped",[26611]],[[63946,63946],"mapped",[27969]],[[63947,63947],"mapped",[28316]],[[63948,63948],"mapped",[29705]],[[63949,63949],"mapped",[30041]],[[63950,63950],"mapped",[30827]],[[63951,63951],"mapped",[32016]],[[63952,63952],"mapped",[39006]],[[63953,63953],"mapped",[20845]],[[63954,63954],"mapped",[25134]],[[63955,63955],"mapped",[38520]],[[63956,63956],"mapped",[20523]],[[63957,63957],"mapped",[23833]],[[63958,63958],"mapped",[28138]],[[63959,63959],"mapped",[36650]],[[63960,63960],"mapped",[24459]],[[63961,63961],"mapped",[24900]],[[63962,63962],"mapped",[26647]],[[63963,63963],"mapped",[29575]],[[63964,63964],"mapped",[38534]],[[63965,63965],"mapped",[21033]],[[63966,63966],"mapped",[21519]],[[63967,63967],"mapped",[23653]],[[63968,63968],"mapped",[26131]],[[63969,63969],"mapped",[26446]],[[63970,63970],"mapped",[26792]],[[63971,63971],"mapped",[27877]],[[63972,63972],"mapped",[29702]],[[63973,63973],"mapped",[30178]],[[63974,63974],"mapped",[32633]],[[63975,63975],"mapped",[35023]],[[63976,63976],"mapped",[35041]],[[63977,63977],"mapped",[37324]],[[63978,63978],"mapped",[38626]],[[63979,63979],"mapped",[21311]],[[63980,63980],"mapped",[28346]],[[63981,63981],"mapped",[21533]],[[63982,63982],"mapped",[29136]],[[63983,63983],"mapped",[29848]],[[63984,63984],"mapped",[34298]],[[63985,63985],"mapped",[38563]],[[63986,63986],"mapped",[40023]],[[63987,63987],"mapped",[40607]],[[63988,63988],"mapped",[26519]],[[63989,63989],"mapped",[28107]],[[63990,63990],"mapped",[33256]],[[63991,63991],"mapped",[31435]],[[63992,63992],"mapped",[31520]],[[63993,63993],"mapped",[31890]],[[63994,63994],"mapped",[29376]],[[63995,63995],"mapped",[28825]],[[63996,63996],"mapped",[35672]],[[63997,63997],"mapped",[20160]],[[63998,63998],"mapped",[33590]],[[63999,63999],"mapped",[21050]],[[64000,64000],"mapped",[20999]],[[64001,64001],"mapped",[24230]],[[64002,64002],"mapped",[25299]],[[64003,64003],"mapped",[31958]],[[64004,64004],"mapped",[23429]],[[64005,64005],"mapped",[27934]],[[64006,64006],"mapped",[26292]],[[64007,64007],"mapped",[36667]],[[64008,64008],"mapped",[34892]],[[64009,64009],"mapped",[38477]],[[64010,64010],"mapped",[35211]],[[64011,64011],"mapped",[24275]],[[64012,64012],"mapped",[20800]],[[64013,64013],"mapped",[21952]],[[64014,64015],"valid"],[[64016,64016],"mapped",[22618]],[[64017,64017],"valid"],[[64018,64018],"mapped",[26228]],[[64019,64020],"valid"],[[64021,64021],"mapped",[20958]],[[64022,64022],"mapped",[29482]],[[64023,64023],"mapped",[30410]],[[64024,64024],"mapped",[31036]],[[64025,64025],"mapped",[31070]],[[64026,64026],"mapped",[31077]],[[64027,64027],"mapped",[31119]],[[64028,64028],"mapped",[38742]],[[64029,64029],"mapped",[31934]],[[64030,64030],"mapped",[32701]],[[64031,64031],"valid"],[[64032,64032],"mapped",[34322]],[[64033,64033],"valid"],[[64034,64034],"mapped",[35576]],[[64035,64036],"valid"],[[64037,64037],"mapped",[36920]],[[64038,64038],"mapped",[37117]],[[64039,64041],"valid"],[[64042,64042],"mapped",[39151]],[[64043,64043],"mapped",[39164]],[[64044,64044],"mapped",[39208]],[[64045,64045],"mapped",[40372]],[[64046,64046],"mapped",[37086]],[[64047,64047],"mapped",[38583]],[[64048,64048],"mapped",[20398]],[[64049,64049],"mapped",[20711]],[[64050,64050],"mapped",[20813]],[[64051,64051],"mapped",[21193]],[[64052,64052],"mapped",[21220]],[[64053,64053],"mapped",[21329]],[[64054,64054],"mapped",[21917]],[[64055,64055],"mapped",[22022]],[[64056,64056],"mapped",[22120]],[[64057,64057],"mapped",[22592]],[[64058,64058],"mapped",[22696]],[[64059,64059],"mapped",[23652]],[[64060,64060],"mapped",[23662]],[[64061,64061],"mapped",[24724]],[[64062,64062],"mapped",[24936]],[[64063,64063],"mapped",[24974]],[[64064,64064],"mapped",[25074]],[[64065,64065],"mapped",[25935]],[[64066,64066],"mapped",[26082]],[[64067,64067],"mapped",[26257]],[[64068,64068],"mapped",[26757]],[[64069,64069],"mapped",[28023]],[[64070,64070],"mapped",[28186]],[[64071,64071],"mapped",[28450]],[[64072,64072],"mapped",[29038]],[[64073,64073],"mapped",[29227]],[[64074,64074],"mapped",[29730]],[[64075,64075],"mapped",[30865]],[[64076,64076],"mapped",[31038]],[[64077,64077],"mapped",[31049]],[[64078,64078],"mapped",[31048]],[[64079,64079],"mapped",[31056]],[[64080,64080],"mapped",[31062]],[[64081,64081],"mapped",[31069]],[[64082,64082],"mapped",[31117]],[[64083,64083],"mapped",[31118]],[[64084,64084],"mapped",[31296]],[[64085,64085],"mapped",[31361]],[[64086,64086],"mapped",[31680]],[[64087,64087],"mapped",[32244]],[[64088,64088],"mapped",[32265]],[[64089,64089],"mapped",[32321]],[[64090,64090],"mapped",[32626]],[[64091,64091],"mapped",[32773]],[[64092,64092],"mapped",[33261]],[[64093,64094],"mapped",[33401]],[[64095,64095],"mapped",[33879]],[[64096,64096],"mapped",[35088]],[[64097,64097],"mapped",[35222]],[[64098,64098],"mapped",[35585]],[[64099,64099],"mapped",[35641]],[[64100,64100],"mapped",[36051]],[[64101,64101],"mapped",[36104]],[[64102,64102],"mapped",[36790]],[[64103,64103],"mapped",[36920]],[[64104,64104],"mapped",[38627]],[[64105,64105],"mapped",[38911]],[[64106,64106],"mapped",[38971]],[[64107,64107],"mapped",[24693]],[[64108,64108],"mapped",[148206]],[[64109,64109],"mapped",[33304]],[[64110,64111],"disallowed"],[[64112,64112],"mapped",[20006]],[[64113,64113],"mapped",[20917]],[[64114,64114],"mapped",[20840]],[[64115,64115],"mapped",[20352]],[[64116,64116],"mapped",[20805]],[[64117,64117],"mapped",[20864]],[[64118,64118],"mapped",[21191]],[[64119,64119],"mapped",[21242]],[[64120,64120],"mapped",[21917]],[[64121,64121],"mapped",[21845]],[[64122,64122],"mapped",[21913]],[[64123,64123],"mapped",[21986]],[[64124,64124],"mapped",[22618]],[[64125,64125],"mapped",[22707]],[[64126,64126],"mapped",[22852]],[[64127,64127],"mapped",[22868]],[[64128,64128],"mapped",[23138]],[[64129,64129],"mapped",[23336]],[[64130,64130],"mapped",[24274]],[[64131,64131],"mapped",[24281]],[[64132,64132],"mapped",[24425]],[[64133,64133],"mapped",[24493]],[[64134,64134],"mapped",[24792]],[[64135,64135],"mapped",[24910]],[[64136,64136],"mapped",[24840]],[[64137,64137],"mapped",[24974]],[[64138,64138],"mapped",[24928]],[[64139,64139],"mapped",[25074]],[[64140,64140],"mapped",[25140]],[[64141,64141],"mapped",[25540]],[[64142,64142],"mapped",[25628]],[[64143,64143],"mapped",[25682]],[[64144,64144],"mapped",[25942]],[[64145,64145],"mapped",[26228]],[[64146,64146],"mapped",[26391]],[[64147,64147],"mapped",[26395]],[[64148,64148],"mapped",[26454]],[[64149,64149],"mapped",[27513]],[[64150,64150],"mapped",[27578]],[[64151,64151],"mapped",[27969]],[[64152,64152],"mapped",[28379]],[[64153,64153],"mapped",[28363]],[[64154,64154],"mapped",[28450]],[[64155,64155],"mapped",[28702]],[[64156,64156],"mapped",[29038]],[[64157,64157],"mapped",[30631]],[[64158,64158],"mapped",[29237]],[[64159,64159],"mapped",[29359]],[[64160,64160],"mapped",[29482]],[[64161,64161],"mapped",[29809]],[[64162,64162],"mapped",[29958]],[[64163,64163],"mapped",[30011]],[[64164,64164],"mapped",[30237]],[[64165,64165],"mapped",[30239]],[[64166,64166],"mapped",[30410]],[[64167,64167],"mapped",[30427]],[[64168,64168],"mapped",[30452]],[[64169,64169],"mapped",[30538]],[[64170,64170],"mapped",[30528]],[[64171,64171],"mapped",[30924]],[[64172,64172],"mapped",[31409]],[[64173,64173],"mapped",[31680]],[[64174,64174],"mapped",[31867]],[[64175,64175],"mapped",[32091]],[[64176,64176],"mapped",[32244]],[[64177,64177],"mapped",[32574]],[[64178,64178],"mapped",[32773]],[[64179,64179],"mapped",[33618]],[[64180,64180],"mapped",[33775]],[[64181,64181],"mapped",[34681]],[[64182,64182],"mapped",[35137]],[[64183,64183],"mapped",[35206]],[[64184,64184],"mapped",[35222]],[[64185,64185],"mapped",[35519]],[[64186,64186],"mapped",[35576]],[[64187,64187],"mapped",[35531]],[[64188,64188],"mapped",[35585]],[[64189,64189],"mapped",[35582]],[[64190,64190],"mapped",[35565]],[[64191,64191],"mapped",[35641]],[[64192,64192],"mapped",[35722]],[[64193,64193],"mapped",[36104]],[[64194,64194],"mapped",[36664]],[[64195,64195],"mapped",[36978]],[[64196,64196],"mapped",[37273]],[[64197,64197],"mapped",[37494]],[[64198,64198],"mapped",[38524]],[[64199,64199],"mapped",[38627]],[[64200,64200],"mapped",[38742]],[[64201,64201],"mapped",[38875]],[[64202,64202],"mapped",[38911]],[[64203,64203],"mapped",[38923]],[[64204,64204],"mapped",[38971]],[[64205,64205],"mapped",[39698]],[[64206,64206],"mapped",[40860]],[[64207,64207],"mapped",[141386]],[[64208,64208],"mapped",[141380]],[[64209,64209],"mapped",[144341]],[[64210,64210],"mapped",[15261]],[[64211,64211],"mapped",[16408]],[[64212,64212],"mapped",[16441]],[[64213,64213],"mapped",[152137]],[[64214,64214],"mapped",[154832]],[[64215,64215],"mapped",[163539]],[[64216,64216],"mapped",[40771]],[[64217,64217],"mapped",[40846]],[[64218,64255],"disallowed"],[[64256,64256],"mapped",[102,102]],[[64257,64257],"mapped",[102,105]],[[64258,64258],"mapped",[102,108]],[[64259,64259],"mapped",[102,102,105]],[[64260,64260],"mapped",[102,102,108]],[[64261,64262],"mapped",[115,116]],[[64263,64274],"disallowed"],[[64275,64275],"mapped",[1396,1398]],[[64276,64276],"mapped",[1396,1381]],[[64277,64277],"mapped",[1396,1387]],[[64278,64278],"mapped",[1406,1398]],[[64279,64279],"mapped",[1396,1389]],[[64280,64284],"disallowed"],[[64285,64285],"mapped",[1497,1460]],[[64286,64286],"valid"],[[64287,64287],"mapped",[1522,1463]],[[64288,64288],"mapped",[1506]],[[64289,64289],"mapped",[1488]],[[64290,64290],"mapped",[1491]],[[64291,64291],"mapped",[1492]],[[64292,64292],"mapped",[1499]],[[64293,64293],"mapped",[1500]],[[64294,64294],"mapped",[1501]],[[64295,64295],"mapped",[1512]],[[64296,64296],"mapped",[1514]],[[64297,64297],"disallowed_STD3_mapped",[43]],[[64298,64298],"mapped",[1513,1473]],[[64299,64299],"mapped",[1513,1474]],[[64300,64300],"mapped",[1513,1468,1473]],[[64301,64301],"mapped",[1513,1468,1474]],[[64302,64302],"mapped",[1488,1463]],[[64303,64303],"mapped",[1488,1464]],[[64304,64304],"mapped",[1488,1468]],[[64305,64305],"mapped",[1489,1468]],[[64306,64306],"mapped",[1490,1468]],[[64307,64307],"mapped",[1491,1468]],[[64308,64308],"mapped",[1492,1468]],[[64309,64309],"mapped",[1493,1468]],[[64310,64310],"mapped",[1494,1468]],[[64311,64311],"disallowed"],[[64312,64312],"mapped",[1496,1468]],[[64313,64313],"mapped",[1497,1468]],[[64314,64314],"mapped",[1498,1468]],[[64315,64315],"mapped",[1499,1468]],[[64316,64316],"mapped",[1500,1468]],[[64317,64317],"disallowed"],[[64318,64318],"mapped",[1502,1468]],[[64319,64319],"disallowed"],[[64320,64320],"mapped",[1504,1468]],[[64321,64321],"mapped",[1505,1468]],[[64322,64322],"disallowed"],[[64323,64323],"mapped",[1507,1468]],[[64324,64324],"mapped",[1508,1468]],[[64325,64325],"disallowed"],[[64326,64326],"mapped",[1510,1468]],[[64327,64327],"mapped",[1511,1468]],[[64328,64328],"mapped",[1512,1468]],[[64329,64329],"mapped",[1513,1468]],[[64330,64330],"mapped",[1514,1468]],[[64331,64331],"mapped",[1493,1465]],[[64332,64332],"mapped",[1489,1471]],[[64333,64333],"mapped",[1499,1471]],[[64334,64334],"mapped",[1508,1471]],[[64335,64335],"mapped",[1488,1500]],[[64336,64337],"mapped",[1649]],[[64338,64341],"mapped",[1659]],[[64342,64345],"mapped",[1662]],[[64346,64349],"mapped",[1664]],[[64350,64353],"mapped",[1658]],[[64354,64357],"mapped",[1663]],[[64358,64361],"mapped",[1657]],[[64362,64365],"mapped",[1700]],[[64366,64369],"mapped",[1702]],[[64370,64373],"mapped",[1668]],[[64374,64377],"mapped",[1667]],[[64378,64381],"mapped",[1670]],[[64382,64385],"mapped",[1671]],[[64386,64387],"mapped",[1677]],[[64388,64389],"mapped",[1676]],[[64390,64391],"mapped",[1678]],[[64392,64393],"mapped",[1672]],[[64394,64395],"mapped",[1688]],[[64396,64397],"mapped",[1681]],[[64398,64401],"mapped",[1705]],[[64402,64405],"mapped",[1711]],[[64406,64409],"mapped",[1715]],[[64410,64413],"mapped",[1713]],[[64414,64415],"mapped",[1722]],[[64416,64419],"mapped",[1723]],[[64420,64421],"mapped",[1728]],[[64422,64425],"mapped",[1729]],[[64426,64429],"mapped",[1726]],[[64430,64431],"mapped",[1746]],[[64432,64433],"mapped",[1747]],[[64434,64449],"valid",[],"NV8"],[[64450,64466],"disallowed"],[[64467,64470],"mapped",[1709]],[[64471,64472],"mapped",[1735]],[[64473,64474],"mapped",[1734]],[[64475,64476],"mapped",[1736]],[[64477,64477],"mapped",[1735,1652]],[[64478,64479],"mapped",[1739]],[[64480,64481],"mapped",[1733]],[[64482,64483],"mapped",[1737]],[[64484,64487],"mapped",[1744]],[[64488,64489],"mapped",[1609]],[[64490,64491],"mapped",[1574,1575]],[[64492,64493],"mapped",[1574,1749]],[[64494,64495],"mapped",[1574,1608]],[[64496,64497],"mapped",[1574,1735]],[[64498,64499],"mapped",[1574,1734]],[[64500,64501],"mapped",[1574,1736]],[[64502,64504],"mapped",[1574,1744]],[[64505,64507],"mapped",[1574,1609]],[[64508,64511],"mapped",[1740]],[[64512,64512],"mapped",[1574,1580]],[[64513,64513],"mapped",[1574,1581]],[[64514,64514],"mapped",[1574,1605]],[[64515,64515],"mapped",[1574,1609]],[[64516,64516],"mapped",[1574,1610]],[[64517,64517],"mapped",[1576,1580]],[[64518,64518],"mapped",[1576,1581]],[[64519,64519],"mapped",[1576,1582]],[[64520,64520],"mapped",[1576,1605]],[[64521,64521],"mapped",[1576,1609]],[[64522,64522],"mapped",[1576,1610]],[[64523,64523],"mapped",[1578,1580]],[[64524,64524],"mapped",[1578,1581]],[[64525,64525],"mapped",[1578,1582]],[[64526,64526],"mapped",[1578,1605]],[[64527,64527],"mapped",[1578,1609]],[[64528,64528],"mapped",[1578,1610]],[[64529,64529],"mapped",[1579,1580]],[[64530,64530],"mapped",[1579,1605]],[[64531,64531],"mapped",[1579,1609]],[[64532,64532],"mapped",[1579,1610]],[[64533,64533],"mapped",[1580,1581]],[[64534,64534],"mapped",[1580,1605]],[[64535,64535],"mapped",[1581,1580]],[[64536,64536],"mapped",[1581,1605]],[[64537,64537],"mapped",[1582,1580]],[[64538,64538],"mapped",[1582,1581]],[[64539,64539],"mapped",[1582,1605]],[[64540,64540],"mapped",[1587,1580]],[[64541,64541],"mapped",[1587,1581]],[[64542,64542],"mapped",[1587,1582]],[[64543,64543],"mapped",[1587,1605]],[[64544,64544],"mapped",[1589,1581]],[[64545,64545],"mapped",[1589,1605]],[[64546,64546],"mapped",[1590,1580]],[[64547,64547],"mapped",[1590,1581]],[[64548,64548],"mapped",[1590,1582]],[[64549,64549],"mapped",[1590,1605]],[[64550,64550],"mapped",[1591,1581]],[[64551,64551],"mapped",[1591,1605]],[[64552,64552],"mapped",[1592,1605]],[[64553,64553],"mapped",[1593,1580]],[[64554,64554],"mapped",[1593,1605]],[[64555,64555],"mapped",[1594,1580]],[[64556,64556],"mapped",[1594,1605]],[[64557,64557],"mapped",[1601,1580]],[[64558,64558],"mapped",[1601,1581]],[[64559,64559],"mapped",[1601,1582]],[[64560,64560],"mapped",[1601,1605]],[[64561,64561],"mapped",[1601,1609]],[[64562,64562],"mapped",[1601,1610]],[[64563,64563],"mapped",[1602,1581]],[[64564,64564],"mapped",[1602,1605]],[[64565,64565],"mapped",[1602,1609]],[[64566,64566],"mapped",[1602,1610]],[[64567,64567],"mapped",[1603,1575]],[[64568,64568],"mapped",[1603,1580]],[[64569,64569],"mapped",[1603,1581]],[[64570,64570],"mapped",[1603,1582]],[[64571,64571],"mapped",[1603,1604]],[[64572,64572],"mapped",[1603,1605]],[[64573,64573],"mapped",[1603,1609]],[[64574,64574],"mapped",[1603,1610]],[[64575,64575],"mapped",[1604,1580]],[[64576,64576],"mapped",[1604,1581]],[[64577,64577],"mapped",[1604,1582]],[[64578,64578],"mapped",[1604,1605]],[[64579,64579],"mapped",[1604,1609]],[[64580,64580],"mapped",[1604,1610]],[[64581,64581],"mapped",[1605,1580]],[[64582,64582],"mapped",[1605,1581]],[[64583,64583],"mapped",[1605,1582]],[[64584,64584],"mapped",[1605,1605]],[[64585,64585],"mapped",[1605,1609]],[[64586,64586],"mapped",[1605,1610]],[[64587,64587],"mapped",[1606,1580]],[[64588,64588],"mapped",[1606,1581]],[[64589,64589],"mapped",[1606,1582]],[[64590,64590],"mapped",[1606,1605]],[[64591,64591],"mapped",[1606,1609]],[[64592,64592],"mapped",[1606,1610]],[[64593,64593],"mapped",[1607,1580]],[[64594,64594],"mapped",[1607,1605]],[[64595,64595],"mapped",[1607,1609]],[[64596,64596],"mapped",[1607,1610]],[[64597,64597],"mapped",[1610,1580]],[[64598,64598],"mapped",[1610,1581]],[[64599,64599],"mapped",[1610,1582]],[[64600,64600],"mapped",[1610,1605]],[[64601,64601],"mapped",[1610,1609]],[[64602,64602],"mapped",[1610,1610]],[[64603,64603],"mapped",[1584,1648]],[[64604,64604],"mapped",[1585,1648]],[[64605,64605],"mapped",[1609,1648]],[[64606,64606],"disallowed_STD3_mapped",[32,1612,1617]],[[64607,64607],"disallowed_STD3_mapped",[32,1613,1617]],[[64608,64608],"disallowed_STD3_mapped",[32,1614,1617]],[[64609,64609],"disallowed_STD3_mapped",[32,1615,1617]],[[64610,64610],"disallowed_STD3_mapped",[32,1616,1617]],[[64611,64611],"disallowed_STD3_mapped",[32,1617,1648]],[[64612,64612],"mapped",[1574,1585]],[[64613,64613],"mapped",[1574,1586]],[[64614,64614],"mapped",[1574,1605]],[[64615,64615],"mapped",[1574,1606]],[[64616,64616],"mapped",[1574,1609]],[[64617,64617],"mapped",[1574,1610]],[[64618,64618],"mapped",[1576,1585]],[[64619,64619],"mapped",[1576,1586]],[[64620,64620],"mapped",[1576,1605]],[[64621,64621],"mapped",[1576,1606]],[[64622,64622],"mapped",[1576,1609]],[[64623,64623],"mapped",[1576,1610]],[[64624,64624],"mapped",[1578,1585]],[[64625,64625],"mapped",[1578,1586]],[[64626,64626],"mapped",[1578,1605]],[[64627,64627],"mapped",[1578,1606]],[[64628,64628],"mapped",[1578,1609]],[[64629,64629],"mapped",[1578,1610]],[[64630,64630],"mapped",[1579,1585]],[[64631,64631],"mapped",[1579,1586]],[[64632,64632],"mapped",[1579,1605]],[[64633,64633],"mapped",[1579,1606]],[[64634,64634],"mapped",[1579,1609]],[[64635,64635],"mapped",[1579,1610]],[[64636,64636],"mapped",[1601,1609]],[[64637,64637],"mapped",[1601,1610]],[[64638,64638],"mapped",[1602,1609]],[[64639,64639],"mapped",[1602,1610]],[[64640,64640],"mapped",[1603,1575]],[[64641,64641],"mapped",[1603,1604]],[[64642,64642],"mapped",[1603,1605]],[[64643,64643],"mapped",[1603,1609]],[[64644,64644],"mapped",[1603,1610]],[[64645,64645],"mapped",[1604,1605]],[[64646,64646],"mapped",[1604,1609]],[[64647,64647],"mapped",[1604,1610]],[[64648,64648],"mapped",[1605,1575]],[[64649,64649],"mapped",[1605,1605]],[[64650,64650],"mapped",[1606,1585]],[[64651,64651],"mapped",[1606,1586]],[[64652,64652],"mapped",[1606,1605]],[[64653,64653],"mapped",[1606,1606]],[[64654,64654],"mapped",[1606,1609]],[[64655,64655],"mapped",[1606,1610]],[[64656,64656],"mapped",[1609,1648]],[[64657,64657],"mapped",[1610,1585]],[[64658,64658],"mapped",[1610,1586]],[[64659,64659],"mapped",[1610,1605]],[[64660,64660],"mapped",[1610,1606]],[[64661,64661],"mapped",[1610,1609]],[[64662,64662],"mapped",[1610,1610]],[[64663,64663],"mapped",[1574,1580]],[[64664,64664],"mapped",[1574,1581]],[[64665,64665],"mapped",[1574,1582]],[[64666,64666],"mapped",[1574,1605]],[[64667,64667],"mapped",[1574,1607]],[[64668,64668],"mapped",[1576,1580]],[[64669,64669],"mapped",[1576,1581]],[[64670,64670],"mapped",[1576,1582]],[[64671,64671],"mapped",[1576,1605]],[[64672,64672],"mapped",[1576,1607]],[[64673,64673],"mapped",[1578,1580]],[[64674,64674],"mapped",[1578,1581]],[[64675,64675],"mapped",[1578,1582]],[[64676,64676],"mapped",[1578,1605]],[[64677,64677],"mapped",[1578,1607]],[[64678,64678],"mapped",[1579,1605]],[[64679,64679],"mapped",[1580,1581]],[[64680,64680],"mapped",[1580,1605]],[[64681,64681],"mapped",[1581,1580]],[[64682,64682],"mapped",[1581,1605]],[[64683,64683],"mapped",[1582,1580]],[[64684,64684],"mapped",[1582,1605]],[[64685,64685],"mapped",[1587,1580]],[[64686,64686],"mapped",[1587,1581]],[[64687,64687],"mapped",[1587,1582]],[[64688,64688],"mapped",[1587,1605]],[[64689,64689],"mapped",[1589,1581]],[[64690,64690],"mapped",[1589,1582]],[[64691,64691],"mapped",[1589,1605]],[[64692,64692],"mapped",[1590,1580]],[[64693,64693],"mapped",[1590,1581]],[[64694,64694],"mapped",[1590,1582]],[[64695,64695],"mapped",[1590,1605]],[[64696,64696],"mapped",[1591,1581]],[[64697,64697],"mapped",[1592,1605]],[[64698,64698],"mapped",[1593,1580]],[[64699,64699],"mapped",[1593,1605]],[[64700,64700],"mapped",[1594,1580]],[[64701,64701],"mapped",[1594,1605]],[[64702,64702],"mapped",[1601,1580]],[[64703,64703],"mapped",[1601,1581]],[[64704,64704],"mapped",[1601,1582]],[[64705,64705],"mapped",[1601,1605]],[[64706,64706],"mapped",[1602,1581]],[[64707,64707],"mapped",[1602,1605]],[[64708,64708],"mapped",[1603,1580]],[[64709,64709],"mapped",[1603,1581]],[[64710,64710],"mapped",[1603,1582]],[[64711,64711],"mapped",[1603,1604]],[[64712,64712],"mapped",[1603,1605]],[[64713,64713],"mapped",[1604,1580]],[[64714,64714],"mapped",[1604,1581]],[[64715,64715],"mapped",[1604,1582]],[[64716,64716],"mapped",[1604,1605]],[[64717,64717],"mapped",[1604,1607]],[[64718,64718],"mapped",[1605,1580]],[[64719,64719],"mapped",[1605,1581]],[[64720,64720],"mapped",[1605,1582]],[[64721,64721],"mapped",[1605,1605]],[[64722,64722],"mapped",[1606,1580]],[[64723,64723],"mapped",[1606,1581]],[[64724,64724],"mapped",[1606,1582]],[[64725,64725],"mapped",[1606,1605]],[[64726,64726],"mapped",[1606,1607]],[[64727,64727],"mapped",[1607,1580]],[[64728,64728],"mapped",[1607,1605]],[[64729,64729],"mapped",[1607,1648]],[[64730,64730],"mapped",[1610,1580]],[[64731,64731],"mapped",[1610,1581]],[[64732,64732],"mapped",[1610,1582]],[[64733,64733],"mapped",[1610,1605]],[[64734,64734],"mapped",[1610,1607]],[[64735,64735],"mapped",[1574,1605]],[[64736,64736],"mapped",[1574,1607]],[[64737,64737],"mapped",[1576,1605]],[[64738,64738],"mapped",[1576,1607]],[[64739,64739],"mapped",[1578,1605]],[[64740,64740],"mapped",[1578,1607]],[[64741,64741],"mapped",[1579,1605]],[[64742,64742],"mapped",[1579,1607]],[[64743,64743],"mapped",[1587,1605]],[[64744,64744],"mapped",[1587,1607]],[[64745,64745],"mapped",[1588,1605]],[[64746,64746],"mapped",[1588,1607]],[[64747,64747],"mapped",[1603,1604]],[[64748,64748],"mapped",[1603,1605]],[[64749,64749],"mapped",[1604,1605]],[[64750,64750],"mapped",[1606,1605]],[[64751,64751],"mapped",[1606,1607]],[[64752,64752],"mapped",[1610,1605]],[[64753,64753],"mapped",[1610,1607]],[[64754,64754],"mapped",[1600,1614,1617]],[[64755,64755],"mapped",[1600,1615,1617]],[[64756,64756],"mapped",[1600,1616,1617]],[[64757,64757],"mapped",[1591,1609]],[[64758,64758],"mapped",[1591,1610]],[[64759,64759],"mapped",[1593,1609]],[[64760,64760],"mapped",[1593,1610]],[[64761,64761],"mapped",[1594,1609]],[[64762,64762],"mapped",[1594,1610]],[[64763,64763],"mapped",[1587,1609]],[[64764,64764],"mapped",[1587,1610]],[[64765,64765],"mapped",[1588,1609]],[[64766,64766],"mapped",[1588,1610]],[[64767,64767],"mapped",[1581,1609]],[[64768,64768],"mapped",[1581,1610]],[[64769,64769],"mapped",[1580,1609]],[[64770,64770],"mapped",[1580,1610]],[[64771,64771],"mapped",[1582,1609]],[[64772,64772],"mapped",[1582,1610]],[[64773,64773],"mapped",[1589,1609]],[[64774,64774],"mapped",[1589,1610]],[[64775,64775],"mapped",[1590,1609]],[[64776,64776],"mapped",[1590,1610]],[[64777,64777],"mapped",[1588,1580]],[[64778,64778],"mapped",[1588,1581]],[[64779,64779],"mapped",[1588,1582]],[[64780,64780],"mapped",[1588,1605]],[[64781,64781],"mapped",[1588,1585]],[[64782,64782],"mapped",[1587,1585]],[[64783,64783],"mapped",[1589,1585]],[[64784,64784],"mapped",[1590,1585]],[[64785,64785],"mapped",[1591,1609]],[[64786,64786],"mapped",[1591,1610]],[[64787,64787],"mapped",[1593,1609]],[[64788,64788],"mapped",[1593,1610]],[[64789,64789],"mapped",[1594,1609]],[[64790,64790],"mapped",[1594,1610]],[[64791,64791],"mapped",[1587,1609]],[[64792,64792],"mapped",[1587,1610]],[[64793,64793],"mapped",[1588,1609]],[[64794,64794],"mapped",[1588,1610]],[[64795,64795],"mapped",[1581,1609]],[[64796,64796],"mapped",[1581,1610]],[[64797,64797],"mapped",[1580,1609]],[[64798,64798],"mapped",[1580,1610]],[[64799,64799],"mapped",[1582,1609]],[[64800,64800],"mapped",[1582,1610]],[[64801,64801],"mapped",[1589,1609]],[[64802,64802],"mapped",[1589,1610]],[[64803,64803],"mapped",[1590,1609]],[[64804,64804],"mapped",[1590,1610]],[[64805,64805],"mapped",[1588,1580]],[[64806,64806],"mapped",[1588,1581]],[[64807,64807],"mapped",[1588,1582]],[[64808,64808],"mapped",[1588,1605]],[[64809,64809],"mapped",[1588,1585]],[[64810,64810],"mapped",[1587,1585]],[[64811,64811],"mapped",[1589,1585]],[[64812,64812],"mapped",[1590,1585]],[[64813,64813],"mapped",[1588,1580]],[[64814,64814],"mapped",[1588,1581]],[[64815,64815],"mapped",[1588,1582]],[[64816,64816],"mapped",[1588,1605]],[[64817,64817],"mapped",[1587,1607]],[[64818,64818],"mapped",[1588,1607]],[[64819,64819],"mapped",[1591,1605]],[[64820,64820],"mapped",[1587,1580]],[[64821,64821],"mapped",[1587,1581]],[[64822,64822],"mapped",[1587,1582]],[[64823,64823],"mapped",[1588,1580]],[[64824,64824],"mapped",[1588,1581]],[[64825,64825],"mapped",[1588,1582]],[[64826,64826],"mapped",[1591,1605]],[[64827,64827],"mapped",[1592,1605]],[[64828,64829],"mapped",[1575,1611]],[[64830,64831],"valid",[],"NV8"],[[64832,64847],"disallowed"],[[64848,64848],"mapped",[1578,1580,1605]],[[64849,64850],"mapped",[1578,1581,1580]],[[64851,64851],"mapped",[1578,1581,1605]],[[64852,64852],"mapped",[1578,1582,1605]],[[64853,64853],"mapped",[1578,1605,1580]],[[64854,64854],"mapped",[1578,1605,1581]],[[64855,64855],"mapped",[1578,1605,1582]],[[64856,64857],"mapped",[1580,1605,1581]],[[64858,64858],"mapped",[1581,1605,1610]],[[64859,64859],"mapped",[1581,1605,1609]],[[64860,64860],"mapped",[1587,1581,1580]],[[64861,64861],"mapped",[1587,1580,1581]],[[64862,64862],"mapped",[1587,1580,1609]],[[64863,64864],"mapped",[1587,1605,1581]],[[64865,64865],"mapped",[1587,1605,1580]],[[64866,64867],"mapped",[1587,1605,1605]],[[64868,64869],"mapped",[1589,1581,1581]],[[64870,64870],"mapped",[1589,1605,1605]],[[64871,64872],"mapped",[1588,1581,1605]],[[64873,64873],"mapped",[1588,1580,1610]],[[64874,64875],"mapped",[1588,1605,1582]],[[64876,64877],"mapped",[1588,1605,1605]],[[64878,64878],"mapped",[1590,1581,1609]],[[64879,64880],"mapped",[1590,1582,1605]],[[64881,64882],"mapped",[1591,1605,1581]],[[64883,64883],"mapped",[1591,1605,1605]],[[64884,64884],"mapped",[1591,1605,1610]],[[64885,64885],"mapped",[1593,1580,1605]],[[64886,64887],"mapped",[1593,1605,1605]],[[64888,64888],"mapped",[1593,1605,1609]],[[64889,64889],"mapped",[1594,1605,1605]],[[64890,64890],"mapped",[1594,1605,1610]],[[64891,64891],"mapped",[1594,1605,1609]],[[64892,64893],"mapped",[1601,1582,1605]],[[64894,64894],"mapped",[1602,1605,1581]],[[64895,64895],"mapped",[1602,1605,1605]],[[64896,64896],"mapped",[1604,1581,1605]],[[64897,64897],"mapped",[1604,1581,1610]],[[64898,64898],"mapped",[1604,1581,1609]],[[64899,64900],"mapped",[1604,1580,1580]],[[64901,64902],"mapped",[1604,1582,1605]],[[64903,64904],"mapped",[1604,1605,1581]],[[64905,64905],"mapped",[1605,1581,1580]],[[64906,64906],"mapped",[1605,1581,1605]],[[64907,64907],"mapped",[1605,1581,1610]],[[64908,64908],"mapped",[1605,1580,1581]],[[64909,64909],"mapped",[1605,1580,1605]],[[64910,64910],"mapped",[1605,1582,1580]],[[64911,64911],"mapped",[1605,1582,1605]],[[64912,64913],"disallowed"],[[64914,64914],"mapped",[1605,1580,1582]],[[64915,64915],"mapped",[1607,1605,1580]],[[64916,64916],"mapped",[1607,1605,1605]],[[64917,64917],"mapped",[1606,1581,1605]],[[64918,64918],"mapped",[1606,1581,1609]],[[64919,64920],"mapped",[1606,1580,1605]],[[64921,64921],"mapped",[1606,1580,1609]],[[64922,64922],"mapped",[1606,1605,1610]],[[64923,64923],"mapped",[1606,1605,1609]],[[64924,64925],"mapped",[1610,1605,1605]],[[64926,64926],"mapped",[1576,1582,1610]],[[64927,64927],"mapped",[1578,1580,1610]],[[64928,64928],"mapped",[1578,1580,1609]],[[64929,64929],"mapped",[1578,1582,1610]],[[64930,64930],"mapped",[1578,1582,1609]],[[64931,64931],"mapped",[1578,1605,1610]],[[64932,64932],"mapped",[1578,1605,1609]],[[64933,64933],"mapped",[1580,1605,1610]],[[64934,64934],"mapped",[1580,1581,1609]],[[64935,64935],"mapped",[1580,1605,1609]],[[64936,64936],"mapped",[1587,1582,1609]],[[64937,64937],"mapped",[1589,1581,1610]],[[64938,64938],"mapped",[1588,1581,1610]],[[64939,64939],"mapped",[1590,1581,1610]],[[64940,64940],"mapped",[1604,1580,1610]],[[64941,64941],"mapped",[1604,1605,1610]],[[64942,64942],"mapped",[1610,1581,1610]],[[64943,64943],"mapped",[1610,1580,1610]],[[64944,64944],"mapped",[1610,1605,1610]],[[64945,64945],"mapped",[1605,1605,1610]],[[64946,64946],"mapped",[1602,1605,1610]],[[64947,64947],"mapped",[1606,1581,1610]],[[64948,64948],"mapped",[1602,1605,1581]],[[64949,64949],"mapped",[1604,1581,1605]],[[64950,64950],"mapped",[1593,1605,1610]],[[64951,64951],"mapped",[1603,1605,1610]],[[64952,64952],"mapped",[1606,1580,1581]],[[64953,64953],"mapped",[1605,1582,1610]],[[64954,64954],"mapped",[1604,1580,1605]],[[64955,64955],"mapped",[1603,1605,1605]],[[64956,64956],"mapped",[1604,1580,1605]],[[64957,64957],"mapped",[1606,1580,1581]],[[64958,64958],"mapped",[1580,1581,1610]],[[64959,64959],"mapped",[1581,1580,1610]],[[64960,64960],"mapped",[1605,1580,1610]],[[64961,64961],"mapped",[1601,1605,1610]],[[64962,64962],"mapped",[1576,1581,1610]],[[64963,64963],"mapped",[1603,1605,1605]],[[64964,64964],"mapped",[1593,1580,1605]],[[64965,64965],"mapped",[1589,1605,1605]],[[64966,64966],"mapped",[1587,1582,1610]],[[64967,64967],"mapped",[1606,1580,1610]],[[64968,64975],"disallowed"],[[64976,65007],"disallowed"],[[65008,65008],"mapped",[1589,1604,1746]],[[65009,65009],"mapped",[1602,1604,1746]],[[65010,65010],"mapped",[1575,1604,1604,1607]],[[65011,65011],"mapped",[1575,1603,1576,1585]],[[65012,65012],"mapped",[1605,1581,1605,1583]],[[65013,65013],"mapped",[1589,1604,1593,1605]],[[65014,65014],"mapped",[1585,1587,1608,1604]],[[65015,65015],"mapped",[1593,1604,1610,1607]],[[65016,65016],"mapped",[1608,1587,1604,1605]],[[65017,65017],"mapped",[1589,1604,1609]],[[65018,65018],"disallowed_STD3_mapped",[1589,1604,1609,32,1575,1604,1604,1607,32,1593,1604,1610,1607,32,1608,1587,1604,1605]],[[65019,65019],"disallowed_STD3_mapped",[1580,1604,32,1580,1604,1575,1604,1607]],[[65020,65020],"mapped",[1585,1740,1575,1604]],[[65021,65021],"valid",[],"NV8"],[[65022,65023],"disallowed"],[[65024,65039],"ignored"],[[65040,65040],"disallowed_STD3_mapped",[44]],[[65041,65041],"mapped",[12289]],[[65042,65042],"disallowed"],[[65043,65043],"disallowed_STD3_mapped",[58]],[[65044,65044],"disallowed_STD3_mapped",[59]],[[65045,65045],"disallowed_STD3_mapped",[33]],[[65046,65046],"disallowed_STD3_mapped",[63]],[[65047,65047],"mapped",[12310]],[[65048,65048],"mapped",[12311]],[[65049,65049],"disallowed"],[[65050,65055],"disallowed"],[[65056,65059],"valid"],[[65060,65062],"valid"],[[65063,65069],"valid"],[[65070,65071],"valid"],[[65072,65072],"disallowed"],[[65073,65073],"mapped",[8212]],[[65074,65074],"mapped",[8211]],[[65075,65076],"disallowed_STD3_mapped",[95]],[[65077,65077],"disallowed_STD3_mapped",[40]],[[65078,65078],"disallowed_STD3_mapped",[41]],[[65079,65079],"disallowed_STD3_mapped",[123]],[[65080,65080],"disallowed_STD3_mapped",[125]],[[65081,65081],"mapped",[12308]],[[65082,65082],"mapped",[12309]],[[65083,65083],"mapped",[12304]],[[65084,65084],"mapped",[12305]],[[65085,65085],"mapped",[12298]],[[65086,65086],"mapped",[12299]],[[65087,65087],"mapped",[12296]],[[65088,65088],"mapped",[12297]],[[65089,65089],"mapped",[12300]],[[65090,65090],"mapped",[12301]],[[65091,65091],"mapped",[12302]],[[65092,65092],"mapped",[12303]],[[65093,65094],"valid",[],"NV8"],[[65095,65095],"disallowed_STD3_mapped",[91]],[[65096,65096],"disallowed_STD3_mapped",[93]],[[65097,65100],"disallowed_STD3_mapped",[32,773]],[[65101,65103],"disallowed_STD3_mapped",[95]],[[65104,65104],"disallowed_STD3_mapped",[44]],[[65105,65105],"mapped",[12289]],[[65106,65106],"disallowed"],[[65107,65107],"disallowed"],[[65108,65108],"disallowed_STD3_mapped",[59]],[[65109,65109],"disallowed_STD3_mapped",[58]],[[65110,65110],"disallowed_STD3_mapped",[63]],[[65111,65111],"disallowed_STD3_mapped",[33]],[[65112,65112],"mapped",[8212]],[[65113,65113],"disallowed_STD3_mapped",[40]],[[65114,65114],"disallowed_STD3_mapped",[41]],[[65115,65115],"disallowed_STD3_mapped",[123]],[[65116,65116],"disallowed_STD3_mapped",[125]],[[65117,65117],"mapped",[12308]],[[65118,65118],"mapped",[12309]],[[65119,65119],"disallowed_STD3_mapped",[35]],[[65120,65120],"disallowed_STD3_mapped",[38]],[[65121,65121],"disallowed_STD3_mapped",[42]],[[65122,65122],"disallowed_STD3_mapped",[43]],[[65123,65123],"mapped",[45]],[[65124,65124],"disallowed_STD3_mapped",[60]],[[65125,65125],"disallowed_STD3_mapped",[62]],[[65126,65126],"disallowed_STD3_mapped",[61]],[[65127,65127],"disallowed"],[[65128,65128],"disallowed_STD3_mapped",[92]],[[65129,65129],"disallowed_STD3_mapped",[36]],[[65130,65130],"disallowed_STD3_mapped",[37]],[[65131,65131],"disallowed_STD3_mapped",[64]],[[65132,65135],"disallowed"],[[65136,65136],"disallowed_STD3_mapped",[32,1611]],[[65137,65137],"mapped",[1600,1611]],[[65138,65138],"disallowed_STD3_mapped",[32,1612]],[[65139,65139],"valid"],[[65140,65140],"disallowed_STD3_mapped",[32,1613]],[[65141,65141],"disallowed"],[[65142,65142],"disallowed_STD3_mapped",[32,1614]],[[65143,65143],"mapped",[1600,1614]],[[65144,65144],"disallowed_STD3_mapped",[32,1615]],[[65145,65145],"mapped",[1600,1615]],[[65146,65146],"disallowed_STD3_mapped",[32,1616]],[[65147,65147],"mapped",[1600,1616]],[[65148,65148],"disallowed_STD3_mapped",[32,1617]],[[65149,65149],"mapped",[1600,1617]],[[65150,65150],"disallowed_STD3_mapped",[32,1618]],[[65151,65151],"mapped",[1600,1618]],[[65152,65152],"mapped",[1569]],[[65153,65154],"mapped",[1570]],[[65155,65156],"mapped",[1571]],[[65157,65158],"mapped",[1572]],[[65159,65160],"mapped",[1573]],[[65161,65164],"mapped",[1574]],[[65165,65166],"mapped",[1575]],[[65167,65170],"mapped",[1576]],[[65171,65172],"mapped",[1577]],[[65173,65176],"mapped",[1578]],[[65177,65180],"mapped",[1579]],[[65181,65184],"mapped",[1580]],[[65185,65188],"mapped",[1581]],[[65189,65192],"mapped",[1582]],[[65193,65194],"mapped",[1583]],[[65195,65196],"mapped",[1584]],[[65197,65198],"mapped",[1585]],[[65199,65200],"mapped",[1586]],[[65201,65204],"mapped",[1587]],[[65205,65208],"mapped",[1588]],[[65209,65212],"mapped",[1589]],[[65213,65216],"mapped",[1590]],[[65217,65220],"mapped",[1591]],[[65221,65224],"mapped",[1592]],[[65225,65228],"mapped",[1593]],[[65229,65232],"mapped",[1594]],[[65233,65236],"mapped",[1601]],[[65237,65240],"mapped",[1602]],[[65241,65244],"mapped",[1603]],[[65245,65248],"mapped",[1604]],[[65249,65252],"mapped",[1605]],[[65253,65256],"mapped",[1606]],[[65257,65260],"mapped",[1607]],[[65261,65262],"mapped",[1608]],[[65263,65264],"mapped",[1609]],[[65265,65268],"mapped",[1610]],[[65269,65270],"mapped",[1604,1570]],[[65271,65272],"mapped",[1604,1571]],[[65273,65274],"mapped",[1604,1573]],[[65275,65276],"mapped",[1604,1575]],[[65277,65278],"disallowed"],[[65279,65279],"ignored"],[[65280,65280],"disallowed"],[[65281,65281],"disallowed_STD3_mapped",[33]],[[65282,65282],"disallowed_STD3_mapped",[34]],[[65283,65283],"disallowed_STD3_mapped",[35]],[[65284,65284],"disallowed_STD3_mapped",[36]],[[65285,65285],"disallowed_STD3_mapped",[37]],[[65286,65286],"disallowed_STD3_mapped",[38]],[[65287,65287],"disallowed_STD3_mapped",[39]],[[65288,65288],"disallowed_STD3_mapped",[40]],[[65289,65289],"disallowed_STD3_mapped",[41]],[[65290,65290],"disallowed_STD3_mapped",[42]],[[65291,65291],"disallowed_STD3_mapped",[43]],[[65292,65292],"disallowed_STD3_mapped",[44]],[[65293,65293],"mapped",[45]],[[65294,65294],"mapped",[46]],[[65295,65295],"disallowed_STD3_mapped",[47]],[[65296,65296],"mapped",[48]],[[65297,65297],"mapped",[49]],[[65298,65298],"mapped",[50]],[[65299,65299],"mapped",[51]],[[65300,65300],"mapped",[52]],[[65301,65301],"mapped",[53]],[[65302,65302],"mapped",[54]],[[65303,65303],"mapped",[55]],[[65304,65304],"mapped",[56]],[[65305,65305],"mapped",[57]],[[65306,65306],"disallowed_STD3_mapped",[58]],[[65307,65307],"disallowed_STD3_mapped",[59]],[[65308,65308],"disallowed_STD3_mapped",[60]],[[65309,65309],"disallowed_STD3_mapped",[61]],[[65310,65310],"disallowed_STD3_mapped",[62]],[[65311,65311],"disallowed_STD3_mapped",[63]],[[65312,65312],"disallowed_STD3_mapped",[64]],[[65313,65313],"mapped",[97]],[[65314,65314],"mapped",[98]],[[65315,65315],"mapped",[99]],[[65316,65316],"mapped",[100]],[[65317,65317],"mapped",[101]],[[65318,65318],"mapped",[102]],[[65319,65319],"mapped",[103]],[[65320,65320],"mapped",[104]],[[65321,65321],"mapped",[105]],[[65322,65322],"mapped",[106]],[[65323,65323],"mapped",[107]],[[65324,65324],"mapped",[108]],[[65325,65325],"mapped",[109]],[[65326,65326],"mapped",[110]],[[65327,65327],"mapped",[111]],[[65328,65328],"mapped",[112]],[[65329,65329],"mapped",[113]],[[65330,65330],"mapped",[114]],[[65331,65331],"mapped",[115]],[[65332,65332],"mapped",[116]],[[65333,65333],"mapped",[117]],[[65334,65334],"mapped",[118]],[[65335,65335],"mapped",[119]],[[65336,65336],"mapped",[120]],[[65337,65337],"mapped",[121]],[[65338,65338],"mapped",[122]],[[65339,65339],"disallowed_STD3_mapped",[91]],[[65340,65340],"disallowed_STD3_mapped",[92]],[[65341,65341],"disallowed_STD3_mapped",[93]],[[65342,65342],"disallowed_STD3_mapped",[94]],[[65343,65343],"disallowed_STD3_mapped",[95]],[[65344,65344],"disallowed_STD3_mapped",[96]],[[65345,65345],"mapped",[97]],[[65346,65346],"mapped",[98]],[[65347,65347],"mapped",[99]],[[65348,65348],"mapped",[100]],[[65349,65349],"mapped",[101]],[[65350,65350],"mapped",[102]],[[65351,65351],"mapped",[103]],[[65352,65352],"mapped",[104]],[[65353,65353],"mapped",[105]],[[65354,65354],"mapped",[106]],[[65355,65355],"mapped",[107]],[[65356,65356],"mapped",[108]],[[65357,65357],"mapped",[109]],[[65358,65358],"mapped",[110]],[[65359,65359],"mapped",[111]],[[65360,65360],"mapped",[112]],[[65361,65361],"mapped",[113]],[[65362,65362],"mapped",[114]],[[65363,65363],"mapped",[115]],[[65364,65364],"mapped",[116]],[[65365,65365],"mapped",[117]],[[65366,65366],"mapped",[118]],[[65367,65367],"mapped",[119]],[[65368,65368],"mapped",[120]],[[65369,65369],"mapped",[121]],[[65370,65370],"mapped",[122]],[[65371,65371],"disallowed_STD3_mapped",[123]],[[65372,65372],"disallowed_STD3_mapped",[124]],[[65373,65373],"disallowed_STD3_mapped",[125]],[[65374,65374],"disallowed_STD3_mapped",[126]],[[65375,65375],"mapped",[10629]],[[65376,65376],"mapped",[10630]],[[65377,65377],"mapped",[46]],[[65378,65378],"mapped",[12300]],[[65379,65379],"mapped",[12301]],[[65380,65380],"mapped",[12289]],[[65381,65381],"mapped",[12539]],[[65382,65382],"mapped",[12530]],[[65383,65383],"mapped",[12449]],[[65384,65384],"mapped",[12451]],[[65385,65385],"mapped",[12453]],[[65386,65386],"mapped",[12455]],[[65387,65387],"mapped",[12457]],[[65388,65388],"mapped",[12515]],[[65389,65389],"mapped",[12517]],[[65390,65390],"mapped",[12519]],[[65391,65391],"mapped",[12483]],[[65392,65392],"mapped",[12540]],[[65393,65393],"mapped",[12450]],[[65394,65394],"mapped",[12452]],[[65395,65395],"mapped",[12454]],[[65396,65396],"mapped",[12456]],[[65397,65397],"mapped",[12458]],[[65398,65398],"mapped",[12459]],[[65399,65399],"mapped",[12461]],[[65400,65400],"mapped",[12463]],[[65401,65401],"mapped",[12465]],[[65402,65402],"mapped",[12467]],[[65403,65403],"mapped",[12469]],[[65404,65404],"mapped",[12471]],[[65405,65405],"mapped",[12473]],[[65406,65406],"mapped",[12475]],[[65407,65407],"mapped",[12477]],[[65408,65408],"mapped",[12479]],[[65409,65409],"mapped",[12481]],[[65410,65410],"mapped",[12484]],[[65411,65411],"mapped",[12486]],[[65412,65412],"mapped",[12488]],[[65413,65413],"mapped",[12490]],[[65414,65414],"mapped",[12491]],[[65415,65415],"mapped",[12492]],[[65416,65416],"mapped",[12493]],[[65417,65417],"mapped",[12494]],[[65418,65418],"mapped",[12495]],[[65419,65419],"mapped",[12498]],[[65420,65420],"mapped",[12501]],[[65421,65421],"mapped",[12504]],[[65422,65422],"mapped",[12507]],[[65423,65423],"mapped",[12510]],[[65424,65424],"mapped",[12511]],[[65425,65425],"mapped",[12512]],[[65426,65426],"mapped",[12513]],[[65427,65427],"mapped",[12514]],[[65428,65428],"mapped",[12516]],[[65429,65429],"mapped",[12518]],[[65430,65430],"mapped",[12520]],[[65431,65431],"mapped",[12521]],[[65432,65432],"mapped",[12522]],[[65433,65433],"mapped",[12523]],[[65434,65434],"mapped",[12524]],[[65435,65435],"mapped",[12525]],[[65436,65436],"mapped",[12527]],[[65437,65437],"mapped",[12531]],[[65438,65438],"mapped",[12441]],[[65439,65439],"mapped",[12442]],[[65440,65440],"disallowed"],[[65441,65441],"mapped",[4352]],[[65442,65442],"mapped",[4353]],[[65443,65443],"mapped",[4522]],[[65444,65444],"mapped",[4354]],[[65445,65445],"mapped",[4524]],[[65446,65446],"mapped",[4525]],[[65447,65447],"mapped",[4355]],[[65448,65448],"mapped",[4356]],[[65449,65449],"mapped",[4357]],[[65450,65450],"mapped",[4528]],[[65451,65451],"mapped",[4529]],[[65452,65452],"mapped",[4530]],[[65453,65453],"mapped",[4531]],[[65454,65454],"mapped",[4532]],[[65455,65455],"mapped",[4533]],[[65456,65456],"mapped",[4378]],[[65457,65457],"mapped",[4358]],[[65458,65458],"mapped",[4359]],[[65459,65459],"mapped",[4360]],[[65460,65460],"mapped",[4385]],[[65461,65461],"mapped",[4361]],[[65462,65462],"mapped",[4362]],[[65463,65463],"mapped",[4363]],[[65464,65464],"mapped",[4364]],[[65465,65465],"mapped",[4365]],[[65466,65466],"mapped",[4366]],[[65467,65467],"mapped",[4367]],[[65468,65468],"mapped",[4368]],[[65469,65469],"mapped",[4369]],[[65470,65470],"mapped",[4370]],[[65471,65473],"disallowed"],[[65474,65474],"mapped",[4449]],[[65475,65475],"mapped",[4450]],[[65476,65476],"mapped",[4451]],[[65477,65477],"mapped",[4452]],[[65478,65478],"mapped",[4453]],[[65479,65479],"mapped",[4454]],[[65480,65481],"disallowed"],[[65482,65482],"mapped",[4455]],[[65483,65483],"mapped",[4456]],[[65484,65484],"mapped",[4457]],[[65485,65485],"mapped",[4458]],[[65486,65486],"mapped",[4459]],[[65487,65487],"mapped",[4460]],[[65488,65489],"disallowed"],[[65490,65490],"mapped",[4461]],[[65491,65491],"mapped",[4462]],[[65492,65492],"mapped",[4463]],[[65493,65493],"mapped",[4464]],[[65494,65494],"mapped",[4465]],[[65495,65495],"mapped",[4466]],[[65496,65497],"disallowed"],[[65498,65498],"mapped",[4467]],[[65499,65499],"mapped",[4468]],[[65500,65500],"mapped",[4469]],[[65501,65503],"disallowed"],[[65504,65504],"mapped",[162]],[[65505,65505],"mapped",[163]],[[65506,65506],"mapped",[172]],[[65507,65507],"disallowed_STD3_mapped",[32,772]],[[65508,65508],"mapped",[166]],[[65509,65509],"mapped",[165]],[[65510,65510],"mapped",[8361]],[[65511,65511],"disallowed"],[[65512,65512],"mapped",[9474]],[[65513,65513],"mapped",[8592]],[[65514,65514],"mapped",[8593]],[[65515,65515],"mapped",[8594]],[[65516,65516],"mapped",[8595]],[[65517,65517],"mapped",[9632]],[[65518,65518],"mapped",[9675]],[[65519,65528],"disallowed"],[[65529,65531],"disallowed"],[[65532,65532],"disallowed"],[[65533,65533],"disallowed"],[[65534,65535],"disallowed"],[[65536,65547],"valid"],[[65548,65548],"disallowed"],[[65549,65574],"valid"],[[65575,65575],"disallowed"],[[65576,65594],"valid"],[[65595,65595],"disallowed"],[[65596,65597],"valid"],[[65598,65598],"disallowed"],[[65599,65613],"valid"],[[65614,65615],"disallowed"],[[65616,65629],"valid"],[[65630,65663],"disallowed"],[[65664,65786],"valid"],[[65787,65791],"disallowed"],[[65792,65794],"valid",[],"NV8"],[[65795,65798],"disallowed"],[[65799,65843],"valid",[],"NV8"],[[65844,65846],"disallowed"],[[65847,65855],"valid",[],"NV8"],[[65856,65930],"valid",[],"NV8"],[[65931,65932],"valid",[],"NV8"],[[65933,65935],"disallowed"],[[65936,65947],"valid",[],"NV8"],[[65948,65951],"disallowed"],[[65952,65952],"valid",[],"NV8"],[[65953,65999],"disallowed"],[[66000,66044],"valid",[],"NV8"],[[66045,66045],"valid"],[[66046,66175],"disallowed"],[[66176,66204],"valid"],[[66205,66207],"disallowed"],[[66208,66256],"valid"],[[66257,66271],"disallowed"],[[66272,66272],"valid"],[[66273,66299],"valid",[],"NV8"],[[66300,66303],"disallowed"],[[66304,66334],"valid"],[[66335,66335],"valid"],[[66336,66339],"valid",[],"NV8"],[[66340,66351],"disallowed"],[[66352,66368],"valid"],[[66369,66369],"valid",[],"NV8"],[[66370,66377],"valid"],[[66378,66378],"valid",[],"NV8"],[[66379,66383],"disallowed"],[[66384,66426],"valid"],[[66427,66431],"disallowed"],[[66432,66461],"valid"],[[66462,66462],"disallowed"],[[66463,66463],"valid",[],"NV8"],[[66464,66499],"valid"],[[66500,66503],"disallowed"],[[66504,66511],"valid"],[[66512,66517],"valid",[],"NV8"],[[66518,66559],"disallowed"],[[66560,66560],"mapped",[66600]],[[66561,66561],"mapped",[66601]],[[66562,66562],"mapped",[66602]],[[66563,66563],"mapped",[66603]],[[66564,66564],"mapped",[66604]],[[66565,66565],"mapped",[66605]],[[66566,66566],"mapped",[66606]],[[66567,66567],"mapped",[66607]],[[66568,66568],"mapped",[66608]],[[66569,66569],"mapped",[66609]],[[66570,66570],"mapped",[66610]],[[66571,66571],"mapped",[66611]],[[66572,66572],"mapped",[66612]],[[66573,66573],"mapped",[66613]],[[66574,66574],"mapped",[66614]],[[66575,66575],"mapped",[66615]],[[66576,66576],"mapped",[66616]],[[66577,66577],"mapped",[66617]],[[66578,66578],"mapped",[66618]],[[66579,66579],"mapped",[66619]],[[66580,66580],"mapped",[66620]],[[66581,66581],"mapped",[66621]],[[66582,66582],"mapped",[66622]],[[66583,66583],"mapped",[66623]],[[66584,66584],"mapped",[66624]],[[66585,66585],"mapped",[66625]],[[66586,66586],"mapped",[66626]],[[66587,66587],"mapped",[66627]],[[66588,66588],"mapped",[66628]],[[66589,66589],"mapped",[66629]],[[66590,66590],"mapped",[66630]],[[66591,66591],"mapped",[66631]],[[66592,66592],"mapped",[66632]],[[66593,66593],"mapped",[66633]],[[66594,66594],"mapped",[66634]],[[66595,66595],"mapped",[66635]],[[66596,66596],"mapped",[66636]],[[66597,66597],"mapped",[66637]],[[66598,66598],"mapped",[66638]],[[66599,66599],"mapped",[66639]],[[66600,66637],"valid"],[[66638,66717],"valid"],[[66718,66719],"disallowed"],[[66720,66729],"valid"],[[66730,66815],"disallowed"],[[66816,66855],"valid"],[[66856,66863],"disallowed"],[[66864,66915],"valid"],[[66916,66926],"disallowed"],[[66927,66927],"valid",[],"NV8"],[[66928,67071],"disallowed"],[[67072,67382],"valid"],[[67383,67391],"disallowed"],[[67392,67413],"valid"],[[67414,67423],"disallowed"],[[67424,67431],"valid"],[[67432,67583],"disallowed"],[[67584,67589],"valid"],[[67590,67591],"disallowed"],[[67592,67592],"valid"],[[67593,67593],"disallowed"],[[67594,67637],"valid"],[[67638,67638],"disallowed"],[[67639,67640],"valid"],[[67641,67643],"disallowed"],[[67644,67644],"valid"],[[67645,67646],"disallowed"],[[67647,67647],"valid"],[[67648,67669],"valid"],[[67670,67670],"disallowed"],[[67671,67679],"valid",[],"NV8"],[[67680,67702],"valid"],[[67703,67711],"valid",[],"NV8"],[[67712,67742],"valid"],[[67743,67750],"disallowed"],[[67751,67759],"valid",[],"NV8"],[[67760,67807],"disallowed"],[[67808,67826],"valid"],[[67827,67827],"disallowed"],[[67828,67829],"valid"],[[67830,67834],"disallowed"],[[67835,67839],"valid",[],"NV8"],[[67840,67861],"valid"],[[67862,67865],"valid",[],"NV8"],[[67866,67867],"valid",[],"NV8"],[[67868,67870],"disallowed"],[[67871,67871],"valid",[],"NV8"],[[67872,67897],"valid"],[[67898,67902],"disallowed"],[[67903,67903],"valid",[],"NV8"],[[67904,67967],"disallowed"],[[67968,68023],"valid"],[[68024,68027],"disallowed"],[[68028,68029],"valid",[],"NV8"],[[68030,68031],"valid"],[[68032,68047],"valid",[],"NV8"],[[68048,68049],"disallowed"],[[68050,68095],"valid",[],"NV8"],[[68096,68099],"valid"],[[68100,68100],"disallowed"],[[68101,68102],"valid"],[[68103,68107],"disallowed"],[[68108,68115],"valid"],[[68116,68116],"disallowed"],[[68117,68119],"valid"],[[68120,68120],"disallowed"],[[68121,68147],"valid"],[[68148,68151],"disallowed"],[[68152,68154],"valid"],[[68155,68158],"disallowed"],[[68159,68159],"valid"],[[68160,68167],"valid",[],"NV8"],[[68168,68175],"disallowed"],[[68176,68184],"valid",[],"NV8"],[[68185,68191],"disallowed"],[[68192,68220],"valid"],[[68221,68223],"valid",[],"NV8"],[[68224,68252],"valid"],[[68253,68255],"valid",[],"NV8"],[[68256,68287],"disallowed"],[[68288,68295],"valid"],[[68296,68296],"valid",[],"NV8"],[[68297,68326],"valid"],[[68327,68330],"disallowed"],[[68331,68342],"valid",[],"NV8"],[[68343,68351],"disallowed"],[[68352,68405],"valid"],[[68406,68408],"disallowed"],[[68409,68415],"valid",[],"NV8"],[[68416,68437],"valid"],[[68438,68439],"disallowed"],[[68440,68447],"valid",[],"NV8"],[[68448,68466],"valid"],[[68467,68471],"disallowed"],[[68472,68479],"valid",[],"NV8"],[[68480,68497],"valid"],[[68498,68504],"disallowed"],[[68505,68508],"valid",[],"NV8"],[[68509,68520],"disallowed"],[[68521,68527],"valid",[],"NV8"],[[68528,68607],"disallowed"],[[68608,68680],"valid"],[[68681,68735],"disallowed"],[[68736,68736],"mapped",[68800]],[[68737,68737],"mapped",[68801]],[[68738,68738],"mapped",[68802]],[[68739,68739],"mapped",[68803]],[[68740,68740],"mapped",[68804]],[[68741,68741],"mapped",[68805]],[[68742,68742],"mapped",[68806]],[[68743,68743],"mapped",[68807]],[[68744,68744],"mapped",[68808]],[[68745,68745],"mapped",[68809]],[[68746,68746],"mapped",[68810]],[[68747,68747],"mapped",[68811]],[[68748,68748],"mapped",[68812]],[[68749,68749],"mapped",[68813]],[[68750,68750],"mapped",[68814]],[[68751,68751],"mapped",[68815]],[[68752,68752],"mapped",[68816]],[[68753,68753],"mapped",[68817]],[[68754,68754],"mapped",[68818]],[[68755,68755],"mapped",[68819]],[[68756,68756],"mapped",[68820]],[[68757,68757],"mapped",[68821]],[[68758,68758],"mapped",[68822]],[[68759,68759],"mapped",[68823]],[[68760,68760],"mapped",[68824]],[[68761,68761],"mapped",[68825]],[[68762,68762],"mapped",[68826]],[[68763,68763],"mapped",[68827]],[[68764,68764],"mapped",[68828]],[[68765,68765],"mapped",[68829]],[[68766,68766],"mapped",[68830]],[[68767,68767],"mapped",[68831]],[[68768,68768],"mapped",[68832]],[[68769,68769],"mapped",[68833]],[[68770,68770],"mapped",[68834]],[[68771,68771],"mapped",[68835]],[[68772,68772],"mapped",[68836]],[[68773,68773],"mapped",[68837]],[[68774,68774],"mapped",[68838]],[[68775,68775],"mapped",[68839]],[[68776,68776],"mapped",[68840]],[[68777,68777],"mapped",[68841]],[[68778,68778],"mapped",[68842]],[[68779,68779],"mapped",[68843]],[[68780,68780],"mapped",[68844]],[[68781,68781],"mapped",[68845]],[[68782,68782],"mapped",[68846]],[[68783,68783],"mapped",[68847]],[[68784,68784],"mapped",[68848]],[[68785,68785],"mapped",[68849]],[[68786,68786],"mapped",[68850]],[[68787,68799],"disallowed"],[[68800,68850],"valid"],[[68851,68857],"disallowed"],[[68858,68863],"valid",[],"NV8"],[[68864,69215],"disallowed"],[[69216,69246],"valid",[],"NV8"],[[69247,69631],"disallowed"],[[69632,69702],"valid"],[[69703,69709],"valid",[],"NV8"],[[69710,69713],"disallowed"],[[69714,69733],"valid",[],"NV8"],[[69734,69743],"valid"],[[69744,69758],"disallowed"],[[69759,69759],"valid"],[[69760,69818],"valid"],[[69819,69820],"valid",[],"NV8"],[[69821,69821],"disallowed"],[[69822,69825],"valid",[],"NV8"],[[69826,69839],"disallowed"],[[69840,69864],"valid"],[[69865,69871],"disallowed"],[[69872,69881],"valid"],[[69882,69887],"disallowed"],[[69888,69940],"valid"],[[69941,69941],"disallowed"],[[69942,69951],"valid"],[[69952,69955],"valid",[],"NV8"],[[69956,69967],"disallowed"],[[69968,70003],"valid"],[[70004,70005],"valid",[],"NV8"],[[70006,70006],"valid"],[[70007,70015],"disallowed"],[[70016,70084],"valid"],[[70085,70088],"valid",[],"NV8"],[[70089,70089],"valid",[],"NV8"],[[70090,70092],"valid"],[[70093,70093],"valid",[],"NV8"],[[70094,70095],"disallowed"],[[70096,70105],"valid"],[[70106,70106],"valid"],[[70107,70107],"valid",[],"NV8"],[[70108,70108],"valid"],[[70109,70111],"valid",[],"NV8"],[[70112,70112],"disallowed"],[[70113,70132],"valid",[],"NV8"],[[70133,70143],"disallowed"],[[70144,70161],"valid"],[[70162,70162],"disallowed"],[[70163,70199],"valid"],[[70200,70205],"valid",[],"NV8"],[[70206,70271],"disallowed"],[[70272,70278],"valid"],[[70279,70279],"disallowed"],[[70280,70280],"valid"],[[70281,70281],"disallowed"],[[70282,70285],"valid"],[[70286,70286],"disallowed"],[[70287,70301],"valid"],[[70302,70302],"disallowed"],[[70303,70312],"valid"],[[70313,70313],"valid",[],"NV8"],[[70314,70319],"disallowed"],[[70320,70378],"valid"],[[70379,70383],"disallowed"],[[70384,70393],"valid"],[[70394,70399],"disallowed"],[[70400,70400],"valid"],[[70401,70403],"valid"],[[70404,70404],"disallowed"],[[70405,70412],"valid"],[[70413,70414],"disallowed"],[[70415,70416],"valid"],[[70417,70418],"disallowed"],[[70419,70440],"valid"],[[70441,70441],"disallowed"],[[70442,70448],"valid"],[[70449,70449],"disallowed"],[[70450,70451],"valid"],[[70452,70452],"disallowed"],[[70453,70457],"valid"],[[70458,70459],"disallowed"],[[70460,70468],"valid"],[[70469,70470],"disallowed"],[[70471,70472],"valid"],[[70473,70474],"disallowed"],[[70475,70477],"valid"],[[70478,70479],"disallowed"],[[70480,70480],"valid"],[[70481,70486],"disallowed"],[[70487,70487],"valid"],[[70488,70492],"disallowed"],[[70493,70499],"valid"],[[70500,70501],"disallowed"],[[70502,70508],"valid"],[[70509,70511],"disallowed"],[[70512,70516],"valid"],[[70517,70783],"disallowed"],[[70784,70853],"valid"],[[70854,70854],"valid",[],"NV8"],[[70855,70855],"valid"],[[70856,70863],"disallowed"],[[70864,70873],"valid"],[[70874,71039],"disallowed"],[[71040,71093],"valid"],[[71094,71095],"disallowed"],[[71096,71104],"valid"],[[71105,71113],"valid",[],"NV8"],[[71114,71127],"valid",[],"NV8"],[[71128,71133],"valid"],[[71134,71167],"disallowed"],[[71168,71232],"valid"],[[71233,71235],"valid",[],"NV8"],[[71236,71236],"valid"],[[71237,71247],"disallowed"],[[71248,71257],"valid"],[[71258,71295],"disallowed"],[[71296,71351],"valid"],[[71352,71359],"disallowed"],[[71360,71369],"valid"],[[71370,71423],"disallowed"],[[71424,71449],"valid"],[[71450,71452],"disallowed"],[[71453,71467],"valid"],[[71468,71471],"disallowed"],[[71472,71481],"valid"],[[71482,71487],"valid",[],"NV8"],[[71488,71839],"disallowed"],[[71840,71840],"mapped",[71872]],[[71841,71841],"mapped",[71873]],[[71842,71842],"mapped",[71874]],[[71843,71843],"mapped",[71875]],[[71844,71844],"mapped",[71876]],[[71845,71845],"mapped",[71877]],[[71846,71846],"mapped",[71878]],[[71847,71847],"mapped",[71879]],[[71848,71848],"mapped",[71880]],[[71849,71849],"mapped",[71881]],[[71850,71850],"mapped",[71882]],[[71851,71851],"mapped",[71883]],[[71852,71852],"mapped",[71884]],[[71853,71853],"mapped",[71885]],[[71854,71854],"mapped",[71886]],[[71855,71855],"mapped",[71887]],[[71856,71856],"mapped",[71888]],[[71857,71857],"mapped",[71889]],[[71858,71858],"mapped",[71890]],[[71859,71859],"mapped",[71891]],[[71860,71860],"mapped",[71892]],[[71861,71861],"mapped",[71893]],[[71862,71862],"mapped",[71894]],[[71863,71863],"mapped",[71895]],[[71864,71864],"mapped",[71896]],[[71865,71865],"mapped",[71897]],[[71866,71866],"mapped",[71898]],[[71867,71867],"mapped",[71899]],[[71868,71868],"mapped",[71900]],[[71869,71869],"mapped",[71901]],[[71870,71870],"mapped",[71902]],[[71871,71871],"mapped",[71903]],[[71872,71913],"valid"],[[71914,71922],"valid",[],"NV8"],[[71923,71934],"disallowed"],[[71935,71935],"valid"],[[71936,72383],"disallowed"],[[72384,72440],"valid"],[[72441,73727],"disallowed"],[[73728,74606],"valid"],[[74607,74648],"valid"],[[74649,74649],"valid"],[[74650,74751],"disallowed"],[[74752,74850],"valid",[],"NV8"],[[74851,74862],"valid",[],"NV8"],[[74863,74863],"disallowed"],[[74864,74867],"valid",[],"NV8"],[[74868,74868],"valid",[],"NV8"],[[74869,74879],"disallowed"],[[74880,75075],"valid"],[[75076,77823],"disallowed"],[[77824,78894],"valid"],[[78895,82943],"disallowed"],[[82944,83526],"valid"],[[83527,92159],"disallowed"],[[92160,92728],"valid"],[[92729,92735],"disallowed"],[[92736,92766],"valid"],[[92767,92767],"disallowed"],[[92768,92777],"valid"],[[92778,92781],"disallowed"],[[92782,92783],"valid",[],"NV8"],[[92784,92879],"disallowed"],[[92880,92909],"valid"],[[92910,92911],"disallowed"],[[92912,92916],"valid"],[[92917,92917],"valid",[],"NV8"],[[92918,92927],"disallowed"],[[92928,92982],"valid"],[[92983,92991],"valid",[],"NV8"],[[92992,92995],"valid"],[[92996,92997],"valid",[],"NV8"],[[92998,93007],"disallowed"],[[93008,93017],"valid"],[[93018,93018],"disallowed"],[[93019,93025],"valid",[],"NV8"],[[93026,93026],"disallowed"],[[93027,93047],"valid"],[[93048,93052],"disallowed"],[[93053,93071],"valid"],[[93072,93951],"disallowed"],[[93952,94020],"valid"],[[94021,94031],"disallowed"],[[94032,94078],"valid"],[[94079,94094],"disallowed"],[[94095,94111],"valid"],[[94112,110591],"disallowed"],[[110592,110593],"valid"],[[110594,113663],"disallowed"],[[113664,113770],"valid"],[[113771,113775],"disallowed"],[[113776,113788],"valid"],[[113789,113791],"disallowed"],[[113792,113800],"valid"],[[113801,113807],"disallowed"],[[113808,113817],"valid"],[[113818,113819],"disallowed"],[[113820,113820],"valid",[],"NV8"],[[113821,113822],"valid"],[[113823,113823],"valid",[],"NV8"],[[113824,113827],"ignored"],[[113828,118783],"disallowed"],[[118784,119029],"valid",[],"NV8"],[[119030,119039],"disallowed"],[[119040,119078],"valid",[],"NV8"],[[119079,119080],"disallowed"],[[119081,119081],"valid",[],"NV8"],[[119082,119133],"valid",[],"NV8"],[[119134,119134],"mapped",[119127,119141]],[[119135,119135],"mapped",[119128,119141]],[[119136,119136],"mapped",[119128,119141,119150]],[[119137,119137],"mapped",[119128,119141,119151]],[[119138,119138],"mapped",[119128,119141,119152]],[[119139,119139],"mapped",[119128,119141,119153]],[[119140,119140],"mapped",[119128,119141,119154]],[[119141,119154],"valid",[],"NV8"],[[119155,119162],"disallowed"],[[119163,119226],"valid",[],"NV8"],[[119227,119227],"mapped",[119225,119141]],[[119228,119228],"mapped",[119226,119141]],[[119229,119229],"mapped",[119225,119141,119150]],[[119230,119230],"mapped",[119226,119141,119150]],[[119231,119231],"mapped",[119225,119141,119151]],[[119232,119232],"mapped",[119226,119141,119151]],[[119233,119261],"valid",[],"NV8"],[[119262,119272],"valid",[],"NV8"],[[119273,119295],"disallowed"],[[119296,119365],"valid",[],"NV8"],[[119366,119551],"disallowed"],[[119552,119638],"valid",[],"NV8"],[[119639,119647],"disallowed"],[[119648,119665],"valid",[],"NV8"],[[119666,119807],"disallowed"],[[119808,119808],"mapped",[97]],[[119809,119809],"mapped",[98]],[[119810,119810],"mapped",[99]],[[119811,119811],"mapped",[100]],[[119812,119812],"mapped",[101]],[[119813,119813],"mapped",[102]],[[119814,119814],"mapped",[103]],[[119815,119815],"mapped",[104]],[[119816,119816],"mapped",[105]],[[119817,119817],"mapped",[106]],[[119818,119818],"mapped",[107]],[[119819,119819],"mapped",[108]],[[119820,119820],"mapped",[109]],[[119821,119821],"mapped",[110]],[[119822,119822],"mapped",[111]],[[119823,119823],"mapped",[112]],[[119824,119824],"mapped",[113]],[[119825,119825],"mapped",[114]],[[119826,119826],"mapped",[115]],[[119827,119827],"mapped",[116]],[[119828,119828],"mapped",[117]],[[119829,119829],"mapped",[118]],[[119830,119830],"mapped",[119]],[[119831,119831],"mapped",[120]],[[119832,119832],"mapped",[121]],[[119833,119833],"mapped",[122]],[[119834,119834],"mapped",[97]],[[119835,119835],"mapped",[98]],[[119836,119836],"mapped",[99]],[[119837,119837],"mapped",[100]],[[119838,119838],"mapped",[101]],[[119839,119839],"mapped",[102]],[[119840,119840],"mapped",[103]],[[119841,119841],"mapped",[104]],[[119842,119842],"mapped",[105]],[[119843,119843],"mapped",[106]],[[119844,119844],"mapped",[107]],[[119845,119845],"mapped",[108]],[[119846,119846],"mapped",[109]],[[119847,119847],"mapped",[110]],[[119848,119848],"mapped",[111]],[[119849,119849],"mapped",[112]],[[119850,119850],"mapped",[113]],[[119851,119851],"mapped",[114]],[[119852,119852],"mapped",[115]],[[119853,119853],"mapped",[116]],[[119854,119854],"mapped",[117]],[[119855,119855],"mapped",[118]],[[119856,119856],"mapped",[119]],[[119857,119857],"mapped",[120]],[[119858,119858],"mapped",[121]],[[119859,119859],"mapped",[122]],[[119860,119860],"mapped",[97]],[[119861,119861],"mapped",[98]],[[119862,119862],"mapped",[99]],[[119863,119863],"mapped",[100]],[[119864,119864],"mapped",[101]],[[119865,119865],"mapped",[102]],[[119866,119866],"mapped",[103]],[[119867,119867],"mapped",[104]],[[119868,119868],"mapped",[105]],[[119869,119869],"mapped",[106]],[[119870,119870],"mapped",[107]],[[119871,119871],"mapped",[108]],[[119872,119872],"mapped",[109]],[[119873,119873],"mapped",[110]],[[119874,119874],"mapped",[111]],[[119875,119875],"mapped",[112]],[[119876,119876],"mapped",[113]],[[119877,119877],"mapped",[114]],[[119878,119878],"mapped",[115]],[[119879,119879],"mapped",[116]],[[119880,119880],"mapped",[117]],[[119881,119881],"mapped",[118]],[[119882,119882],"mapped",[119]],[[119883,119883],"mapped",[120]],[[119884,119884],"mapped",[121]],[[119885,119885],"mapped",[122]],[[119886,119886],"mapped",[97]],[[119887,119887],"mapped",[98]],[[119888,119888],"mapped",[99]],[[119889,119889],"mapped",[100]],[[119890,119890],"mapped",[101]],[[119891,119891],"mapped",[102]],[[119892,119892],"mapped",[103]],[[119893,119893],"disallowed"],[[119894,119894],"mapped",[105]],[[119895,119895],"mapped",[106]],[[119896,119896],"mapped",[107]],[[119897,119897],"mapped",[108]],[[119898,119898],"mapped",[109]],[[119899,119899],"mapped",[110]],[[119900,119900],"mapped",[111]],[[119901,119901],"mapped",[112]],[[119902,119902],"mapped",[113]],[[119903,119903],"mapped",[114]],[[119904,119904],"mapped",[115]],[[119905,119905],"mapped",[116]],[[119906,119906],"mapped",[117]],[[119907,119907],"mapped",[118]],[[119908,119908],"mapped",[119]],[[119909,119909],"mapped",[120]],[[119910,119910],"mapped",[121]],[[119911,119911],"mapped",[122]],[[119912,119912],"mapped",[97]],[[119913,119913],"mapped",[98]],[[119914,119914],"mapped",[99]],[[119915,119915],"mapped",[100]],[[119916,119916],"mapped",[101]],[[119917,119917],"mapped",[102]],[[119918,119918],"mapped",[103]],[[119919,119919],"mapped",[104]],[[119920,119920],"mapped",[105]],[[119921,119921],"mapped",[106]],[[119922,119922],"mapped",[107]],[[119923,119923],"mapped",[108]],[[119924,119924],"mapped",[109]],[[119925,119925],"mapped",[110]],[[119926,119926],"mapped",[111]],[[119927,119927],"mapped",[112]],[[119928,119928],"mapped",[113]],[[119929,119929],"mapped",[114]],[[119930,119930],"mapped",[115]],[[119931,119931],"mapped",[116]],[[119932,119932],"mapped",[117]],[[119933,119933],"mapped",[118]],[[119934,119934],"mapped",[119]],[[119935,119935],"mapped",[120]],[[119936,119936],"mapped",[121]],[[119937,119937],"mapped",[122]],[[119938,119938],"mapped",[97]],[[119939,119939],"mapped",[98]],[[119940,119940],"mapped",[99]],[[119941,119941],"mapped",[100]],[[119942,119942],"mapped",[101]],[[119943,119943],"mapped",[102]],[[119944,119944],"mapped",[103]],[[119945,119945],"mapped",[104]],[[119946,119946],"mapped",[105]],[[119947,119947],"mapped",[106]],[[119948,119948],"mapped",[107]],[[119949,119949],"mapped",[108]],[[119950,119950],"mapped",[109]],[[119951,119951],"mapped",[110]],[[119952,119952],"mapped",[111]],[[119953,119953],"mapped",[112]],[[119954,119954],"mapped",[113]],[[119955,119955],"mapped",[114]],[[119956,119956],"mapped",[115]],[[119957,119957],"mapped",[116]],[[119958,119958],"mapped",[117]],[[119959,119959],"mapped",[118]],[[119960,119960],"mapped",[119]],[[119961,119961],"mapped",[120]],[[119962,119962],"mapped",[121]],[[119963,119963],"mapped",[122]],[[119964,119964],"mapped",[97]],[[119965,119965],"disallowed"],[[119966,119966],"mapped",[99]],[[119967,119967],"mapped",[100]],[[119968,119969],"disallowed"],[[119970,119970],"mapped",[103]],[[119971,119972],"disallowed"],[[119973,119973],"mapped",[106]],[[119974,119974],"mapped",[107]],[[119975,119976],"disallowed"],[[119977,119977],"mapped",[110]],[[119978,119978],"mapped",[111]],[[119979,119979],"mapped",[112]],[[119980,119980],"mapped",[113]],[[119981,119981],"disallowed"],[[119982,119982],"mapped",[115]],[[119983,119983],"mapped",[116]],[[119984,119984],"mapped",[117]],[[119985,119985],"mapped",[118]],[[119986,119986],"mapped",[119]],[[119987,119987],"mapped",[120]],[[119988,119988],"mapped",[121]],[[119989,119989],"mapped",[122]],[[119990,119990],"mapped",[97]],[[119991,119991],"mapped",[98]],[[119992,119992],"mapped",[99]],[[119993,119993],"mapped",[100]],[[119994,119994],"disallowed"],[[119995,119995],"mapped",[102]],[[119996,119996],"disallowed"],[[119997,119997],"mapped",[104]],[[119998,119998],"mapped",[105]],[[119999,119999],"mapped",[106]],[[120000,120000],"mapped",[107]],[[120001,120001],"mapped",[108]],[[120002,120002],"mapped",[109]],[[120003,120003],"mapped",[110]],[[120004,120004],"disallowed"],[[120005,120005],"mapped",[112]],[[120006,120006],"mapped",[113]],[[120007,120007],"mapped",[114]],[[120008,120008],"mapped",[115]],[[120009,120009],"mapped",[116]],[[120010,120010],"mapped",[117]],[[120011,120011],"mapped",[118]],[[120012,120012],"mapped",[119]],[[120013,120013],"mapped",[120]],[[120014,120014],"mapped",[121]],[[120015,120015],"mapped",[122]],[[120016,120016],"mapped",[97]],[[120017,120017],"mapped",[98]],[[120018,120018],"mapped",[99]],[[120019,120019],"mapped",[100]],[[120020,120020],"mapped",[101]],[[120021,120021],"mapped",[102]],[[120022,120022],"mapped",[103]],[[120023,120023],"mapped",[104]],[[120024,120024],"mapped",[105]],[[120025,120025],"mapped",[106]],[[120026,120026],"mapped",[107]],[[120027,120027],"mapped",[108]],[[120028,120028],"mapped",[109]],[[120029,120029],"mapped",[110]],[[120030,120030],"mapped",[111]],[[120031,120031],"mapped",[112]],[[120032,120032],"mapped",[113]],[[120033,120033],"mapped",[114]],[[120034,120034],"mapped",[115]],[[120035,120035],"mapped",[116]],[[120036,120036],"mapped",[117]],[[120037,120037],"mapped",[118]],[[120038,120038],"mapped",[119]],[[120039,120039],"mapped",[120]],[[120040,120040],"mapped",[121]],[[120041,120041],"mapped",[122]],[[120042,120042],"mapped",[97]],[[120043,120043],"mapped",[98]],[[120044,120044],"mapped",[99]],[[120045,120045],"mapped",[100]],[[120046,120046],"mapped",[101]],[[120047,120047],"mapped",[102]],[[120048,120048],"mapped",[103]],[[120049,120049],"mapped",[104]],[[120050,120050],"mapped",[105]],[[120051,120051],"mapped",[106]],[[120052,120052],"mapped",[107]],[[120053,120053],"mapped",[108]],[[120054,120054],"mapped",[109]],[[120055,120055],"mapped",[110]],[[120056,120056],"mapped",[111]],[[120057,120057],"mapped",[112]],[[120058,120058],"mapped",[113]],[[120059,120059],"mapped",[114]],[[120060,120060],"mapped",[115]],[[120061,120061],"mapped",[116]],[[120062,120062],"mapped",[117]],[[120063,120063],"mapped",[118]],[[120064,120064],"mapped",[119]],[[120065,120065],"mapped",[120]],[[120066,120066],"mapped",[121]],[[120067,120067],"mapped",[122]],[[120068,120068],"mapped",[97]],[[120069,120069],"mapped",[98]],[[120070,120070],"disallowed"],[[120071,120071],"mapped",[100]],[[120072,120072],"mapped",[101]],[[120073,120073],"mapped",[102]],[[120074,120074],"mapped",[103]],[[120075,120076],"disallowed"],[[120077,120077],"mapped",[106]],[[120078,120078],"mapped",[107]],[[120079,120079],"mapped",[108]],[[120080,120080],"mapped",[109]],[[120081,120081],"mapped",[110]],[[120082,120082],"mapped",[111]],[[120083,120083],"mapped",[112]],[[120084,120084],"mapped",[113]],[[120085,120085],"disallowed"],[[120086,120086],"mapped",[115]],[[120087,120087],"mapped",[116]],[[120088,120088],"mapped",[117]],[[120089,120089],"mapped",[118]],[[120090,120090],"mapped",[119]],[[120091,120091],"mapped",[120]],[[120092,120092],"mapped",[121]],[[120093,120093],"disallowed"],[[120094,120094],"mapped",[97]],[[120095,120095],"mapped",[98]],[[120096,120096],"mapped",[99]],[[120097,120097],"mapped",[100]],[[120098,120098],"mapped",[101]],[[120099,120099],"mapped",[102]],[[120100,120100],"mapped",[103]],[[120101,120101],"mapped",[104]],[[120102,120102],"mapped",[105]],[[120103,120103],"mapped",[106]],[[120104,120104],"mapped",[107]],[[120105,120105],"mapped",[108]],[[120106,120106],"mapped",[109]],[[120107,120107],"mapped",[110]],[[120108,120108],"mapped",[111]],[[120109,120109],"mapped",[112]],[[120110,120110],"mapped",[113]],[[120111,120111],"mapped",[114]],[[120112,120112],"mapped",[115]],[[120113,120113],"mapped",[116]],[[120114,120114],"mapped",[117]],[[120115,120115],"mapped",[118]],[[120116,120116],"mapped",[119]],[[120117,120117],"mapped",[120]],[[120118,120118],"mapped",[121]],[[120119,120119],"mapped",[122]],[[120120,120120],"mapped",[97]],[[120121,120121],"mapped",[98]],[[120122,120122],"disallowed"],[[120123,120123],"mapped",[100]],[[120124,120124],"mapped",[101]],[[120125,120125],"mapped",[102]],[[120126,120126],"mapped",[103]],[[120127,120127],"disallowed"],[[120128,120128],"mapped",[105]],[[120129,120129],"mapped",[106]],[[120130,120130],"mapped",[107]],[[120131,120131],"mapped",[108]],[[120132,120132],"mapped",[109]],[[120133,120133],"disallowed"],[[120134,120134],"mapped",[111]],[[120135,120137],"disallowed"],[[120138,120138],"mapped",[115]],[[120139,120139],"mapped",[116]],[[120140,120140],"mapped",[117]],[[120141,120141],"mapped",[118]],[[120142,120142],"mapped",[119]],[[120143,120143],"mapped",[120]],[[120144,120144],"mapped",[121]],[[120145,120145],"disallowed"],[[120146,120146],"mapped",[97]],[[120147,120147],"mapped",[98]],[[120148,120148],"mapped",[99]],[[120149,120149],"mapped",[100]],[[120150,120150],"mapped",[101]],[[120151,120151],"mapped",[102]],[[120152,120152],"mapped",[103]],[[120153,120153],"mapped",[104]],[[120154,120154],"mapped",[105]],[[120155,120155],"mapped",[106]],[[120156,120156],"mapped",[107]],[[120157,120157],"mapped",[108]],[[120158,120158],"mapped",[109]],[[120159,120159],"mapped",[110]],[[120160,120160],"mapped",[111]],[[120161,120161],"mapped",[112]],[[120162,120162],"mapped",[113]],[[120163,120163],"mapped",[114]],[[120164,120164],"mapped",[115]],[[120165,120165],"mapped",[116]],[[120166,120166],"mapped",[117]],[[120167,120167],"mapped",[118]],[[120168,120168],"mapped",[119]],[[120169,120169],"mapped",[120]],[[120170,120170],"mapped",[121]],[[120171,120171],"mapped",[122]],[[120172,120172],"mapped",[97]],[[120173,120173],"mapped",[98]],[[120174,120174],"mapped",[99]],[[120175,120175],"mapped",[100]],[[120176,120176],"mapped",[101]],[[120177,120177],"mapped",[102]],[[120178,120178],"mapped",[103]],[[120179,120179],"mapped",[104]],[[120180,120180],"mapped",[105]],[[120181,120181],"mapped",[106]],[[120182,120182],"mapped",[107]],[[120183,120183],"mapped",[108]],[[120184,120184],"mapped",[109]],[[120185,120185],"mapped",[110]],[[120186,120186],"mapped",[111]],[[120187,120187],"mapped",[112]],[[120188,120188],"mapped",[113]],[[120189,120189],"mapped",[114]],[[120190,120190],"mapped",[115]],[[120191,120191],"mapped",[116]],[[120192,120192],"mapped",[117]],[[120193,120193],"mapped",[118]],[[120194,120194],"mapped",[119]],[[120195,120195],"mapped",[120]],[[120196,120196],"mapped",[121]],[[120197,120197],"mapped",[122]],[[120198,120198],"mapped",[97]],[[120199,120199],"mapped",[98]],[[120200,120200],"mapped",[99]],[[120201,120201],"mapped",[100]],[[120202,120202],"mapped",[101]],[[120203,120203],"mapped",[102]],[[120204,120204],"mapped",[103]],[[120205,120205],"mapped",[104]],[[120206,120206],"mapped",[105]],[[120207,120207],"mapped",[106]],[[120208,120208],"mapped",[107]],[[120209,120209],"mapped",[108]],[[120210,120210],"mapped",[109]],[[120211,120211],"mapped",[110]],[[120212,120212],"mapped",[111]],[[120213,120213],"mapped",[112]],[[120214,120214],"mapped",[113]],[[120215,120215],"mapped",[114]],[[120216,120216],"mapped",[115]],[[120217,120217],"mapped",[116]],[[120218,120218],"mapped",[117]],[[120219,120219],"mapped",[118]],[[120220,120220],"mapped",[119]],[[120221,120221],"mapped",[120]],[[120222,120222],"mapped",[121]],[[120223,120223],"mapped",[122]],[[120224,120224],"mapped",[97]],[[120225,120225],"mapped",[98]],[[120226,120226],"mapped",[99]],[[120227,120227],"mapped",[100]],[[120228,120228],"mapped",[101]],[[120229,120229],"mapped",[102]],[[120230,120230],"mapped",[103]],[[120231,120231],"mapped",[104]],[[120232,120232],"mapped",[105]],[[120233,120233],"mapped",[106]],[[120234,120234],"mapped",[107]],[[120235,120235],"mapped",[108]],[[120236,120236],"mapped",[109]],[[120237,120237],"mapped",[110]],[[120238,120238],"mapped",[111]],[[120239,120239],"mapped",[112]],[[120240,120240],"mapped",[113]],[[120241,120241],"mapped",[114]],[[120242,120242],"mapped",[115]],[[120243,120243],"mapped",[116]],[[120244,120244],"mapped",[117]],[[120245,120245],"mapped",[118]],[[120246,120246],"mapped",[119]],[[120247,120247],"mapped",[120]],[[120248,120248],"mapped",[121]],[[120249,120249],"mapped",[122]],[[120250,120250],"mapped",[97]],[[120251,120251],"mapped",[98]],[[120252,120252],"mapped",[99]],[[120253,120253],"mapped",[100]],[[120254,120254],"mapped",[101]],[[120255,120255],"mapped",[102]],[[120256,120256],"mapped",[103]],[[120257,120257],"mapped",[104]],[[120258,120258],"mapped",[105]],[[120259,120259],"mapped",[106]],[[120260,120260],"mapped",[107]],[[120261,120261],"mapped",[108]],[[120262,120262],"mapped",[109]],[[120263,120263],"mapped",[110]],[[120264,120264],"mapped",[111]],[[120265,120265],"mapped",[112]],[[120266,120266],"mapped",[113]],[[120267,120267],"mapped",[114]],[[120268,120268],"mapped",[115]],[[120269,120269],"mapped",[116]],[[120270,120270],"mapped",[117]],[[120271,120271],"mapped",[118]],[[120272,120272],"mapped",[119]],[[120273,120273],"mapped",[120]],[[120274,120274],"mapped",[121]],[[120275,120275],"mapped",[122]],[[120276,120276],"mapped",[97]],[[120277,120277],"mapped",[98]],[[120278,120278],"mapped",[99]],[[120279,120279],"mapped",[100]],[[120280,120280],"mapped",[101]],[[120281,120281],"mapped",[102]],[[120282,120282],"mapped",[103]],[[120283,120283],"mapped",[104]],[[120284,120284],"mapped",[105]],[[120285,120285],"mapped",[106]],[[120286,120286],"mapped",[107]],[[120287,120287],"mapped",[108]],[[120288,120288],"mapped",[109]],[[120289,120289],"mapped",[110]],[[120290,120290],"mapped",[111]],[[120291,120291],"mapped",[112]],[[120292,120292],"mapped",[113]],[[120293,120293],"mapped",[114]],[[120294,120294],"mapped",[115]],[[120295,120295],"mapped",[116]],[[120296,120296],"mapped",[117]],[[120297,120297],"mapped",[118]],[[120298,120298],"mapped",[119]],[[120299,120299],"mapped",[120]],[[120300,120300],"mapped",[121]],[[120301,120301],"mapped",[122]],[[120302,120302],"mapped",[97]],[[120303,120303],"mapped",[98]],[[120304,120304],"mapped",[99]],[[120305,120305],"mapped",[100]],[[120306,120306],"mapped",[101]],[[120307,120307],"mapped",[102]],[[120308,120308],"mapped",[103]],[[120309,120309],"mapped",[104]],[[120310,120310],"mapped",[105]],[[120311,120311],"mapped",[106]],[[120312,120312],"mapped",[107]],[[120313,120313],"mapped",[108]],[[120314,120314],"mapped",[109]],[[120315,120315],"mapped",[110]],[[120316,120316],"mapped",[111]],[[120317,120317],"mapped",[112]],[[120318,120318],"mapped",[113]],[[120319,120319],"mapped",[114]],[[120320,120320],"mapped",[115]],[[120321,120321],"mapped",[116]],[[120322,120322],"mapped",[117]],[[120323,120323],"mapped",[118]],[[120324,120324],"mapped",[119]],[[120325,120325],"mapped",[120]],[[120326,120326],"mapped",[121]],[[120327,120327],"mapped",[122]],[[120328,120328],"mapped",[97]],[[120329,120329],"mapped",[98]],[[120330,120330],"mapped",[99]],[[120331,120331],"mapped",[100]],[[120332,120332],"mapped",[101]],[[120333,120333],"mapped",[102]],[[120334,120334],"mapped",[103]],[[120335,120335],"mapped",[104]],[[120336,120336],"mapped",[105]],[[120337,120337],"mapped",[106]],[[120338,120338],"mapped",[107]],[[120339,120339],"mapped",[108]],[[120340,120340],"mapped",[109]],[[120341,120341],"mapped",[110]],[[120342,120342],"mapped",[111]],[[120343,120343],"mapped",[112]],[[120344,120344],"mapped",[113]],[[120345,120345],"mapped",[114]],[[120346,120346],"mapped",[115]],[[120347,120347],"mapped",[116]],[[120348,120348],"mapped",[117]],[[120349,120349],"mapped",[118]],[[120350,120350],"mapped",[119]],[[120351,120351],"mapped",[120]],[[120352,120352],"mapped",[121]],[[120353,120353],"mapped",[122]],[[120354,120354],"mapped",[97]],[[120355,120355],"mapped",[98]],[[120356,120356],"mapped",[99]],[[120357,120357],"mapped",[100]],[[120358,120358],"mapped",[101]],[[120359,120359],"mapped",[102]],[[120360,120360],"mapped",[103]],[[120361,120361],"mapped",[104]],[[120362,120362],"mapped",[105]],[[120363,120363],"mapped",[106]],[[120364,120364],"mapped",[107]],[[120365,120365],"mapped",[108]],[[120366,120366],"mapped",[109]],[[120367,120367],"mapped",[110]],[[120368,120368],"mapped",[111]],[[120369,120369],"mapped",[112]],[[120370,120370],"mapped",[113]],[[120371,120371],"mapped",[114]],[[120372,120372],"mapped",[115]],[[120373,120373],"mapped",[116]],[[120374,120374],"mapped",[117]],[[120375,120375],"mapped",[118]],[[120376,120376],"mapped",[119]],[[120377,120377],"mapped",[120]],[[120378,120378],"mapped",[121]],[[120379,120379],"mapped",[122]],[[120380,120380],"mapped",[97]],[[120381,120381],"mapped",[98]],[[120382,120382],"mapped",[99]],[[120383,120383],"mapped",[100]],[[120384,120384],"mapped",[101]],[[120385,120385],"mapped",[102]],[[120386,120386],"mapped",[103]],[[120387,120387],"mapped",[104]],[[120388,120388],"mapped",[105]],[[120389,120389],"mapped",[106]],[[120390,120390],"mapped",[107]],[[120391,120391],"mapped",[108]],[[120392,120392],"mapped",[109]],[[120393,120393],"mapped",[110]],[[120394,120394],"mapped",[111]],[[120395,120395],"mapped",[112]],[[120396,120396],"mapped",[113]],[[120397,120397],"mapped",[114]],[[120398,120398],"mapped",[115]],[[120399,120399],"mapped",[116]],[[120400,120400],"mapped",[117]],[[120401,120401],"mapped",[118]],[[120402,120402],"mapped",[119]],[[120403,120403],"mapped",[120]],[[120404,120404],"mapped",[121]],[[120405,120405],"mapped",[122]],[[120406,120406],"mapped",[97]],[[120407,120407],"mapped",[98]],[[120408,120408],"mapped",[99]],[[120409,120409],"mapped",[100]],[[120410,120410],"mapped",[101]],[[120411,120411],"mapped",[102]],[[120412,120412],"mapped",[103]],[[120413,120413],"mapped",[104]],[[120414,120414],"mapped",[105]],[[120415,120415],"mapped",[106]],[[120416,120416],"mapped",[107]],[[120417,120417],"mapped",[108]],[[120418,120418],"mapped",[109]],[[120419,120419],"mapped",[110]],[[120420,120420],"mapped",[111]],[[120421,120421],"mapped",[112]],[[120422,120422],"mapped",[113]],[[120423,120423],"mapped",[114]],[[120424,120424],"mapped",[115]],[[120425,120425],"mapped",[116]],[[120426,120426],"mapped",[117]],[[120427,120427],"mapped",[118]],[[120428,120428],"mapped",[119]],[[120429,120429],"mapped",[120]],[[120430,120430],"mapped",[121]],[[120431,120431],"mapped",[122]],[[120432,120432],"mapped",[97]],[[120433,120433],"mapped",[98]],[[120434,120434],"mapped",[99]],[[120435,120435],"mapped",[100]],[[120436,120436],"mapped",[101]],[[120437,120437],"mapped",[102]],[[120438,120438],"mapped",[103]],[[120439,120439],"mapped",[104]],[[120440,120440],"mapped",[105]],[[120441,120441],"mapped",[106]],[[120442,120442],"mapped",[107]],[[120443,120443],"mapped",[108]],[[120444,120444],"mapped",[109]],[[120445,120445],"mapped",[110]],[[120446,120446],"mapped",[111]],[[120447,120447],"mapped",[112]],[[120448,120448],"mapped",[113]],[[120449,120449],"mapped",[114]],[[120450,120450],"mapped",[115]],[[120451,120451],"mapped",[116]],[[120452,120452],"mapped",[117]],[[120453,120453],"mapped",[118]],[[120454,120454],"mapped",[119]],[[120455,120455],"mapped",[120]],[[120456,120456],"mapped",[121]],[[120457,120457],"mapped",[122]],[[120458,120458],"mapped",[97]],[[120459,120459],"mapped",[98]],[[120460,120460],"mapped",[99]],[[120461,120461],"mapped",[100]],[[120462,120462],"mapped",[101]],[[120463,120463],"mapped",[102]],[[120464,120464],"mapped",[103]],[[120465,120465],"mapped",[104]],[[120466,120466],"mapped",[105]],[[120467,120467],"mapped",[106]],[[120468,120468],"mapped",[107]],[[120469,120469],"mapped",[108]],[[120470,120470],"mapped",[109]],[[120471,120471],"mapped",[110]],[[120472,120472],"mapped",[111]],[[120473,120473],"mapped",[112]],[[120474,120474],"mapped",[113]],[[120475,120475],"mapped",[114]],[[120476,120476],"mapped",[115]],[[120477,120477],"mapped",[116]],[[120478,120478],"mapped",[117]],[[120479,120479],"mapped",[118]],[[120480,120480],"mapped",[119]],[[120481,120481],"mapped",[120]],[[120482,120482],"mapped",[121]],[[120483,120483],"mapped",[122]],[[120484,120484],"mapped",[305]],[[120485,120485],"mapped",[567]],[[120486,120487],"disallowed"],[[120488,120488],"mapped",[945]],[[120489,120489],"mapped",[946]],[[120490,120490],"mapped",[947]],[[120491,120491],"mapped",[948]],[[120492,120492],"mapped",[949]],[[120493,120493],"mapped",[950]],[[120494,120494],"mapped",[951]],[[120495,120495],"mapped",[952]],[[120496,120496],"mapped",[953]],[[120497,120497],"mapped",[954]],[[120498,120498],"mapped",[955]],[[120499,120499],"mapped",[956]],[[120500,120500],"mapped",[957]],[[120501,120501],"mapped",[958]],[[120502,120502],"mapped",[959]],[[120503,120503],"mapped",[960]],[[120504,120504],"mapped",[961]],[[120505,120505],"mapped",[952]],[[120506,120506],"mapped",[963]],[[120507,120507],"mapped",[964]],[[120508,120508],"mapped",[965]],[[120509,120509],"mapped",[966]],[[120510,120510],"mapped",[967]],[[120511,120511],"mapped",[968]],[[120512,120512],"mapped",[969]],[[120513,120513],"mapped",[8711]],[[120514,120514],"mapped",[945]],[[120515,120515],"mapped",[946]],[[120516,120516],"mapped",[947]],[[120517,120517],"mapped",[948]],[[120518,120518],"mapped",[949]],[[120519,120519],"mapped",[950]],[[120520,120520],"mapped",[951]],[[120521,120521],"mapped",[952]],[[120522,120522],"mapped",[953]],[[120523,120523],"mapped",[954]],[[120524,120524],"mapped",[955]],[[120525,120525],"mapped",[956]],[[120526,120526],"mapped",[957]],[[120527,120527],"mapped",[958]],[[120528,120528],"mapped",[959]],[[120529,120529],"mapped",[960]],[[120530,120530],"mapped",[961]],[[120531,120532],"mapped",[963]],[[120533,120533],"mapped",[964]],[[120534,120534],"mapped",[965]],[[120535,120535],"mapped",[966]],[[120536,120536],"mapped",[967]],[[120537,120537],"mapped",[968]],[[120538,120538],"mapped",[969]],[[120539,120539],"mapped",[8706]],[[120540,120540],"mapped",[949]],[[120541,120541],"mapped",[952]],[[120542,120542],"mapped",[954]],[[120543,120543],"mapped",[966]],[[120544,120544],"mapped",[961]],[[120545,120545],"mapped",[960]],[[120546,120546],"mapped",[945]],[[120547,120547],"mapped",[946]],[[120548,120548],"mapped",[947]],[[120549,120549],"mapped",[948]],[[120550,120550],"mapped",[949]],[[120551,120551],"mapped",[950]],[[120552,120552],"mapped",[951]],[[120553,120553],"mapped",[952]],[[120554,120554],"mapped",[953]],[[120555,120555],"mapped",[954]],[[120556,120556],"mapped",[955]],[[120557,120557],"mapped",[956]],[[120558,120558],"mapped",[957]],[[120559,120559],"mapped",[958]],[[120560,120560],"mapped",[959]],[[120561,120561],"mapped",[960]],[[120562,120562],"mapped",[961]],[[120563,120563],"mapped",[952]],[[120564,120564],"mapped",[963]],[[120565,120565],"mapped",[964]],[[120566,120566],"mapped",[965]],[[120567,120567],"mapped",[966]],[[120568,120568],"mapped",[967]],[[120569,120569],"mapped",[968]],[[120570,120570],"mapped",[969]],[[120571,120571],"mapped",[8711]],[[120572,120572],"mapped",[945]],[[120573,120573],"mapped",[946]],[[120574,120574],"mapped",[947]],[[120575,120575],"mapped",[948]],[[120576,120576],"mapped",[949]],[[120577,120577],"mapped",[950]],[[120578,120578],"mapped",[951]],[[120579,120579],"mapped",[952]],[[120580,120580],"mapped",[953]],[[120581,120581],"mapped",[954]],[[120582,120582],"mapped",[955]],[[120583,120583],"mapped",[956]],[[120584,120584],"mapped",[957]],[[120585,120585],"mapped",[958]],[[120586,120586],"mapped",[959]],[[120587,120587],"mapped",[960]],[[120588,120588],"mapped",[961]],[[120589,120590],"mapped",[963]],[[120591,120591],"mapped",[964]],[[120592,120592],"mapped",[965]],[[120593,120593],"mapped",[966]],[[120594,120594],"mapped",[967]],[[120595,120595],"mapped",[968]],[[120596,120596],"mapped",[969]],[[120597,120597],"mapped",[8706]],[[120598,120598],"mapped",[949]],[[120599,120599],"mapped",[952]],[[120600,120600],"mapped",[954]],[[120601,120601],"mapped",[966]],[[120602,120602],"mapped",[961]],[[120603,120603],"mapped",[960]],[[120604,120604],"mapped",[945]],[[120605,120605],"mapped",[946]],[[120606,120606],"mapped",[947]],[[120607,120607],"mapped",[948]],[[120608,120608],"mapped",[949]],[[120609,120609],"mapped",[950]],[[120610,120610],"mapped",[951]],[[120611,120611],"mapped",[952]],[[120612,120612],"mapped",[953]],[[120613,120613],"mapped",[954]],[[120614,120614],"mapped",[955]],[[120615,120615],"mapped",[956]],[[120616,120616],"mapped",[957]],[[120617,120617],"mapped",[958]],[[120618,120618],"mapped",[959]],[[120619,120619],"mapped",[960]],[[120620,120620],"mapped",[961]],[[120621,120621],"mapped",[952]],[[120622,120622],"mapped",[963]],[[120623,120623],"mapped",[964]],[[120624,120624],"mapped",[965]],[[120625,120625],"mapped",[966]],[[120626,120626],"mapped",[967]],[[120627,120627],"mapped",[968]],[[120628,120628],"mapped",[969]],[[120629,120629],"mapped",[8711]],[[120630,120630],"mapped",[945]],[[120631,120631],"mapped",[946]],[[120632,120632],"mapped",[947]],[[120633,120633],"mapped",[948]],[[120634,120634],"mapped",[949]],[[120635,120635],"mapped",[950]],[[120636,120636],"mapped",[951]],[[120637,120637],"mapped",[952]],[[120638,120638],"mapped",[953]],[[120639,120639],"mapped",[954]],[[120640,120640],"mapped",[955]],[[120641,120641],"mapped",[956]],[[120642,120642],"mapped",[957]],[[120643,120643],"mapped",[958]],[[120644,120644],"mapped",[959]],[[120645,120645],"mapped",[960]],[[120646,120646],"mapped",[961]],[[120647,120648],"mapped",[963]],[[120649,120649],"mapped",[964]],[[120650,120650],"mapped",[965]],[[120651,120651],"mapped",[966]],[[120652,120652],"mapped",[967]],[[120653,120653],"mapped",[968]],[[120654,120654],"mapped",[969]],[[120655,120655],"mapped",[8706]],[[120656,120656],"mapped",[949]],[[120657,120657],"mapped",[952]],[[120658,120658],"mapped",[954]],[[120659,120659],"mapped",[966]],[[120660,120660],"mapped",[961]],[[120661,120661],"mapped",[960]],[[120662,120662],"mapped",[945]],[[120663,120663],"mapped",[946]],[[120664,120664],"mapped",[947]],[[120665,120665],"mapped",[948]],[[120666,120666],"mapped",[949]],[[120667,120667],"mapped",[950]],[[120668,120668],"mapped",[951]],[[120669,120669],"mapped",[952]],[[120670,120670],"mapped",[953]],[[120671,120671],"mapped",[954]],[[120672,120672],"mapped",[955]],[[120673,120673],"mapped",[956]],[[120674,120674],"mapped",[957]],[[120675,120675],"mapped",[958]],[[120676,120676],"mapped",[959]],[[120677,120677],"mapped",[960]],[[120678,120678],"mapped",[961]],[[120679,120679],"mapped",[952]],[[120680,120680],"mapped",[963]],[[120681,120681],"mapped",[964]],[[120682,120682],"mapped",[965]],[[120683,120683],"mapped",[966]],[[120684,120684],"mapped",[967]],[[120685,120685],"mapped",[968]],[[120686,120686],"mapped",[969]],[[120687,120687],"mapped",[8711]],[[120688,120688],"mapped",[945]],[[120689,120689],"mapped",[946]],[[120690,120690],"mapped",[947]],[[120691,120691],"mapped",[948]],[[120692,120692],"mapped",[949]],[[120693,120693],"mapped",[950]],[[120694,120694],"mapped",[951]],[[120695,120695],"mapped",[952]],[[120696,120696],"mapped",[953]],[[120697,120697],"mapped",[954]],[[120698,120698],"mapped",[955]],[[120699,120699],"mapped",[956]],[[120700,120700],"mapped",[957]],[[120701,120701],"mapped",[958]],[[120702,120702],"mapped",[959]],[[120703,120703],"mapped",[960]],[[120704,120704],"mapped",[961]],[[120705,120706],"mapped",[963]],[[120707,120707],"mapped",[964]],[[120708,120708],"mapped",[965]],[[120709,120709],"mapped",[966]],[[120710,120710],"mapped",[967]],[[120711,120711],"mapped",[968]],[[120712,120712],"mapped",[969]],[[120713,120713],"mapped",[8706]],[[120714,120714],"mapped",[949]],[[120715,120715],"mapped",[952]],[[120716,120716],"mapped",[954]],[[120717,120717],"mapped",[966]],[[120718,120718],"mapped",[961]],[[120719,120719],"mapped",[960]],[[120720,120720],"mapped",[945]],[[120721,120721],"mapped",[946]],[[120722,120722],"mapped",[947]],[[120723,120723],"mapped",[948]],[[120724,120724],"mapped",[949]],[[120725,120725],"mapped",[950]],[[120726,120726],"mapped",[951]],[[120727,120727],"mapped",[952]],[[120728,120728],"mapped",[953]],[[120729,120729],"mapped",[954]],[[120730,120730],"mapped",[955]],[[120731,120731],"mapped",[956]],[[120732,120732],"mapped",[957]],[[120733,120733],"mapped",[958]],[[120734,120734],"mapped",[959]],[[120735,120735],"mapped",[960]],[[120736,120736],"mapped",[961]],[[120737,120737],"mapped",[952]],[[120738,120738],"mapped",[963]],[[120739,120739],"mapped",[964]],[[120740,120740],"mapped",[965]],[[120741,120741],"mapped",[966]],[[120742,120742],"mapped",[967]],[[120743,120743],"mapped",[968]],[[120744,120744],"mapped",[969]],[[120745,120745],"mapped",[8711]],[[120746,120746],"mapped",[945]],[[120747,120747],"mapped",[946]],[[120748,120748],"mapped",[947]],[[120749,120749],"mapped",[948]],[[120750,120750],"mapped",[949]],[[120751,120751],"mapped",[950]],[[120752,120752],"mapped",[951]],[[120753,120753],"mapped",[952]],[[120754,120754],"mapped",[953]],[[120755,120755],"mapped",[954]],[[120756,120756],"mapped",[955]],[[120757,120757],"mapped",[956]],[[120758,120758],"mapped",[957]],[[120759,120759],"mapped",[958]],[[120760,120760],"mapped",[959]],[[120761,120761],"mapped",[960]],[[120762,120762],"mapped",[961]],[[120763,120764],"mapped",[963]],[[120765,120765],"mapped",[964]],[[120766,120766],"mapped",[965]],[[120767,120767],"mapped",[966]],[[120768,120768],"mapped",[967]],[[120769,120769],"mapped",[968]],[[120770,120770],"mapped",[969]],[[120771,120771],"mapped",[8706]],[[120772,120772],"mapped",[949]],[[120773,120773],"mapped",[952]],[[120774,120774],"mapped",[954]],[[120775,120775],"mapped",[966]],[[120776,120776],"mapped",[961]],[[120777,120777],"mapped",[960]],[[120778,120779],"mapped",[989]],[[120780,120781],"disallowed"],[[120782,120782],"mapped",[48]],[[120783,120783],"mapped",[49]],[[120784,120784],"mapped",[50]],[[120785,120785],"mapped",[51]],[[120786,120786],"mapped",[52]],[[120787,120787],"mapped",[53]],[[120788,120788],"mapped",[54]],[[120789,120789],"mapped",[55]],[[120790,120790],"mapped",[56]],[[120791,120791],"mapped",[57]],[[120792,120792],"mapped",[48]],[[120793,120793],"mapped",[49]],[[120794,120794],"mapped",[50]],[[120795,120795],"mapped",[51]],[[120796,120796],"mapped",[52]],[[120797,120797],"mapped",[53]],[[120798,120798],"mapped",[54]],[[120799,120799],"mapped",[55]],[[120800,120800],"mapped",[56]],[[120801,120801],"mapped",[57]],[[120802,120802],"mapped",[48]],[[120803,120803],"mapped",[49]],[[120804,120804],"mapped",[50]],[[120805,120805],"mapped",[51]],[[120806,120806],"mapped",[52]],[[120807,120807],"mapped",[53]],[[120808,120808],"mapped",[54]],[[120809,120809],"mapped",[55]],[[120810,120810],"mapped",[56]],[[120811,120811],"mapped",[57]],[[120812,120812],"mapped",[48]],[[120813,120813],"mapped",[49]],[[120814,120814],"mapped",[50]],[[120815,120815],"mapped",[51]],[[120816,120816],"mapped",[52]],[[120817,120817],"mapped",[53]],[[120818,120818],"mapped",[54]],[[120819,120819],"mapped",[55]],[[120820,120820],"mapped",[56]],[[120821,120821],"mapped",[57]],[[120822,120822],"mapped",[48]],[[120823,120823],"mapped",[49]],[[120824,120824],"mapped",[50]],[[120825,120825],"mapped",[51]],[[120826,120826],"mapped",[52]],[[120827,120827],"mapped",[53]],[[120828,120828],"mapped",[54]],[[120829,120829],"mapped",[55]],[[120830,120830],"mapped",[56]],[[120831,120831],"mapped",[57]],[[120832,121343],"valid",[],"NV8"],[[121344,121398],"valid"],[[121399,121402],"valid",[],"NV8"],[[121403,121452],"valid"],[[121453,121460],"valid",[],"NV8"],[[121461,121461],"valid"],[[121462,121475],"valid",[],"NV8"],[[121476,121476],"valid"],[[121477,121483],"valid",[],"NV8"],[[121484,121498],"disallowed"],[[121499,121503],"valid"],[[121504,121504],"disallowed"],[[121505,121519],"valid"],[[121520,124927],"disallowed"],[[124928,125124],"valid"],[[125125,125126],"disallowed"],[[125127,125135],"valid",[],"NV8"],[[125136,125142],"valid"],[[125143,126463],"disallowed"],[[126464,126464],"mapped",[1575]],[[126465,126465],"mapped",[1576]],[[126466,126466],"mapped",[1580]],[[126467,126467],"mapped",[1583]],[[126468,126468],"disallowed"],[[126469,126469],"mapped",[1608]],[[126470,126470],"mapped",[1586]],[[126471,126471],"mapped",[1581]],[[126472,126472],"mapped",[1591]],[[126473,126473],"mapped",[1610]],[[126474,126474],"mapped",[1603]],[[126475,126475],"mapped",[1604]],[[126476,126476],"mapped",[1605]],[[126477,126477],"mapped",[1606]],[[126478,126478],"mapped",[1587]],[[126479,126479],"mapped",[1593]],[[126480,126480],"mapped",[1601]],[[126481,126481],"mapped",[1589]],[[126482,126482],"mapped",[1602]],[[126483,126483],"mapped",[1585]],[[126484,126484],"mapped",[1588]],[[126485,126485],"mapped",[1578]],[[126486,126486],"mapped",[1579]],[[126487,126487],"mapped",[1582]],[[126488,126488],"mapped",[1584]],[[126489,126489],"mapped",[1590]],[[126490,126490],"mapped",[1592]],[[126491,126491],"mapped",[1594]],[[126492,126492],"mapped",[1646]],[[126493,126493],"mapped",[1722]],[[126494,126494],"mapped",[1697]],[[126495,126495],"mapped",[1647]],[[126496,126496],"disallowed"],[[126497,126497],"mapped",[1576]],[[126498,126498],"mapped",[1580]],[[126499,126499],"disallowed"],[[126500,126500],"mapped",[1607]],[[126501,126502],"disallowed"],[[126503,126503],"mapped",[1581]],[[126504,126504],"disallowed"],[[126505,126505],"mapped",[1610]],[[126506,126506],"mapped",[1603]],[[126507,126507],"mapped",[1604]],[[126508,126508],"mapped",[1605]],[[126509,126509],"mapped",[1606]],[[126510,126510],"mapped",[1587]],[[126511,126511],"mapped",[1593]],[[126512,126512],"mapped",[1601]],[[126513,126513],"mapped",[1589]],[[126514,126514],"mapped",[1602]],[[126515,126515],"disallowed"],[[126516,126516],"mapped",[1588]],[[126517,126517],"mapped",[1578]],[[126518,126518],"mapped",[1579]],[[126519,126519],"mapped",[1582]],[[126520,126520],"disallowed"],[[126521,126521],"mapped",[1590]],[[126522,126522],"disallowed"],[[126523,126523],"mapped",[1594]],[[126524,126529],"disallowed"],[[126530,126530],"mapped",[1580]],[[126531,126534],"disallowed"],[[126535,126535],"mapped",[1581]],[[126536,126536],"disallowed"],[[126537,126537],"mapped",[1610]],[[126538,126538],"disallowed"],[[126539,126539],"mapped",[1604]],[[126540,126540],"disallowed"],[[126541,126541],"mapped",[1606]],[[126542,126542],"mapped",[1587]],[[126543,126543],"mapped",[1593]],[[126544,126544],"disallowed"],[[126545,126545],"mapped",[1589]],[[126546,126546],"mapped",[1602]],[[126547,126547],"disallowed"],[[126548,126548],"mapped",[1588]],[[126549,126550],"disallowed"],[[126551,126551],"mapped",[1582]],[[126552,126552],"disallowed"],[[126553,126553],"mapped",[1590]],[[126554,126554],"disallowed"],[[126555,126555],"mapped",[1594]],[[126556,126556],"disallowed"],[[126557,126557],"mapped",[1722]],[[126558,126558],"disallowed"],[[126559,126559],"mapped",[1647]],[[126560,126560],"disallowed"],[[126561,126561],"mapped",[1576]],[[126562,126562],"mapped",[1580]],[[126563,126563],"disallowed"],[[126564,126564],"mapped",[1607]],[[126565,126566],"disallowed"],[[126567,126567],"mapped",[1581]],[[126568,126568],"mapped",[1591]],[[126569,126569],"mapped",[1610]],[[126570,126570],"mapped",[1603]],[[126571,126571],"disallowed"],[[126572,126572],"mapped",[1605]],[[126573,126573],"mapped",[1606]],[[126574,126574],"mapped",[1587]],[[126575,126575],"mapped",[1593]],[[126576,126576],"mapped",[1601]],[[126577,126577],"mapped",[1589]],[[126578,126578],"mapped",[1602]],[[126579,126579],"disallowed"],[[126580,126580],"mapped",[1588]],[[126581,126581],"mapped",[1578]],[[126582,126582],"mapped",[1579]],[[126583,126583],"mapped",[1582]],[[126584,126584],"disallowed"],[[126585,126585],"mapped",[1590]],[[126586,126586],"mapped",[1592]],[[126587,126587],"mapped",[1594]],[[126588,126588],"mapped",[1646]],[[126589,126589],"disallowed"],[[126590,126590],"mapped",[1697]],[[126591,126591],"disallowed"],[[126592,126592],"mapped",[1575]],[[126593,126593],"mapped",[1576]],[[126594,126594],"mapped",[1580]],[[126595,126595],"mapped",[1583]],[[126596,126596],"mapped",[1607]],[[126597,126597],"mapped",[1608]],[[126598,126598],"mapped",[1586]],[[126599,126599],"mapped",[1581]],[[126600,126600],"mapped",[1591]],[[126601,126601],"mapped",[1610]],[[126602,126602],"disallowed"],[[126603,126603],"mapped",[1604]],[[126604,126604],"mapped",[1605]],[[126605,126605],"mapped",[1606]],[[126606,126606],"mapped",[1587]],[[126607,126607],"mapped",[1593]],[[126608,126608],"mapped",[1601]],[[126609,126609],"mapped",[1589]],[[126610,126610],"mapped",[1602]],[[126611,126611],"mapped",[1585]],[[126612,126612],"mapped",[1588]],[[126613,126613],"mapped",[1578]],[[126614,126614],"mapped",[1579]],[[126615,126615],"mapped",[1582]],[[126616,126616],"mapped",[1584]],[[126617,126617],"mapped",[1590]],[[126618,126618],"mapped",[1592]],[[126619,126619],"mapped",[1594]],[[126620,126624],"disallowed"],[[126625,126625],"mapped",[1576]],[[126626,126626],"mapped",[1580]],[[126627,126627],"mapped",[1583]],[[126628,126628],"disallowed"],[[126629,126629],"mapped",[1608]],[[126630,126630],"mapped",[1586]],[[126631,126631],"mapped",[1581]],[[126632,126632],"mapped",[1591]],[[126633,126633],"mapped",[1610]],[[126634,126634],"disallowed"],[[126635,126635],"mapped",[1604]],[[126636,126636],"mapped",[1605]],[[126637,126637],"mapped",[1606]],[[126638,126638],"mapped",[1587]],[[126639,126639],"mapped",[1593]],[[126640,126640],"mapped",[1601]],[[126641,126641],"mapped",[1589]],[[126642,126642],"mapped",[1602]],[[126643,126643],"mapped",[1585]],[[126644,126644],"mapped",[1588]],[[126645,126645],"mapped",[1578]],[[126646,126646],"mapped",[1579]],[[126647,126647],"mapped",[1582]],[[126648,126648],"mapped",[1584]],[[126649,126649],"mapped",[1590]],[[126650,126650],"mapped",[1592]],[[126651,126651],"mapped",[1594]],[[126652,126703],"disallowed"],[[126704,126705],"valid",[],"NV8"],[[126706,126975],"disallowed"],[[126976,127019],"valid",[],"NV8"],[[127020,127023],"disallowed"],[[127024,127123],"valid",[],"NV8"],[[127124,127135],"disallowed"],[[127136,127150],"valid",[],"NV8"],[[127151,127152],"disallowed"],[[127153,127166],"valid",[],"NV8"],[[127167,127167],"valid",[],"NV8"],[[127168,127168],"disallowed"],[[127169,127183],"valid",[],"NV8"],[[127184,127184],"disallowed"],[[127185,127199],"valid",[],"NV8"],[[127200,127221],"valid",[],"NV8"],[[127222,127231],"disallowed"],[[127232,127232],"disallowed"],[[127233,127233],"disallowed_STD3_mapped",[48,44]],[[127234,127234],"disallowed_STD3_mapped",[49,44]],[[127235,127235],"disallowed_STD3_mapped",[50,44]],[[127236,127236],"disallowed_STD3_mapped",[51,44]],[[127237,127237],"disallowed_STD3_mapped",[52,44]],[[127238,127238],"disallowed_STD3_mapped",[53,44]],[[127239,127239],"disallowed_STD3_mapped",[54,44]],[[127240,127240],"disallowed_STD3_mapped",[55,44]],[[127241,127241],"disallowed_STD3_mapped",[56,44]],[[127242,127242],"disallowed_STD3_mapped",[57,44]],[[127243,127244],"valid",[],"NV8"],[[127245,127247],"disallowed"],[[127248,127248],"disallowed_STD3_mapped",[40,97,41]],[[127249,127249],"disallowed_STD3_mapped",[40,98,41]],[[127250,127250],"disallowed_STD3_mapped",[40,99,41]],[[127251,127251],"disallowed_STD3_mapped",[40,100,41]],[[127252,127252],"disallowed_STD3_mapped",[40,101,41]],[[127253,127253],"disallowed_STD3_mapped",[40,102,41]],[[127254,127254],"disallowed_STD3_mapped",[40,103,41]],[[127255,127255],"disallowed_STD3_mapped",[40,104,41]],[[127256,127256],"disallowed_STD3_mapped",[40,105,41]],[[127257,127257],"disallowed_STD3_mapped",[40,106,41]],[[127258,127258],"disallowed_STD3_mapped",[40,107,41]],[[127259,127259],"disallowed_STD3_mapped",[40,108,41]],[[127260,127260],"disallowed_STD3_mapped",[40,109,41]],[[127261,127261],"disallowed_STD3_mapped",[40,110,41]],[[127262,127262],"disallowed_STD3_mapped",[40,111,41]],[[127263,127263],"disallowed_STD3_mapped",[40,112,41]],[[127264,127264],"disallowed_STD3_mapped",[40,113,41]],[[127265,127265],"disallowed_STD3_mapped",[40,114,41]],[[127266,127266],"disallowed_STD3_mapped",[40,115,41]],[[127267,127267],"disallowed_STD3_mapped",[40,116,41]],[[127268,127268],"disallowed_STD3_mapped",[40,117,41]],[[127269,127269],"disallowed_STD3_mapped",[40,118,41]],[[127270,127270],"disallowed_STD3_mapped",[40,119,41]],[[127271,127271],"disallowed_STD3_mapped",[40,120,41]],[[127272,127272],"disallowed_STD3_mapped",[40,121,41]],[[127273,127273],"disallowed_STD3_mapped",[40,122,41]],[[127274,127274],"mapped",[12308,115,12309]],[[127275,127275],"mapped",[99]],[[127276,127276],"mapped",[114]],[[127277,127277],"mapped",[99,100]],[[127278,127278],"mapped",[119,122]],[[127279,127279],"disallowed"],[[127280,127280],"mapped",[97]],[[127281,127281],"mapped",[98]],[[127282,127282],"mapped",[99]],[[127283,127283],"mapped",[100]],[[127284,127284],"mapped",[101]],[[127285,127285],"mapped",[102]],[[127286,127286],"mapped",[103]],[[127287,127287],"mapped",[104]],[[127288,127288],"mapped",[105]],[[127289,127289],"mapped",[106]],[[127290,127290],"mapped",[107]],[[127291,127291],"mapped",[108]],[[127292,127292],"mapped",[109]],[[127293,127293],"mapped",[110]],[[127294,127294],"mapped",[111]],[[127295,127295],"mapped",[112]],[[127296,127296],"mapped",[113]],[[127297,127297],"mapped",[114]],[[127298,127298],"mapped",[115]],[[127299,127299],"mapped",[116]],[[127300,127300],"mapped",[117]],[[127301,127301],"mapped",[118]],[[127302,127302],"mapped",[119]],[[127303,127303],"mapped",[120]],[[127304,127304],"mapped",[121]],[[127305,127305],"mapped",[122]],[[127306,127306],"mapped",[104,118]],[[127307,127307],"mapped",[109,118]],[[127308,127308],"mapped",[115,100]],[[127309,127309],"mapped",[115,115]],[[127310,127310],"mapped",[112,112,118]],[[127311,127311],"mapped",[119,99]],[[127312,127318],"valid",[],"NV8"],[[127319,127319],"valid",[],"NV8"],[[127320,127326],"valid",[],"NV8"],[[127327,127327],"valid",[],"NV8"],[[127328,127337],"valid",[],"NV8"],[[127338,127338],"mapped",[109,99]],[[127339,127339],"mapped",[109,100]],[[127340,127343],"disallowed"],[[127344,127352],"valid",[],"NV8"],[[127353,127353],"valid",[],"NV8"],[[127354,127354],"valid",[],"NV8"],[[127355,127356],"valid",[],"NV8"],[[127357,127358],"valid",[],"NV8"],[[127359,127359],"valid",[],"NV8"],[[127360,127369],"valid",[],"NV8"],[[127370,127373],"valid",[],"NV8"],[[127374,127375],"valid",[],"NV8"],[[127376,127376],"mapped",[100,106]],[[127377,127386],"valid",[],"NV8"],[[127387,127461],"disallowed"],[[127462,127487],"valid",[],"NV8"],[[127488,127488],"mapped",[12411,12363]],[[127489,127489],"mapped",[12467,12467]],[[127490,127490],"mapped",[12469]],[[127491,127503],"disallowed"],[[127504,127504],"mapped",[25163]],[[127505,127505],"mapped",[23383]],[[127506,127506],"mapped",[21452]],[[127507,127507],"mapped",[12487]],[[127508,127508],"mapped",[20108]],[[127509,127509],"mapped",[22810]],[[127510,127510],"mapped",[35299]],[[127511,127511],"mapped",[22825]],[[127512,127512],"mapped",[20132]],[[127513,127513],"mapped",[26144]],[[127514,127514],"mapped",[28961]],[[127515,127515],"mapped",[26009]],[[127516,127516],"mapped",[21069]],[[127517,127517],"mapped",[24460]],[[127518,127518],"mapped",[20877]],[[127519,127519],"mapped",[26032]],[[127520,127520],"mapped",[21021]],[[127521,127521],"mapped",[32066]],[[127522,127522],"mapped",[29983]],[[127523,127523],"mapped",[36009]],[[127524,127524],"mapped",[22768]],[[127525,127525],"mapped",[21561]],[[127526,127526],"mapped",[28436]],[[127527,127527],"mapped",[25237]],[[127528,127528],"mapped",[25429]],[[127529,127529],"mapped",[19968]],[[127530,127530],"mapped",[19977]],[[127531,127531],"mapped",[36938]],[[127532,127532],"mapped",[24038]],[[127533,127533],"mapped",[20013]],[[127534,127534],"mapped",[21491]],[[127535,127535],"mapped",[25351]],[[127536,127536],"mapped",[36208]],[[127537,127537],"mapped",[25171]],[[127538,127538],"mapped",[31105]],[[127539,127539],"mapped",[31354]],[[127540,127540],"mapped",[21512]],[[127541,127541],"mapped",[28288]],[[127542,127542],"mapped",[26377]],[[127543,127543],"mapped",[26376]],[[127544,127544],"mapped",[30003]],[[127545,127545],"mapped",[21106]],[[127546,127546],"mapped",[21942]],[[127547,127551],"disallowed"],[[127552,127552],"mapped",[12308,26412,12309]],[[127553,127553],"mapped",[12308,19977,12309]],[[127554,127554],"mapped",[12308,20108,12309]],[[127555,127555],"mapped",[12308,23433,12309]],[[127556,127556],"mapped",[12308,28857,12309]],[[127557,127557],"mapped",[12308,25171,12309]],[[127558,127558],"mapped",[12308,30423,12309]],[[127559,127559],"mapped",[12308,21213,12309]],[[127560,127560],"mapped",[12308,25943,12309]],[[127561,127567],"disallowed"],[[127568,127568],"mapped",[24471]],[[127569,127569],"mapped",[21487]],[[127570,127743],"disallowed"],[[127744,127776],"valid",[],"NV8"],[[127777,127788],"valid",[],"NV8"],[[127789,127791],"valid",[],"NV8"],[[127792,127797],"valid",[],"NV8"],[[127798,127798],"valid",[],"NV8"],[[127799,127868],"valid",[],"NV8"],[[127869,127869],"valid",[],"NV8"],[[127870,127871],"valid",[],"NV8"],[[127872,127891],"valid",[],"NV8"],[[127892,127903],"valid",[],"NV8"],[[127904,127940],"valid",[],"NV8"],[[127941,127941],"valid",[],"NV8"],[[127942,127946],"valid",[],"NV8"],[[127947,127950],"valid",[],"NV8"],[[127951,127955],"valid",[],"NV8"],[[127956,127967],"valid",[],"NV8"],[[127968,127984],"valid",[],"NV8"],[[127985,127991],"valid",[],"NV8"],[[127992,127999],"valid",[],"NV8"],[[128000,128062],"valid",[],"NV8"],[[128063,128063],"valid",[],"NV8"],[[128064,128064],"valid",[],"NV8"],[[128065,128065],"valid",[],"NV8"],[[128066,128247],"valid",[],"NV8"],[[128248,128248],"valid",[],"NV8"],[[128249,128252],"valid",[],"NV8"],[[128253,128254],"valid",[],"NV8"],[[128255,128255],"valid",[],"NV8"],[[128256,128317],"valid",[],"NV8"],[[128318,128319],"valid",[],"NV8"],[[128320,128323],"valid",[],"NV8"],[[128324,128330],"valid",[],"NV8"],[[128331,128335],"valid",[],"NV8"],[[128336,128359],"valid",[],"NV8"],[[128360,128377],"valid",[],"NV8"],[[128378,128378],"disallowed"],[[128379,128419],"valid",[],"NV8"],[[128420,128420],"disallowed"],[[128421,128506],"valid",[],"NV8"],[[128507,128511],"valid",[],"NV8"],[[128512,128512],"valid",[],"NV8"],[[128513,128528],"valid",[],"NV8"],[[128529,128529],"valid",[],"NV8"],[[128530,128532],"valid",[],"NV8"],[[128533,128533],"valid",[],"NV8"],[[128534,128534],"valid",[],"NV8"],[[128535,128535],"valid",[],"NV8"],[[128536,128536],"valid",[],"NV8"],[[128537,128537],"valid",[],"NV8"],[[128538,128538],"valid",[],"NV8"],[[128539,128539],"valid",[],"NV8"],[[128540,128542],"valid",[],"NV8"],[[128543,128543],"valid",[],"NV8"],[[128544,128549],"valid",[],"NV8"],[[128550,128551],"valid",[],"NV8"],[[128552,128555],"valid",[],"NV8"],[[128556,128556],"valid",[],"NV8"],[[128557,128557],"valid",[],"NV8"],[[128558,128559],"valid",[],"NV8"],[[128560,128563],"valid",[],"NV8"],[[128564,128564],"valid",[],"NV8"],[[128565,128576],"valid",[],"NV8"],[[128577,128578],"valid",[],"NV8"],[[128579,128580],"valid",[],"NV8"],[[128581,128591],"valid",[],"NV8"],[[128592,128639],"valid",[],"NV8"],[[128640,128709],"valid",[],"NV8"],[[128710,128719],"valid",[],"NV8"],[[128720,128720],"valid",[],"NV8"],[[128721,128735],"disallowed"],[[128736,128748],"valid",[],"NV8"],[[128749,128751],"disallowed"],[[128752,128755],"valid",[],"NV8"],[[128756,128767],"disallowed"],[[128768,128883],"valid",[],"NV8"],[[128884,128895],"disallowed"],[[128896,128980],"valid",[],"NV8"],[[128981,129023],"disallowed"],[[129024,129035],"valid",[],"NV8"],[[129036,129039],"disallowed"],[[129040,129095],"valid",[],"NV8"],[[129096,129103],"disallowed"],[[129104,129113],"valid",[],"NV8"],[[129114,129119],"disallowed"],[[129120,129159],"valid",[],"NV8"],[[129160,129167],"disallowed"],[[129168,129197],"valid",[],"NV8"],[[129198,129295],"disallowed"],[[129296,129304],"valid",[],"NV8"],[[129305,129407],"disallowed"],[[129408,129412],"valid",[],"NV8"],[[129413,129471],"disallowed"],[[129472,129472],"valid",[],"NV8"],[[129473,131069],"disallowed"],[[131070,131071],"disallowed"],[[131072,173782],"valid"],[[173783,173823],"disallowed"],[[173824,177972],"valid"],[[177973,177983],"disallowed"],[[177984,178205],"valid"],[[178206,178207],"disallowed"],[[178208,183969],"valid"],[[183970,194559],"disallowed"],[[194560,194560],"mapped",[20029]],[[194561,194561],"mapped",[20024]],[[194562,194562],"mapped",[20033]],[[194563,194563],"mapped",[131362]],[[194564,194564],"mapped",[20320]],[[194565,194565],"mapped",[20398]],[[194566,194566],"mapped",[20411]],[[194567,194567],"mapped",[20482]],[[194568,194568],"mapped",[20602]],[[194569,194569],"mapped",[20633]],[[194570,194570],"mapped",[20711]],[[194571,194571],"mapped",[20687]],[[194572,194572],"mapped",[13470]],[[194573,194573],"mapped",[132666]],[[194574,194574],"mapped",[20813]],[[194575,194575],"mapped",[20820]],[[194576,194576],"mapped",[20836]],[[194577,194577],"mapped",[20855]],[[194578,194578],"mapped",[132380]],[[194579,194579],"mapped",[13497]],[[194580,194580],"mapped",[20839]],[[194581,194581],"mapped",[20877]],[[194582,194582],"mapped",[132427]],[[194583,194583],"mapped",[20887]],[[194584,194584],"mapped",[20900]],[[194585,194585],"mapped",[20172]],[[194586,194586],"mapped",[20908]],[[194587,194587],"mapped",[20917]],[[194588,194588],"mapped",[168415]],[[194589,194589],"mapped",[20981]],[[194590,194590],"mapped",[20995]],[[194591,194591],"mapped",[13535]],[[194592,194592],"mapped",[21051]],[[194593,194593],"mapped",[21062]],[[194594,194594],"mapped",[21106]],[[194595,194595],"mapped",[21111]],[[194596,194596],"mapped",[13589]],[[194597,194597],"mapped",[21191]],[[194598,194598],"mapped",[21193]],[[194599,194599],"mapped",[21220]],[[194600,194600],"mapped",[21242]],[[194601,194601],"mapped",[21253]],[[194602,194602],"mapped",[21254]],[[194603,194603],"mapped",[21271]],[[194604,194604],"mapped",[21321]],[[194605,194605],"mapped",[21329]],[[194606,194606],"mapped",[21338]],[[194607,194607],"mapped",[21363]],[[194608,194608],"mapped",[21373]],[[194609,194611],"mapped",[21375]],[[194612,194612],"mapped",[133676]],[[194613,194613],"mapped",[28784]],[[194614,194614],"mapped",[21450]],[[194615,194615],"mapped",[21471]],[[194616,194616],"mapped",[133987]],[[194617,194617],"mapped",[21483]],[[194618,194618],"mapped",[21489]],[[194619,194619],"mapped",[21510]],[[194620,194620],"mapped",[21662]],[[194621,194621],"mapped",[21560]],[[194622,194622],"mapped",[21576]],[[194623,194623],"mapped",[21608]],[[194624,194624],"mapped",[21666]],[[194625,194625],"mapped",[21750]],[[194626,194626],"mapped",[21776]],[[194627,194627],"mapped",[21843]],[[194628,194628],"mapped",[21859]],[[194629,194630],"mapped",[21892]],[[194631,194631],"mapped",[21913]],[[194632,194632],"mapped",[21931]],[[194633,194633],"mapped",[21939]],[[194634,194634],"mapped",[21954]],[[194635,194635],"mapped",[22294]],[[194636,194636],"mapped",[22022]],[[194637,194637],"mapped",[22295]],[[194638,194638],"mapped",[22097]],[[194639,194639],"mapped",[22132]],[[194640,194640],"mapped",[20999]],[[194641,194641],"mapped",[22766]],[[194642,194642],"mapped",[22478]],[[194643,194643],"mapped",[22516]],[[194644,194644],"mapped",[22541]],[[194645,194645],"mapped",[22411]],[[194646,194646],"mapped",[22578]],[[194647,194647],"mapped",[22577]],[[194648,194648],"mapped",[22700]],[[194649,194649],"mapped",[136420]],[[194650,194650],"mapped",[22770]],[[194651,194651],"mapped",[22775]],[[194652,194652],"mapped",[22790]],[[194653,194653],"mapped",[22810]],[[194654,194654],"mapped",[22818]],[[194655,194655],"mapped",[22882]],[[194656,194656],"mapped",[136872]],[[194657,194657],"mapped",[136938]],[[194658,194658],"mapped",[23020]],[[194659,194659],"mapped",[23067]],[[194660,194660],"mapped",[23079]],[[194661,194661],"mapped",[23000]],[[194662,194662],"mapped",[23142]],[[194663,194663],"mapped",[14062]],[[194664,194664],"disallowed"],[[194665,194665],"mapped",[23304]],[[194666,194667],"mapped",[23358]],[[194668,194668],"mapped",[137672]],[[194669,194669],"mapped",[23491]],[[194670,194670],"mapped",[23512]],[[194671,194671],"mapped",[23527]],[[194672,194672],"mapped",[23539]],[[194673,194673],"mapped",[138008]],[[194674,194674],"mapped",[23551]],[[194675,194675],"mapped",[23558]],[[194676,194676],"disallowed"],[[194677,194677],"mapped",[23586]],[[194678,194678],"mapped",[14209]],[[194679,194679],"mapped",[23648]],[[194680,194680],"mapped",[23662]],[[194681,194681],"mapped",[23744]],[[194682,194682],"mapped",[23693]],[[194683,194683],"mapped",[138724]],[[194684,194684],"mapped",[23875]],[[194685,194685],"mapped",[138726]],[[194686,194686],"mapped",[23918]],[[194687,194687],"mapped",[23915]],[[194688,194688],"mapped",[23932]],[[194689,194689],"mapped",[24033]],[[194690,194690],"mapped",[24034]],[[194691,194691],"mapped",[14383]],[[194692,194692],"mapped",[24061]],[[194693,194693],"mapped",[24104]],[[194694,194694],"mapped",[24125]],[[194695,194695],"mapped",[24169]],[[194696,194696],"mapped",[14434]],[[194697,194697],"mapped",[139651]],[[194698,194698],"mapped",[14460]],[[194699,194699],"mapped",[24240]],[[194700,194700],"mapped",[24243]],[[194701,194701],"mapped",[24246]],[[194702,194702],"mapped",[24266]],[[194703,194703],"mapped",[172946]],[[194704,194704],"mapped",[24318]],[[194705,194706],"mapped",[140081]],[[194707,194707],"mapped",[33281]],[[194708,194709],"mapped",[24354]],[[194710,194710],"mapped",[14535]],[[194711,194711],"mapped",[144056]],[[194712,194712],"mapped",[156122]],[[194713,194713],"mapped",[24418]],[[194714,194714],"mapped",[24427]],[[194715,194715],"mapped",[14563]],[[194716,194716],"mapped",[24474]],[[194717,194717],"mapped",[24525]],[[194718,194718],"mapped",[24535]],[[194719,194719],"mapped",[24569]],[[194720,194720],"mapped",[24705]],[[194721,194721],"mapped",[14650]],[[194722,194722],"mapped",[14620]],[[194723,194723],"mapped",[24724]],[[194724,194724],"mapped",[141012]],[[194725,194725],"mapped",[24775]],[[194726,194726],"mapped",[24904]],[[194727,194727],"mapped",[24908]],[[194728,194728],"mapped",[24910]],[[194729,194729],"mapped",[24908]],[[194730,194730],"mapped",[24954]],[[194731,194731],"mapped",[24974]],[[194732,194732],"mapped",[25010]],[[194733,194733],"mapped",[24996]],[[194734,194734],"mapped",[25007]],[[194735,194735],"mapped",[25054]],[[194736,194736],"mapped",[25074]],[[194737,194737],"mapped",[25078]],[[194738,194738],"mapped",[25104]],[[194739,194739],"mapped",[25115]],[[194740,194740],"mapped",[25181]],[[194741,194741],"mapped",[25265]],[[194742,194742],"mapped",[25300]],[[194743,194743],"mapped",[25424]],[[194744,194744],"mapped",[142092]],[[194745,194745],"mapped",[25405]],[[194746,194746],"mapped",[25340]],[[194747,194747],"mapped",[25448]],[[194748,194748],"mapped",[25475]],[[194749,194749],"mapped",[25572]],[[194750,194750],"mapped",[142321]],[[194751,194751],"mapped",[25634]],[[194752,194752],"mapped",[25541]],[[194753,194753],"mapped",[25513]],[[194754,194754],"mapped",[14894]],[[194755,194755],"mapped",[25705]],[[194756,194756],"mapped",[25726]],[[194757,194757],"mapped",[25757]],[[194758,194758],"mapped",[25719]],[[194759,194759],"mapped",[14956]],[[194760,194760],"mapped",[25935]],[[194761,194761],"mapped",[25964]],[[194762,194762],"mapped",[143370]],[[194763,194763],"mapped",[26083]],[[194764,194764],"mapped",[26360]],[[194765,194765],"mapped",[26185]],[[194766,194766],"mapped",[15129]],[[194767,194767],"mapped",[26257]],[[194768,194768],"mapped",[15112]],[[194769,194769],"mapped",[15076]],[[194770,194770],"mapped",[20882]],[[194771,194771],"mapped",[20885]],[[194772,194772],"mapped",[26368]],[[194773,194773],"mapped",[26268]],[[194774,194774],"mapped",[32941]],[[194775,194775],"mapped",[17369]],[[194776,194776],"mapped",[26391]],[[194777,194777],"mapped",[26395]],[[194778,194778],"mapped",[26401]],[[194779,194779],"mapped",[26462]],[[194780,194780],"mapped",[26451]],[[194781,194781],"mapped",[144323]],[[194782,194782],"mapped",[15177]],[[194783,194783],"mapped",[26618]],[[194784,194784],"mapped",[26501]],[[194785,194785],"mapped",[26706]],[[194786,194786],"mapped",[26757]],[[194787,194787],"mapped",[144493]],[[194788,194788],"mapped",[26766]],[[194789,194789],"mapped",[26655]],[[194790,194790],"mapped",[26900]],[[194791,194791],"mapped",[15261]],[[194792,194792],"mapped",[26946]],[[194793,194793],"mapped",[27043]],[[194794,194794],"mapped",[27114]],[[194795,194795],"mapped",[27304]],[[194796,194796],"mapped",[145059]],[[194797,194797],"mapped",[27355]],[[194798,194798],"mapped",[15384]],[[194799,194799],"mapped",[27425]],[[194800,194800],"mapped",[145575]],[[194801,194801],"mapped",[27476]],[[194802,194802],"mapped",[15438]],[[194803,194803],"mapped",[27506]],[[194804,194804],"mapped",[27551]],[[194805,194805],"mapped",[27578]],[[194806,194806],"mapped",[27579]],[[194807,194807],"mapped",[146061]],[[194808,194808],"mapped",[138507]],[[194809,194809],"mapped",[146170]],[[194810,194810],"mapped",[27726]],[[194811,194811],"mapped",[146620]],[[194812,194812],"mapped",[27839]],[[194813,194813],"mapped",[27853]],[[194814,194814],"mapped",[27751]],[[194815,194815],"mapped",[27926]],[[194816,194816],"mapped",[27966]],[[194817,194817],"mapped",[28023]],[[194818,194818],"mapped",[27969]],[[194819,194819],"mapped",[28009]],[[194820,194820],"mapped",[28024]],[[194821,194821],"mapped",[28037]],[[194822,194822],"mapped",[146718]],[[194823,194823],"mapped",[27956]],[[194824,194824],"mapped",[28207]],[[194825,194825],"mapped",[28270]],[[194826,194826],"mapped",[15667]],[[194827,194827],"mapped",[28363]],[[194828,194828],"mapped",[28359]],[[194829,194829],"mapped",[147153]],[[194830,194830],"mapped",[28153]],[[194831,194831],"mapped",[28526]],[[194832,194832],"mapped",[147294]],[[194833,194833],"mapped",[147342]],[[194834,194834],"mapped",[28614]],[[194835,194835],"mapped",[28729]],[[194836,194836],"mapped",[28702]],[[194837,194837],"mapped",[28699]],[[194838,194838],"mapped",[15766]],[[194839,194839],"mapped",[28746]],[[194840,194840],"mapped",[28797]],[[194841,194841],"mapped",[28791]],[[194842,194842],"mapped",[28845]],[[194843,194843],"mapped",[132389]],[[194844,194844],"mapped",[28997]],[[194845,194845],"mapped",[148067]],[[194846,194846],"mapped",[29084]],[[194847,194847],"disallowed"],[[194848,194848],"mapped",[29224]],[[194849,194849],"mapped",[29237]],[[194850,194850],"mapped",[29264]],[[194851,194851],"mapped",[149000]],[[194852,194852],"mapped",[29312]],[[194853,194853],"mapped",[29333]],[[194854,194854],"mapped",[149301]],[[194855,194855],"mapped",[149524]],[[194856,194856],"mapped",[29562]],[[194857,194857],"mapped",[29579]],[[194858,194858],"mapped",[16044]],[[194859,194859],"mapped",[29605]],[[194860,194861],"mapped",[16056]],[[194862,194862],"mapped",[29767]],[[194863,194863],"mapped",[29788]],[[194864,194864],"mapped",[29809]],[[194865,194865],"mapped",[29829]],[[194866,194866],"mapped",[29898]],[[194867,194867],"mapped",[16155]],[[194868,194868],"mapped",[29988]],[[194869,194869],"mapped",[150582]],[[194870,194870],"mapped",[30014]],[[194871,194871],"mapped",[150674]],[[194872,194872],"mapped",[30064]],[[194873,194873],"mapped",[139679]],[[194874,194874],"mapped",[30224]],[[194875,194875],"mapped",[151457]],[[194876,194876],"mapped",[151480]],[[194877,194877],"mapped",[151620]],[[194878,194878],"mapped",[16380]],[[194879,194879],"mapped",[16392]],[[194880,194880],"mapped",[30452]],[[194881,194881],"mapped",[151795]],[[194882,194882],"mapped",[151794]],[[194883,194883],"mapped",[151833]],[[194884,194884],"mapped",[151859]],[[194885,194885],"mapped",[30494]],[[194886,194887],"mapped",[30495]],[[194888,194888],"mapped",[30538]],[[194889,194889],"mapped",[16441]],[[194890,194890],"mapped",[30603]],[[194891,194891],"mapped",[16454]],[[194892,194892],"mapped",[16534]],[[194893,194893],"mapped",[152605]],[[194894,194894],"mapped",[30798]],[[194895,194895],"mapped",[30860]],[[194896,194896],"mapped",[30924]],[[194897,194897],"mapped",[16611]],[[194898,194898],"mapped",[153126]],[[194899,194899],"mapped",[31062]],[[194900,194900],"mapped",[153242]],[[194901,194901],"mapped",[153285]],[[194902,194902],"mapped",[31119]],[[194903,194903],"mapped",[31211]],[[194904,194904],"mapped",[16687]],[[194905,194905],"mapped",[31296]],[[194906,194906],"mapped",[31306]],[[194907,194907],"mapped",[31311]],[[194908,194908],"mapped",[153980]],[[194909,194910],"mapped",[154279]],[[194911,194911],"disallowed"],[[194912,194912],"mapped",[16898]],[[194913,194913],"mapped",[154539]],[[194914,194914],"mapped",[31686]],[[194915,194915],"mapped",[31689]],[[194916,194916],"mapped",[16935]],[[194917,194917],"mapped",[154752]],[[194918,194918],"mapped",[31954]],[[194919,194919],"mapped",[17056]],[[194920,194920],"mapped",[31976]],[[194921,194921],"mapped",[31971]],[[194922,194922],"mapped",[32000]],[[194923,194923],"mapped",[155526]],[[194924,194924],"mapped",[32099]],[[194925,194925],"mapped",[17153]],[[194926,194926],"mapped",[32199]],[[194927,194927],"mapped",[32258]],[[194928,194928],"mapped",[32325]],[[194929,194929],"mapped",[17204]],[[194930,194930],"mapped",[156200]],[[194931,194931],"mapped",[156231]],[[194932,194932],"mapped",[17241]],[[194933,194933],"mapped",[156377]],[[194934,194934],"mapped",[32634]],[[194935,194935],"mapped",[156478]],[[194936,194936],"mapped",[32661]],[[194937,194937],"mapped",[32762]],[[194938,194938],"mapped",[32773]],[[194939,194939],"mapped",[156890]],[[194940,194940],"mapped",[156963]],[[194941,194941],"mapped",[32864]],[[194942,194942],"mapped",[157096]],[[194943,194943],"mapped",[32880]],[[194944,194944],"mapped",[144223]],[[194945,194945],"mapped",[17365]],[[194946,194946],"mapped",[32946]],[[194947,194947],"mapped",[33027]],[[194948,194948],"mapped",[17419]],[[194949,194949],"mapped",[33086]],[[194950,194950],"mapped",[23221]],[[194951,194951],"mapped",[157607]],[[194952,194952],"mapped",[157621]],[[194953,194953],"mapped",[144275]],[[194954,194954],"mapped",[144284]],[[194955,194955],"mapped",[33281]],[[194956,194956],"mapped",[33284]],[[194957,194957],"mapped",[36766]],[[194958,194958],"mapped",[17515]],[[194959,194959],"mapped",[33425]],[[194960,194960],"mapped",[33419]],[[194961,194961],"mapped",[33437]],[[194962,194962],"mapped",[21171]],[[194963,194963],"mapped",[33457]],[[194964,194964],"mapped",[33459]],[[194965,194965],"mapped",[33469]],[[194966,194966],"mapped",[33510]],[[194967,194967],"mapped",[158524]],[[194968,194968],"mapped",[33509]],[[194969,194969],"mapped",[33565]],[[194970,194970],"mapped",[33635]],[[194971,194971],"mapped",[33709]],[[194972,194972],"mapped",[33571]],[[194973,194973],"mapped",[33725]],[[194974,194974],"mapped",[33767]],[[194975,194975],"mapped",[33879]],[[194976,194976],"mapped",[33619]],[[194977,194977],"mapped",[33738]],[[194978,194978],"mapped",[33740]],[[194979,194979],"mapped",[33756]],[[194980,194980],"mapped",[158774]],[[194981,194981],"mapped",[159083]],[[194982,194982],"mapped",[158933]],[[194983,194983],"mapped",[17707]],[[194984,194984],"mapped",[34033]],[[194985,194985],"mapped",[34035]],[[194986,194986],"mapped",[34070]],[[194987,194987],"mapped",[160714]],[[194988,194988],"mapped",[34148]],[[194989,194989],"mapped",[159532]],[[194990,194990],"mapped",[17757]],[[194991,194991],"mapped",[17761]],[[194992,194992],"mapped",[159665]],[[194993,194993],"mapped",[159954]],[[194994,194994],"mapped",[17771]],[[194995,194995],"mapped",[34384]],[[194996,194996],"mapped",[34396]],[[194997,194997],"mapped",[34407]],[[194998,194998],"mapped",[34409]],[[194999,194999],"mapped",[34473]],[[195000,195000],"mapped",[34440]],[[195001,195001],"mapped",[34574]],[[195002,195002],"mapped",[34530]],[[195003,195003],"mapped",[34681]],[[195004,195004],"mapped",[34600]],[[195005,195005],"mapped",[34667]],[[195006,195006],"mapped",[34694]],[[195007,195007],"disallowed"],[[195008,195008],"mapped",[34785]],[[195009,195009],"mapped",[34817]],[[195010,195010],"mapped",[17913]],[[195011,195011],"mapped",[34912]],[[195012,195012],"mapped",[34915]],[[195013,195013],"mapped",[161383]],[[195014,195014],"mapped",[35031]],[[195015,195015],"mapped",[35038]],[[195016,195016],"mapped",[17973]],[[195017,195017],"mapped",[35066]],[[195018,195018],"mapped",[13499]],[[195019,195019],"mapped",[161966]],[[195020,195020],"mapped",[162150]],[[195021,195021],"mapped",[18110]],[[195022,195022],"mapped",[18119]],[[195023,195023],"mapped",[35488]],[[195024,195024],"mapped",[35565]],[[195025,195025],"mapped",[35722]],[[195026,195026],"mapped",[35925]],[[195027,195027],"mapped",[162984]],[[195028,195028],"mapped",[36011]],[[195029,195029],"mapped",[36033]],[[195030,195030],"mapped",[36123]],[[195031,195031],"mapped",[36215]],[[195032,195032],"mapped",[163631]],[[195033,195033],"mapped",[133124]],[[195034,195034],"mapped",[36299]],[[195035,195035],"mapped",[36284]],[[195036,195036],"mapped",[36336]],[[195037,195037],"mapped",[133342]],[[195038,195038],"mapped",[36564]],[[195039,195039],"mapped",[36664]],[[195040,195040],"mapped",[165330]],[[195041,195041],"mapped",[165357]],[[195042,195042],"mapped",[37012]],[[195043,195043],"mapped",[37105]],[[195044,195044],"mapped",[37137]],[[195045,195045],"mapped",[165678]],[[195046,195046],"mapped",[37147]],[[195047,195047],"mapped",[37432]],[[195048,195048],"mapped",[37591]],[[195049,195049],"mapped",[37592]],[[195050,195050],"mapped",[37500]],[[195051,195051],"mapped",[37881]],[[195052,195052],"mapped",[37909]],[[195053,195053],"mapped",[166906]],[[195054,195054],"mapped",[38283]],[[195055,195055],"mapped",[18837]],[[195056,195056],"mapped",[38327]],[[195057,195057],"mapped",[167287]],[[195058,195058],"mapped",[18918]],[[195059,195059],"mapped",[38595]],[[195060,195060],"mapped",[23986]],[[195061,195061],"mapped",[38691]],[[195062,195062],"mapped",[168261]],[[195063,195063],"mapped",[168474]],[[195064,195064],"mapped",[19054]],[[195065,195065],"mapped",[19062]],[[195066,195066],"mapped",[38880]],[[195067,195067],"mapped",[168970]],[[195068,195068],"mapped",[19122]],[[195069,195069],"mapped",[169110]],[[195070,195071],"mapped",[38923]],[[195072,195072],"mapped",[38953]],[[195073,195073],"mapped",[169398]],[[195074,195074],"mapped",[39138]],[[195075,195075],"mapped",[19251]],[[195076,195076],"mapped",[39209]],[[195077,195077],"mapped",[39335]],[[195078,195078],"mapped",[39362]],[[195079,195079],"mapped",[39422]],[[195080,195080],"mapped",[19406]],[[195081,195081],"mapped",[170800]],[[195082,195082],"mapped",[39698]],[[195083,195083],"mapped",[40000]],[[195084,195084],"mapped",[40189]],[[195085,195085],"mapped",[19662]],[[195086,195086],"mapped",[19693]],[[195087,195087],"mapped",[40295]],[[195088,195088],"mapped",[172238]],[[195089,195089],"mapped",[19704]],[[195090,195090],"mapped",[172293]],[[195091,195091],"mapped",[172558]],[[195092,195092],"mapped",[172689]],[[195093,195093],"mapped",[40635]],[[195094,195094],"mapped",[19798]],[[195095,195095],"mapped",[40697]],[[195096,195096],"mapped",[40702]],[[195097,195097],"mapped",[40709]],[[195098,195098],"mapped",[40719]],[[195099,195099],"mapped",[40726]],[[195100,195100],"mapped",[40763]],[[195101,195101],"mapped",[173568]],[[195102,196605],"disallowed"],[[196606,196607],"disallowed"],[[196608,262141],"disallowed"],[[262142,262143],"disallowed"],[[262144,327677],"disallowed"],[[327678,327679],"disallowed"],[[327680,393213],"disallowed"],[[393214,393215],"disallowed"],[[393216,458749],"disallowed"],[[458750,458751],"disallowed"],[[458752,524285],"disallowed"],[[524286,524287],"disallowed"],[[524288,589821],"disallowed"],[[589822,589823],"disallowed"],[[589824,655357],"disallowed"],[[655358,655359],"disallowed"],[[655360,720893],"disallowed"],[[720894,720895],"disallowed"],[[720896,786429],"disallowed"],[[786430,786431],"disallowed"],[[786432,851965],"disallowed"],[[851966,851967],"disallowed"],[[851968,917501],"disallowed"],[[917502,917503],"disallowed"],[[917504,917504],"disallowed"],[[917505,917505],"disallowed"],[[917506,917535],"disallowed"],[[917536,917631],"disallowed"],[[917632,917759],"disallowed"],[[917760,917999],"ignored"],[[918000,983037],"disallowed"],[[983038,983039],"disallowed"],[[983040,1048573],"disallowed"],[[1048574,1048575],"disallowed"],[[1048576,1114109],"disallowed"],[[1114110,1114111],"disallowed"]]')}},A={};function Y(t){var a=A[t];if(void 0!==a)return a.exports;var i=A[t]={id:t,loaded:!1,exports:{}};return e[t].call(i.exports,i,i.exports,Y),i.loaded=!0,i.exports}return Y.amdD=function(){throw new Error("define cannot be used indirect")},Y.amdO={},Y.n=e=>{var A=e&&e.__esModule?()=>e.default:()=>e;return Y.d(A,{a:A}),A},Y.d=(e,A)=>{for(var t in A)Y.o(A,t)&&!Y.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:A[t]})},Y.o=(e,A)=>Object.prototype.hasOwnProperty.call(e,A),Y.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},Y.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),Y(6086)})()}));
//# sourceMappingURL=index.js.map